============================= test session starts ==============================
platform linux -- Python 3.7.3, pytest-6.2.3, py-1.10.0, pluggy-0.13.1
rootdir: /tmp_amd/kamen/export/kamen/3/cs1531/automark/tempstore, configfile: pytest.ini
plugins: forked-1.3.0, xdist-2.2.1, hypothesis-6.1.1, timeout-1.4.2
collected 425 items

http_tests/admin_user_remove_http_test.py .....F                         [  1%]
http_tests/admin_userpermission_change_http_test.py .F.F..F              [  3%]
http_tests/auth_http_test.py ..F..                                       [  4%]
http_tests/channel_addowner_v1_http_test.py ...FF                        [  5%]
http_tests/channel_details_v2_http_test.py FFFFFF                        [  6%]
http_tests/channel_invite_v2_http_test.py FFFFFFF                        [  8%]
http_tests/channel_join_v2_http_test.py ....                             [  9%]
http_tests/channel_leave_http_test.py .....                              [ 10%]
http_tests/channel_messages_v2_http_test.py .....F.......F...            [ 14%]
http_tests/channel_removeowner_v1_http_test.py .F..FF                    [ 16%]
http_tests/channels_create_http_test.py ....                             [ 16%]
http_tests/channels_list_v2_http_test.py ...F                            [ 17%]
http_tests/channels_listall_http_test.py ....                            [ 18%]
http_tests/dm_create_v1_http_test.py FFFF                                [ 19%]
http_tests/dm_details_v1_http_test.py FFF                                [ 20%]
http_tests/dm_invite_v1_http_test.py FFFFFF                              [ 21%]
http_tests/dm_leave_v1_http_test.py FFFFF                                [ 23%]
http_tests/dm_list_v1_http_test.py .FF                                   [ 23%]
http_tests/dm_messages_v1_http_test.py FFF..F.......F...                 [ 27%]
http_tests/dm_remove_v1_http_test.py .FFFF                               [ 28%]
http_tests/message_edit_v2_http_test.py .....FFFFFF..F                   [ 32%]
http_tests/message_remove_v2_http_test.py ............                   [ 35%]
http_tests/message_send_v2_http_test.py .........                        [ 37%]
http_tests/message_senddm_http_test.py F.....                            [ 38%]
http_tests/message_share_v1_http_test.py ...FFF.FFF                      [ 40%]
http_tests/notifications_get_v1_http_test.py ...FF                       [ 42%]
http_tests/search_http_test.py FFF.FF                                    [ 43%]
http_tests/user_profile_http_test.py FFFFFFF.                            [ 45%]
tests/admin_user_remove_v1_test.py ........                              [ 47%]
tests/admin_userpermission_change_v1_test.py ........                    [ 49%]
tests/auth_test.py ..........                                            [ 51%]
tests/channel_addowner_v1_test.py ......                                 [ 52%]
tests/channel_details_v2_test.py ......                                  [ 54%]
tests/channel_invite_v2_test.py .......                                  [ 56%]
tests/channel_join_v2_test.py .....                                      [ 57%]
tests/channel_leave_v1_test.py .....                                     [ 58%]
tests/channel_messages_v2_test.py ..................                     [ 62%]
tests/channel_removeowner_v1_test.py ......                              [ 64%]
tests/channels_create_v2_test.py .....                                   [ 65%]
tests/channels_list_v2_test.py .......                                   [ 66%]
tests/channels_listall_v2_test.py ....                                   [ 67%]
tests/dm_create_v1_test.py ....                                          [ 68%]
tests/dm_details_v1_test.py .....                                        [ 69%]
tests/dm_invite_v1_test.py ......                                        [ 71%]
tests/dm_leave_v1_test.py .....                                          [ 72%]
tests/dm_list_v1_test.py ...                                             [ 73%]
tests/dm_messages_v1_test.py ..................                          [ 77%]
tests/dm_remove_v1_test.py .....                                         [ 78%]
tests/echo_test.py ..                                                    [ 79%]
tests/message_edit_v2_test.py ..............                             [ 82%]
tests/message_remove_v2_test.py ............                             [ 85%]
tests/message_send_v2_test.py .........                                  [ 87%]
tests/message_senddm_v1_test.py ...........                              [ 89%]
tests/message_share_v1_test.py ...........                               [ 92%]
tests/notifications_get_v1_test.py .......                               [ 94%]
tests/search_v2_test.py ........                                         [ 96%]
tests/user_profile_test.py .................                             [100%]

=================================== FAILURES ===================================
____________________________ test_admin_user_remove ____________________________

setup_user_data = {'user1': {'auth_user_id': 27, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI3LCJsb2dpbl90aW1lIjoxNjE4MjQ5...NjcxLCJzYWx0IjoiZGUyMTVmOWUtMTYxMS00ZmY4LWE4NzAtNzZiMjQ2MTg2MTQ3In0.mMfasrv9VUdGRInU7Hz2FAX2xBA-CXyn9pdqOzzyhKo'}, ...}

    def test_admin_user_remove(setup_user_data):
        users = setup_user_data
    
        # User 1 makes channel 1
        channel_id1 = requests.post(config.url + 'channels/create/v2', json={
            'token': users['user1']['token'],
            'name': "Public Channel",
            'is_public': True,
        }).json()
    
        # User 3 joins the public channel
        requests.post(config.url + 'channel/join/v2', json={
            'token': users['user3']['token'],
            'channel_id': channel_id1['channel_id'],
        }).json()
    
        # User 1 makes User 3 an owner
        requests.post(config.url + 'channel/addowner/v1', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'u_id': users['user3']['auth_user_id']
        }).json()
    
        # User 1 sends a message
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': 'Nice day'
        }).json()
    
        # User 2 makes channel 2
        channel_id2 = requests.post(config.url + 'channels/create/v2', json={
            'token': users['user2']['token'],
            'name': "Private Channel",
            'is_public': False,
        }).json()
    
        # User 1 joins the private channel as global owner
        requests.post(config.url + 'channel/join/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id2['channel_id'],
        }).json()
    
        # User 1 sends a message
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id2['channel_id'],
            'message': 'Hello user2'
        }).json()
    
        # User 2 sends a message
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user2']['token'],
            'channel_id': channel_id2['channel_id'],
            'message': 'Hello user1'
        }).json()
    
        # User 1 creates a dm to User 2 and User 3. User 1 sends a message
        u_id_list = [users['user2'],users['user3']]
        dm_id1 = requests.post(config.url + 'dm/create/v1', json=dm_create_body(users['user1'],u_id_list)).json()
    
        requests.post(config.url + 'message/senddm/v1', json={
            'token': users['user1']['token'],
            'dm_id': dm_id1['dm_id'],
            'message': "Hi guys",
        }).json()
    
        # Set up variables to test function outputs
        user_profile_id1 = requests.get(config.url + 'user/profile/v2', params={
            'token': users['user2']['token'],
            'u_id': users['user1']['auth_user_id'],
        }).json()
        print(user_profile_id1)
    
        messages_channel_id1 = requests.get(config.url + 'channel/messages/v2', params={
            'token': users['user3']['token'],
            'channel_id': channel_id1['channel_id'],
            'start': 0
        }).json()
    
        messages_channel_id2 = requests.get(config.url + 'channel/messages/v2', params={
            'token': users['user2']['token'],
            'channel_id': channel_id2['channel_id'],
            'start': 0
        }).json()
    
        messages_dm_id1 = requests.get(config.url + 'dm/messages/v1', params={
            'token': users['user2']['token'],
            'dm_id': dm_id1['dm_id'],
            'start': 0
        }).json()
    
        # Ensure the correct output
        assert user_profile_id1['user']['name_first'] == "user1_first"
        assert messages_channel_id1['messages'][0]['message'] == "Nice day"
        assert messages_channel_id2['messages'][0]['message'] == "Hello user1"
        assert messages_channel_id2['messages'][1]['message'] == "Hello user2"
        assert messages_dm_id1['messages'][0]['message'] == "Hi guys"
    
        # Global User 1 makes User 2 Global
        requests.post(config.url + 'admin/userpermission/change/v1', json={
            'token': users['user1']['token'],
            'u_id': users['user2']['auth_user_id'],
            'permission_id': 1,
        }).json()
    
        # Global User 2 makes User 3 Global
        requests.post(config.url + 'admin/userpermission/change/v1', json={
            'token': users['user2']['token'],
            'u_id': users['user3']['auth_user_id'],
            'permission_id': 1,
        }).json()
    
        channel_details = requests.get(config.url + 'channel/details/v2', params={
            'token': users['user2']['token'],
            'channel_id': channel_id2['channel_id'],
        }).json()
        print(channel_details)
        print("\n\n")
    
        # Global User 2 removes User 1
        requests.delete(config.url + 'admin/user/remove/v1', json={
            'token': users['user2']['token'],
            'u_id': users['user1']['auth_user_id'],
        }).json()
    
        channel_details = requests.get(config.url + 'channel/details/v2', params={
            'token': users['user1']['token'],
>           'channel_id': channel_id2['channel_id'],
        }).json()

http_tests/admin_user_remove_http_test.py:280: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7fc5b8138048>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Invalid token</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7fc5b92d3c30>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
----------------------------- Captured stdout call -----------------------------
{'user': {'email': 'user1@email.com', 'handle_str': 'user1_firstuser1_las', 'name_first': 'user1_first', 'name_last': 'user1_last', 'profile_img_url': '', 'u_id': 27}}
{'all_members': [{'email': 'user2@email.com', 'handle_str': 'user2_firstuser2_las', 'name_first': 'user2_first', 'name_last': 'user2_last', 'profile_img_url': '', 'u_id': 28}, {'email': 'user1@email.com', 'handle_str': 'user1_firstuser1_las', 'name_first': 'user1_first', 'name_last': 'user1_last', 'profile_img_url': '', 'u_id': 27}], 'is_public': False, 'name': 'Private Channel', 'owner_members': [{'email': 'user2@email.com', 'handle_str': 'user2_firstuser2_las', 'name_first': 'user2_first', 'name_last': 'user2_last', 'profile_img_url': '', 'u_id': 28}, {'email': 'user1@email.com', 'handle_str': 'user1_firstuser1_las', 'name_first': 'user1_first', 'name_last': 'user1_last', 'profile_img_url': '', 'u_id': 27}]}



_________________ test_admin_userpermission_change_invalid_uid _________________

setup_user_data = {'user1': {'auth_user_id': 44, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjQ0LCJsb2dpbl90aW1lIjoxNjE4MjQ5...NjcyLCJzYWx0IjoiYzJjNjdjN2EtNWI1YS00NzI2LTg2YzQtMDZlZmZmMWUzYmIzIn0.LYvdvJcLFFzgFr2Fmn-dykiOX-j6bQ6zjYPM7VZ8UIM'}, ...}

    def test_admin_userpermission_change_invalid_uid(setup_user_data):
        users = setup_user_data
    
        # Ensure InputError
>       assert requests.post(config.url + 'admin/userpermission/change/v1', json={
            'token': users['user1']['token'],
            'u_id': "Invalid u_id",
            'permission_id': 2,
        }).status_code == 400
E       AssertionError: assert 500 == 400
E        +  where 500 = <Response [500]>.status_code
E        +    where <Response [500]> = <function post at 0x7fc5b7c38488>(('http://localhost:60811/' + 'admin/userpermission/change/v1'), json={'permission_id': 2, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjQ0LCJsb2dpbl90aW1lIjoxNjE4MjQ5NjcyLCJzYW...IyYWI2YTMtZDA5Ny00NDNlLTlkODItYzAxMTFlZGExZTQwIn0.ztzkPuCIqgyZgMqJXQo8NtpC6QtMd8sMuUcH-Z_-yL8', 'u_id': 'Invalid u_id'})
E        +      where <function post at 0x7fc5b7c38488> = requests.post
E        +      and   'http://localhost:60811/' = config.url

http_tests/admin_userpermission_change_http_test.py:40: AssertionError
_________________ test_admin_userpermission_change_only_owner __________________

setup_user_data = {'user1': {'auth_user_id': 54, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjU0LCJsb2dpbl90aW1lIjoxNjE4MjQ5...NjcyLCJzYWx0IjoiN2NiMWM2MGYtZDdkMy00Y2I3LWFlMjItMGIxZDM5ZmY1ODNlIn0.dimykvKjpLpvEKoFYrlRX_7HQYD5QOxf4ktYABFVqSo'}, ...}

    def test_admin_userpermission_change_only_owner(setup_user_data):
        users = setup_user_data
    
        # Ensure InputError
>       assert requests.post(config.url + 'admin/userpermission/change/v1', json={
            'token': users['user1']['token'],
            'u_id': users['user1']['auth_user_id'],
            'permission_id': 2,
        }).status_code == 400
E       AssertionError: assert 200 == 400
E        +  where 200 = <Response [200]>.status_code
E        +    where <Response [200]> = <function post at 0x7fc5b7c38488>(('http://localhost:60811/' + 'admin/userpermission/change/v1'), json={'permission_id': 2, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjU0LCJsb2dpbl90aW1lIjoxNjE4MjQ5NjcyLCJzYWx0IjoiMmVhYjgyN2ItMWRlNS00OThhLTg1NGEtN2I2MGIzODJlNGU5In0.OZqNekHw1t5PwRTK9eAAuUXZIzpmvW2VV06-0S0uXBs', 'u_id': 54})
E        +      where <function post at 0x7fc5b7c38488> = requests.post
E        +      and   'http://localhost:60811/' = config.url

http_tests/admin_userpermission_change_http_test.py:64: AssertionError
___________________ test_admin_userpermission_change_ogowner ___________________

setup_user_data = {'user1': {'auth_user_id': 71, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjcxLCJsb2dpbl90aW1lIjoxNjE4MjQ5...NjcyLCJzYWx0IjoiZTg1MWRjOTMtNzM5My00M2Q5LWFkNzYtZTU4MTQ4M2I3OWVhIn0.uN5nv1A7ocF6JwT8aTkREPvDOpl2Gsjdv-ljf1I6Amc'}, ...}

    def test_admin_userpermission_change_ogowner(setup_user_data):
        users = setup_user_data
    
        # Global User 1 changes Member User 2 into Global owner
        requests.post(config.url + 'admin/userpermission/change/v1', json={
            'token': users['user1']['token'],
            'u_id': users['user2']['auth_user_id'],
            'permission_id': 1,
        }).json()
    
        # Global User 2 changes Member User 1 into member
        requests.post(config.url + 'admin/userpermission/change/v1', json={
            'token': users['user2']['token'],
            'u_id': users['user1']['auth_user_id'],
            'permission_id': 2,
        }).json()
    
        # Global User 2 changes itself into member
>       assert requests.post(config.url + 'admin/userpermission/change/v1', json={
            'token': users['user2']['token'],
            'u_id': users['user2']['auth_user_id'],
            'permission_id': 2,
        }).status_code == 400
E       AssertionError: assert 200 == 400
E        +  where 200 = <Response [200]>.status_code
E        +    where <Response [200]> = <function post at 0x7fc5b7c38488>(('http://localhost:60811/' + 'admin/userpermission/change/v1'), json={'permission_id': 2, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjcyLCJsb2dpbl90aW1lIjoxNjE4MjQ5NjcyLCJzYWx0IjoiM2VkNzk3NmMtMmE0OS00ZDkzLThkNmItZDAwMWI1OWM5OWY5In0.1jUf-Syr6YwNRoFrBmfx7w5IQF0iqGtItvftTGLJerA', 'u_id': 72})
E        +      where <function post at 0x7fc5b7c38488> = requests.post
E        +      and   'http://localhost:60811/' = config.url

http_tests/admin_userpermission_change_http_test.py:162: AssertionError
_________________________ test_auth_login_api_invalid __________________________

    def test_auth_login_api_invalid():
    	# register
    	response_register = requests.post(config.url + 'auth/register/v2', json={'email':'exampleUserEmail@email.com', 'password':'ExamplePassword', 'name_first':'FIRSTNAME', 'name_last':'LASTNAME'})
    	json_data_register = json.loads(response_register.text)
    	assert json_data_register['token']
    
    	# if credentials don't match, handled by customized exception handler
    	response_login = requests.post(config.url + 'auth/login/v2', json={'email':'exampleUserEmail@email.com', 'password':'wrongpassword'})
>   	json_data_login = json.loads(response_login.text)

http_tests/auth_http_test.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.7/json/__init__.py:348: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.7/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7fc5b9900128>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>400 Bad Request</title>\n<h1>Bad Request</h1>\n<p>Email or password is incorrect</p>\n'
idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.7/json/decoder.py:355: JSONDecodeError
_____________________ test_channel_join_owner_input_error ______________________

setup_user_data = {'user1': {'auth_user_id': 98, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjk4LCJsb2dpbl90aW1lIjoxNjE4MjQ5...TY3Miwic2FsdCI6IjA3YmJmMmQ2LTRiOWQtNGQyMi1iZDE2LTVlYmY3YTRlODg1YiJ9.iIhMwMj1loSMBYvjfd2rCCXyT3bEveKQDhninKQRI-c'}, ...}

    def test_channel_join_owner_input_error(setup_user_data):
        users = setup_user_data
    
        # Creating a public channel
        channel_id = requests.post(config.url + 'channels/create/v2', json={
            'token': users['user1']['token'],
            'name': 'Public',
            'is_public': True,
        }).json()
    
        # Join user2
        requests.post(config.url + 'channel/join/v2', json={
            'token': users['user2']['token'],
            'channel_id': channel_id['channel_id'],
        }).json()
    
        # Add user2 to onwer pool
        requests.post(config.url + 'channel/addowner/v1', json={
            'token': users['user1']['token'],
            'channel_id': channel_id['channel_id'],
            'u_id': users['user2']['auth_user_id'],
        }).json()
    
        # Get details
        channel_details = requests.get(config.url + 'channel/details/v2', params={
            'token': users['user1']['token'],
            'channel_id': channel_id['channel_id'],
        }).json()
    
>       assert channel_details == {
            'name': 'Public',
            'owner_members': [
                {
                    'u_id': users['user1']['auth_user_id'],
                    'name_first': 'user1_first',
                    'name_last': 'user1_last',
                },
                {
                    'u_id': users['user2']['auth_user_id'],
                    'name_first': 'user2_first',
                    'name_last': 'user2_last',
                }
            ],
            'all_members': [
                {
                    'u_id': users['user1']['auth_user_id'],
                    'name_first': 'user1_first',
                    'name_last': 'user1_last',
                },
                {
                    'u_id': users['user2']['auth_user_id'],
                    'name_first': 'user2_first',
                    'name_last': 'user2_last',
                }
            ],
        }
E       AssertionError: assert {'all_members..._last', ...}]} == {'all_members... 'u_id': 99}]}
E         Omitting 1 identical items, use -vv to show
E         Differing items:
E         {'all_members': [{'email': 'user1@email.com', 'handle_str': 'user1_firstuser1_las', 'name_first': 'user1_first', 'name...'user2@email.com', 'handle_str': 'user2_firstuser2_las', 'name_first': 'user2_first', 'name_last': 'user2_last', ...}]} != {'all_members': [{'name_first': 'user1_first', 'name_last': 'user1_last', 'u_id': 98}, {'name_first': 'user2_first', 'name_last': 'user2_last', 'u_id': 99}]}
E         {'owner_members': [{'email': 'user1@email.com', 'handle_str': 'user1_firstuser1_las', 'name_first': 'user1_first', '...
E         
E         ...Full output truncated (4 lines hidden), use '-vv' to show

http_tests/channel_addowner_v1_http_test.py:109: AssertionError
_____________________________ test_addowner_dreams _____________________________

setup_user_data = {'user1': {'auth_user_id': 104, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjEwNCwibG9naW5fdGltZSI6MTYxODI...TY3Miwic2FsdCI6IjU4YzliNmMyLTljNDktNDMwMy1hYzFhLTA4ZWYzMTg5OWI4NiJ9.3FRoZ9jUDTzqsO3joeh_dgJaWlgvquDMgB0HPWNgdAc'}, ...}

    def test_addowner_dreams(setup_user_data):
        users = setup_user_data
    
        # Creating a public channel
        channel_id = requests.post(config.url + 'channels/create/v2', json={
            'token': users['user2']['token'],
            'name': 'Public',
            'is_public': True,
        }).json()
    
        # Join user3
        requests.post(config.url + 'channel/join/v2', json={
            'token': users['user3']['token'],
            'channel_id': channel_id['channel_id'],
        }).json()
    
        # Add user2 to onwer pool as dreams owner
        requests.post(config.url + 'channel/addowner/v1', json={
            'token': users['user1']['token'],
            'channel_id': channel_id['channel_id'],
            'u_id': users['user3']['auth_user_id'],
        }).json()
    
        # Get details
        channel_details = requests.get(config.url + 'channel/details/v2', params={
            'token': users['user2']['token'],
            'channel_id': channel_id['channel_id'],
        }).json()
    
>       assert channel_details == {
            'name': 'Public',
            'owner_members': [
                {
                    'u_id': users['user2']['auth_user_id'],
                    'name_first': 'user2_first',
                    'name_last': 'user2_last',
                },
                {
                    'u_id': users['user3']['auth_user_id'],
                    'name_first': 'user3_first',
                    'name_last': 'user3_last',
                }
            ],
            'all_members': [
                {
                    'u_id': users['user2']['auth_user_id'],
                    'name_first': 'user2_first',
                    'name_last': 'user2_last',
                },
                {
                    'u_id': users['user3']['auth_user_id'],
                    'name_first': 'user3_first',
                    'name_last': 'user3_last',
                }
            ],
        }
E       AssertionError: assert {'all_members..._last', ...}]} == {'all_members...'u_id': 106}]}
E         Omitting 1 identical items, use -vv to show
E         Differing items:
E         {'all_members': [{'email': 'user2@email.com', 'handle_str': 'user2_firstuser2_las', 'name_first': 'user2_first', 'name...user30@email.com', 'handle_str': 'user3_firstuser3_las', 'name_first': 'user3_first', 'name_last': 'user3_last', ...}]} != {'all_members': [{'name_first': 'user2_first', 'name_last': 'user2_last', 'u_id': 105}, {'name_first': 'user3_first', 'name_last': 'user3_last', 'u_id': 106}]}
E         {'owner_members': [{'email': 'user2@email.com', 'handle_str': 'user2_firstuser2_las', 'name_first': 'user2_first',...
E         
E         ...Full output truncated (4 lines hidden), use '-vv' to show

http_tests/channel_addowner_v1_http_test.py:168: AssertionError
________________________________ test_function _________________________________

    def test_function():
        requests.delete(f"{url}clear/v1")
    
        a_u_id0 = requests.post(f"{url}auth/register/v2", json=user_body(0))
        user0 = a_u_id0.json()
    
        a_u_id1 = requests.post(f"{url}auth/register/v2", json=user_body(1))
        user1 = a_u_id1.json()
    
        ch_id0 = requests.post(f"{url}channels/create/v2", json=channel_create_body(user0, 0, True))
        channel0 = ch_id0.json()
    
        requests.post(f"{url}channel/invite/v2", json=channel_invite_body(user0, channel0, user1))
    
        payload = requests.get(f"{url}channel/details/v2", params=channel_details_body(user0, channel0))
        channel_details = payload.json()
    
>       assert channel_details == {
            'name': 'channel0',
            'owner_members': [
                {
                    'u_id': user0['auth_user_id'],
                    'name_first': 'first_name0',
                    'name_last': 'last_name0',
                }
            ],
            'all_members': [
                {
                    'u_id': user0['auth_user_id'],
                    'name_first': 'first_name0',
                    'name_last': 'last_name0',
                },
                {
                    'u_id': user1['auth_user_id'],
                    'name_first': 'first_name1',
                    'name_last': 'last_name1',
                }
            ],
        }
E       AssertionError: assert {'all_members...name0', ...}]} == {'all_members...'u_id': 110}]}
E         Omitting 1 identical items, use -vv to show
E         Differing items:
E         {'all_members': [{'email': 'example1@hotmail.com', 'handle_str': 'first_name1last_name', 'name_first': 'first_name1', ...ple0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_name0', 'name_last': 'last_name0', ...}]} != {'all_members': [{'name_first': 'first_name0', 'name_last': 'last_name0', 'u_id': 110}, {'name_first': 'first_name1', 'name_last': 'last_name1', 'u_id': 111}]}
E         {'owner_members': [{'email': 'example0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_na...
E         
E         ...Full output truncated (4 lines hidden), use '-vv' to show

http_tests/channel_details_v2_http_test.py:59: AssertionError
________________________________ test_multiple _________________________________

    def test_multiple():
        requests.delete(f"{url}clear/v1")
    
        users = []
        for i in range(10):
            a_u_id = requests.post(f"{url}auth/register/v2", json=user_body(i))
            users.append(a_u_id.json())
    
        ch_id0 = requests.post(f"{url}channels/create/v2", json=channel_create_body(users[0], 0, True))
        channel0 = ch_id0.json()
    
        for i in range(1,10):
            requests.post(f"{url}channel/invite/v2", json=channel_invite_body(users[0], channel0, users[i]))
    
        payload = requests.get(f"{url}channel/details/v2", params=channel_details_body(users[0], channel0))
        channel_details = payload.json()
    
>       assert channel_details == {
            'name': 'channel0',
            'owner_members': [
                {
                    'u_id': users[0]['auth_user_id'],
                    'name_first': 'first_name0',
                    'name_last': 'last_name0',
                }
            ],
            'all_members': [
                {
                    'u_id': users[0]['auth_user_id'],
                    'name_first': 'first_name0',
                    'name_last': 'last_name0',
                },
                {
                    'u_id': users[1]['auth_user_id'],
                    'name_first': 'first_name1',
                    'name_last': 'last_name1',
                },
                {
                    'u_id': users[2]['auth_user_id'],
                    'name_first': 'first_name2',
                    'name_last': 'last_name2',
                },
                {
                    'u_id': users[3]['auth_user_id'],
                    'name_first': 'first_name3',
                    'name_last': 'last_name3',
                },
                {
                    'u_id': users[4]['auth_user_id'],
                    'name_first': 'first_name4',
                    'name_last': 'last_name4',
                },
                {
                    'u_id': users[5]['auth_user_id'],
                    'name_first': 'first_name5',
                    'name_last': 'last_name5',
                },
                {
                    'u_id': users[6]['auth_user_id'],
                    'name_first': 'first_name6',
                    'name_last': 'last_name6',
                },
                {
                    'u_id': users[7]['auth_user_id'],
                    'name_first': 'first_name7',
                    'name_last': 'last_name7',
                },
                {
                    'u_id': users[8]['auth_user_id'],
                    'name_first': 'first_name8',
                    'name_last': 'last_name8',
                },
                {
                    'u_id': users[9]['auth_user_id'],
                    'name_first': 'first_name9',
                    'name_last': 'last_name9',
                }
            ],
        }
E       AssertionError: assert {'all_members...name0', ...}]} == {'all_members...'u_id': 113}]}
E         Omitting 1 identical items, use -vv to show
E         Differing items:
E         {'all_members': [{'email': 'example8@hotmail.com', 'handle_str': 'first_name8last_name', 'name_first': 'first_name8', ...hotmail.com', 'handle_str': 'first_name7last_name', 'name_first': 'first_name7', 'name_last': 'last_name7', ...}, ...]} != {'all_members': [{'name_first': 'first_name0', 'name_last': 'last_name0', 'u_id': 113}, {'name_first': 'first_name1', ..., 'name_last': 'last_name4', 'u_id': 117}, {'name_first': 'first_name5', 'name_last': 'last_name5', 'u_id': 118}, ...]}
E         {'owner_members': [{'email': 'exa...
E         
E         ...Full output truncated (4 lines hidden), use '-vv' to show

http_tests/channel_details_v2_http_test.py:99: AssertionError
____________________________ test_multiple_channels ____________________________

    def test_multiple_channels():
        requests.delete(f"{url}clear/v1")
    
        users = []
        for i in range(10):
            a_u_id = requests.post(f"{url}auth/register/v2", json=user_body(i))
            users.append(a_u_id.json())
    
        ch_id0 = requests.post(f"{url}channels/create/v2", json=channel_create_body(users[0], 0, True))
        channel0 = ch_id0.json()
    
        ch_id1 = requests.post(f"{url}channels/create/v2", json=channel_create_body(users[5], 1, True))
        channel1 = ch_id1.json()
    
        for i in range(1,5):
            requests.post(f"{url}channel/invite/v2", json=channel_invite_body(users[0], channel0, users[i]))
    
        for i in range(6,10):
            requests.post(f"{url}channel/invite/v2", json=channel_invite_body(users[5], channel1, users[i]))
    
        payload0 = requests.get(f"{url}channel/details/v2", params=channel_details_body(users[2], channel0))
        channel_details0 = payload0.json()
    
>       assert channel_details0 == {
            'name': 'channel0',
            'owner_members': [
                {
                    'u_id': users[0]['auth_user_id'],
                    'name_first': 'first_name0',
                    'name_last': 'last_name0',
                }
            ],
            'all_members': [
                {
                    'u_id': users[0]['auth_user_id'],
                    'name_first': 'first_name0',
                    'name_last': 'last_name0',
                },
                {
                    'u_id': users[1]['auth_user_id'],
                    'name_first': 'first_name1',
                    'name_last': 'last_name1',
                },
                {
                    'u_id': users[2]['auth_user_id'],
                    'name_first': 'first_name2',
                    'name_last': 'last_name2',
                },
                {
                    'u_id': users[3]['auth_user_id'],
                    'name_first': 'first_name3',
                    'name_last': 'last_name3',
                },
                {
                    'u_id': users[4]['auth_user_id'],
                    'name_first': 'first_name4',
                    'name_last': 'last_name4',
                },
            ],
        }
E       AssertionError: assert {'all_members...name0', ...}]} == {'all_members...'u_id': 124}]}
E         Omitting 1 identical items, use -vv to show
E         Differing items:
E         {'all_members': [{'email': 'example1@hotmail.com', 'handle_str': 'first_name1last_name', 'name_first': 'first_name1', ...ple2@hotmail.com', 'handle_str': 'first_name2last_name', 'name_first': 'first_name2', 'name_last': 'last_name2', ...}]} != {'all_members': [{'name_first': 'first_name0', 'name_last': 'last_name0', 'u_id': 124}, {'name_first': 'first_name1', ...ame3', 'name_last': 'last_name3', 'u_id': 127}, {'name_first': 'first_name4', 'name_last': 'last_name4', 'u_id': 128}]}
E         {'owner_members': [{'email': 'exa...
E         
E         ...Full output truncated (4 lines hidden), use '-vv' to show

http_tests/channel_details_v2_http_test.py:185: AssertionError
___________________________ test_invalid_channel_id ____________________________

    def test_invalid_channel_id():
        requests.delete(f"{url}clear/v1")
    
        a_u_id0 = requests.post(f"{url}auth/register/v2", json=user_body(0))
        user0 = a_u_id0.json()
    
        payload = requests.get(f"{url}channel/details/v2", params=channel_details_body(user0, {"channel_id": 126347542124}))
>       channel_details = payload.json()

http_tests/channel_details_v2_http_test.py:271: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7fc5b8138048>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>400 Bad Request</title>\n<h1>Bad Request</h1>\n<p>126347542124 is not a valid ID</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7fc5b92d3c30>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
____________________________ test_unauthorized_user ____________________________

    def test_unauthorized_user():
        requests.delete(f"{url}clear/v1")
    
        a_u_id0 = requests.post(f"{url}auth/register/v2", json=user_body(0))
        user0 = a_u_id0.json()
    
        a_u_id1 = requests.post(f"{url}auth/register/v2", json=user_body(1))
        user1 = a_u_id1.json()
    
        ch_id0 = requests.post(f"{url}channels/create/v2", json=channel_create_body(user0, 0, True))
        channel0 = ch_id0.json()
    
        payload = requests.get(f"{url}channel/details/v2", params=channel_details_body(user1, channel0))
>       channel_details = payload.json()

http_tests/channel_details_v2_http_test.py:290: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7fc5b8138048>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Only members can view details about this channel</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7fc5b92d3c30>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
______________________________ test_invalid_token ______________________________

    def test_invalid_token():
        requests.delete(f"{url}clear/v1")
    
        a_u_id0 = requests.post(f"{url}auth/register/v2", json=user_body(0))
        user0 = a_u_id0.json()
    
        ch_id0 = requests.post(f"{url}channels/create/v2", json=channel_create_body(user0, 0, True))
        channel0 = ch_id0.json()
    
        payload = requests.get(f"{url}channel/details/v2", params=channel_details_body({"token": 18936087134}, channel0))
>       channel_details = payload.json()

http_tests/channel_details_v2_http_test.py:306: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7fc5b8138048>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Invalid token</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7fc5b92d3c30>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
________________________________ test_function _________________________________

    def test_function():
        requests.delete(f"{url}clear/v1")
    
        a_u_id0 = requests.post(f"{url}auth/register/v2", json=user_body(0))
        user0 = a_u_id0.json()
    
        a_u_id1 = requests.post(f"{url}auth/register/v2", json=user_body(1))
        user1 = a_u_id1.json()
    
        ch_id0 = requests.post(f"{url}channels/create/v2", json=channel_create_body(user0, 0, True))
        channel0 = ch_id0.json()
    
        requests.post(f"{url}channel/invite/v2", json=channel_invite_body(user0, channel0, user1))
    
        payload = requests.get(f"{url}channel/details/v2", params=channel_details_body(user0, channel0))
        channel_details = payload.json()
    
>       assert channel_details == {
            'name': 'channel0',
            'owner_members': [
                {
                    'u_id': user0['auth_user_id'],
                    'name_first': 'first_name0',
                    'name_last': 'last_name0',
                }
            ],
            'all_members': [
                {
                    'u_id': user0['auth_user_id'],
                    'name_first': 'first_name0',
                    'name_last': 'last_name0',
                },
                {
                    'u_id': user1['auth_user_id'],
                    'name_first': 'first_name1',
                    'name_last': 'last_name1',
                }
            ],
        }
E       AssertionError: assert {'all_members...name0', ...}]} == {'all_members...'u_id': 142}]}
E         Omitting 1 identical items, use -vv to show
E         Differing items:
E         {'all_members': [{'email': 'example1@hotmail.com', 'handle_str': 'first_name1last_name', 'name_first': 'first_name1', ...ple0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_name0', 'name_last': 'last_name0', ...}]} != {'all_members': [{'name_first': 'first_name0', 'name_last': 'last_name0', 'u_id': 142}, {'name_first': 'first_name1', 'name_last': 'last_name1', 'u_id': 143}]}
E         {'owner_members': [{'email': 'example0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_na...
E         
E         ...Full output truncated (4 lines hidden), use '-vv' to show

http_tests/channel_invite_v2_http_test.py:59: AssertionError
________________________________ test_multiple _________________________________

    def test_multiple():
        requests.delete(f"{url}clear/v1")
    
        users = []
        for i in range(5):
            a_u_id = requests.post(f"{url}auth/register/v2", json=user_body(i))
            users.append(a_u_id.json())
    
        ch_id0 = requests.post(f"{url}channels/create/v2", json=channel_create_body(users[0], 0, True))
        channel0 = ch_id0.json()
    
        for i in range(1,5):
            requests.post(f"{url}channel/invite/v2", json=channel_invite_body(users[0], channel0, users[i]))
    
        payload = requests.get(f"{url}channel/details/v2", params=channel_details_body(users[0], channel0))
        channel_details = payload.json()
    
>       assert channel_details == {
            'name': 'channel0',
            'owner_members': [
                {
                    'u_id': users[0]['auth_user_id'],
                    'name_first': 'first_name0',
                    'name_last': 'last_name0',
                }
            ],
            'all_members': [
                {
                    'u_id': users[0]['auth_user_id'],
                    'name_first': 'first_name0',
                    'name_last': 'last_name0',
                },
                {
                    'u_id': users[1]['auth_user_id'],
                    'name_first': 'first_name1',
                    'name_last': 'last_name1',
                },
                {
                    'u_id': users[2]['auth_user_id'],
                    'name_first': 'first_name2',
                    'name_last': 'last_name2',
                },
                {
                    'u_id': users[3]['auth_user_id'],
                    'name_first': 'first_name3',
                    'name_last': 'last_name3',
                },
                {
                    'u_id': users[4]['auth_user_id'],
                    'name_first': 'first_name4',
                    'name_last': 'last_name4',
                },
            ],
        }
E       AssertionError: assert {'all_members...name0', ...}]} == {'all_members...'u_id': 145}]}
E         Omitting 1 identical items, use -vv to show
E         Differing items:
E         {'all_members': [{'email': 'example4@hotmail.com', 'handle_str': 'first_name4last_name', 'name_first': 'first_name4', ...ple0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_name0', 'name_last': 'last_name0', ...}]} != {'all_members': [{'name_first': 'first_name0', 'name_last': 'last_name0', 'u_id': 145}, {'name_first': 'first_name1', ...ame3', 'name_last': 'last_name3', 'u_id': 148}, {'name_first': 'first_name4', 'name_last': 'last_name4', 'u_id': 149}]}
E         {'owner_members': [{'email': 'exa...
E         
E         ...Full output truncated (4 lines hidden), use '-vv' to show

http_tests/channel_invite_v2_http_test.py:99: AssertionError
__________________________ test_multiple_users_invite __________________________

    def test_multiple_users_invite():
        requests.delete(f"{url}clear/v1")
    
        users = []
        for i in range(5):
            a_u_id = requests.post(f"{url}auth/register/v2", json=user_body(i))
            users.append(a_u_id.json())
    
        ch_id0 = requests.post(f"{url}channels/create/v2", json=channel_create_body(users[0], 0, True))
        channel0 = ch_id0.json()
    
        for i in range(4):
            requests.post(f"{url}channel/invite/v2", json=channel_invite_body(users[i], channel0, users[i + 1]))
    
        payload = requests.get(f"{url}channel/details/v2", params=channel_details_body(users[0], channel0))
        channel_details = payload.json()
    
>       assert channel_details == {
            'name': 'channel0',
            'owner_members': [
                {
                    'u_id': users[0]['auth_user_id'],
                    'name_first': 'first_name0',
                    'name_last': 'last_name0',
                }
            ],
            'all_members': [
                {
                    'u_id': users[0]['auth_user_id'],
                    'name_first': 'first_name0',
                    'name_last': 'last_name0',
                },
                {
                    'u_id': users[1]['auth_user_id'],
                    'name_first': 'first_name1',
                    'name_last': 'last_name1',
                },
                {
                    'u_id': users[2]['auth_user_id'],
                    'name_first': 'first_name2',
                    'name_last': 'last_name2',
                },
                {
                    'u_id': users[3]['auth_user_id'],
                    'name_first': 'first_name3',
                    'name_last': 'last_name3',
                },
                {
                    'u_id': users[4]['auth_user_id'],
                    'name_first': 'first_name4',
                    'name_last': 'last_name4',
                },
            ],
        }
E       AssertionError: assert {'all_members...name0', ...}]} == {'all_members...'u_id': 151}]}
E         Omitting 1 identical items, use -vv to show
E         Differing items:
E         {'all_members': [{'email': 'example0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_name0', ...ple1@hotmail.com', 'handle_str': 'first_name1last_name', 'name_first': 'first_name1', 'name_last': 'last_name1', ...}]} != {'all_members': [{'name_first': 'first_name0', 'name_last': 'last_name0', 'u_id': 151}, {'name_first': 'first_name1', ...ame3', 'name_last': 'last_name3', 'u_id': 154}, {'name_first': 'first_name4', 'name_last': 'last_name4', 'u_id': 155}]}
E         {'owner_members': [{'email': 'exa...
E         
E         ...Full output truncated (4 lines hidden), use '-vv' to show

http_tests/channel_invite_v2_http_test.py:154: AssertionError
___________________________ test_invalid_channel_id ____________________________

    def test_invalid_channel_id():
        r = requests.delete(f"{url}clear/v1")
    
        a_u_id0 = requests.post(f"{url}auth/register/v2", json=user_body(0))
        user0 = a_u_id0.json()
    
        ch_id0 = requests.post(f"{url}channels/create/v2", json=channel_create_body(user0, 0, True))
        channel0 = ch_id0.json()
    
        r = requests.post(f"{url}channel/invite/v2", json=channel_invite_body(user0, channel0, {"auth_user_id": 1216374684571}))
    
>       assert r.json()["code"] == 400

http_tests/channel_invite_v2_http_test.py:203: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7fc5b8138048>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>400 Bad Request</title>\n<h1>Bad Request</h1>\n<p>1216374684571 is not a valid ID</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7fc5b92d3c30>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
__________________________ test_invalid_invited_user ___________________________

    def test_invalid_invited_user():
        r = requests.delete(f"{url}clear/v1")
    
        a_u_id0 = requests.post(f"{url}auth/register/v2", json=user_body(0))
        user0 = a_u_id0.json()
    
        a_u_id1 = requests.post(f"{url}auth/register/v2", json=user_body(1))
        user1 = a_u_id1.json()
    
        r = requests.post(f"{url}channel/invite/v2", json=channel_invite_body(user0, {"channel_id": 319245780425}, user1))
        print(r)
    
>       assert r.json()["code"] == 400

http_tests/channel_invite_v2_http_test.py:219: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7fc5b8138048>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>400 Bad Request</title>\n<h1>Bad Request</h1>\n<p>319245780425 is not a valid ID</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7fc5b92d3c30>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
----------------------------- Captured stdout call -----------------------------
<Response [400]>
____________________________ test_unauthorized_user ____________________________

    def test_unauthorized_user():
        r = requests.delete(f"{url}clear/v1")
    
        users = []
        for i in range(3):
            a_u_id = requests.post(f"{url}auth/register/v2", json=user_body(i))
            users.append(a_u_id.json())
    
        ch_id0 = requests.post(f"{url}channels/create/v2", json=channel_create_body(users[0], 0, True))
        channel0 = ch_id0.json()
    
        r = requests.post(f"{url}channel/invite/v2", json=channel_invite_body(users[1], channel0, users[2]))
    
>       assert r.json()["code"] == 403

http_tests/channel_invite_v2_http_test.py:236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7fc5b8138048>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Only members can add members</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7fc5b92d3c30>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
______________________________ test_invalid_token ______________________________

    def test_invalid_token():
        r = requests.delete(f"{url}clear/v1")
    
        a_u_id0 = requests.post(f"{url}auth/register/v2", json=user_body(0))
        user0 = a_u_id0.json()
    
        ch_id0 = requests.post(f"{url}channels/create/v2", json=channel_create_body(user0, 0, True))
        channel0 = ch_id0.json()
    
        r = requests.post(f"{url}channel/invite/v2", json=channel_invite_body({"token": 18936087134}, channel0, {"auth_user_id": 1216374684571}))
    
>       assert r.json()["code"] == 403

http_tests/channel_invite_v2_http_test.py:251: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7fc5b8138048>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Invalid token</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7fc5b92d3c30>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
_____________________ test_channel_messages_v2_50_messages _____________________

    def test_channel_messages_v2_50_messages():
        setup = set_up_data()
        user1, user2, channel1 = setup['user1'], setup['user2'], setup['channel1']
    
        # Add 50 messages
        add_x_messages(user1, user2, channel1, 50)
    
        messages_list = requests.get(url + 'channel/messages/v2', params={
            "token": user1["token"],
            "channel_id": channel1,
            "start": 0
        }).json()
    
    
        assert messages_list['start'] == 0, "Start should not change"
    
>       assert messages_list['end'] == -1,\
        "50th message IS the least recent message so it should return 'end': -1"
E       AssertionError: 50th message IS the least recent message so it should return 'end': -1
E       assert 50 == -1

http_tests/channel_messages_v2_http_test.py:217: AssertionError
________________ test_channel_messages_v2_111_messages_start_50 ________________

    def test_channel_messages_v2_111_messages_start_50():
        setup = set_up_data()
        user1, user2, channel1 = setup['user1'], setup['user2'], setup['channel1']
    
        # Add members 1 and 2 into channel 1 and add 111 messages with the message just being the message id
        add_x_messages(user1, user2, channel1, 111)
    
        messages_list = requests.get(url + 'channel/messages/v2', params={
            "token": user1["token"],
            "channel_id": channel1,
            "start": 50
        }).json()
    
        assert messages_list['start'] == 50, "Start should not change"
    
>       assert messages_list['end'] == 100,\
            "111 > start + 50 - function should return 'end': 100"
E       AssertionError: 111 > start + 50 - function should return 'end': 100
E       assert -1 == 100

http_tests/channel_messages_v2_http_test.py:434: AssertionError
_____________________ test_channel_removeowner_owner_error _____________________

setup_user_data = {'user1': {'auth_user_id': 1094, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjEwOTQsImxvZ2luX3RpbWUiOjE2MT...2NzYsInNhbHQiOiI4NWFiMThlYy01MWZiLTRjYjktYTBmYi05ZTI2NDQ2ZGY2MWMifQ.Pnf85lOoSrQKb9ODC496uDzXM9JgP4G7fU6jqeruCrA'}, ...}

    def test_channel_removeowner_owner_error(setup_user_data):
        users = setup_user_data
    
        # Creating a public channel
        channel_id = requests.post(config.url + 'channels/create/v2', json={
            'token': users['user1']['token'],
            'name': 'Public',
            'is_public': True,
        }).json()
    
        # Join user2
        requests.post(config.url + 'channel/join/v2', json={
            'token': users['user2']['token'],
            'channel_id': channel_id['channel_id'],
        }).json()
    
        # Ensure InputError
>       assert requests.post(config.url + 'channel/removeowner/v1', json={
            'token': users['user2']['token'],
            'channel_id': channel_id['channel_id'],
            'u_id': users['user1']['auth_user_id'],
        }).status_code == 400
E       AssertionError: assert 403 == 400
E        +  where 403 = <Response [403]>.status_code
E        +    where <Response [403]> = <function post at 0x7fc5b7c38488>(('http://localhost:60811/' + 'channel/removeowner/v1'), json={'channel_id': 1099, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjEwOTUsImxvZ2luX3RpbWUiOjE2MTgyNDk2NzYsInNhbHQiOiIxMTA5MmQ1OC1hNzMyLTQyMWMtOWU1Zi0wMTg3ZDViZGVmYjgifQ.TkPBJ2-2tp72SkmlDo7_fBzE2pbnYlrib8d0-Ea8aTU', 'u_id': 1094})
E        +      where <function post at 0x7fc5b7c38488> = requests.post
E        +      and   'http://localhost:60811/' = config.url

http_tests/channel_removeowner_v1_http_test.py:42: AssertionError
________________________ test_channel_removeowner_basic ________________________

setup_user_data = {'user1': {'auth_user_id': 1112, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjExMTIsImxvZ2luX3RpbWUiOjE2MT...2NzcsInNhbHQiOiJmZDAyMGU3Ni1hMzJiLTQ4M2MtOTRjOS0xNTgwZTM5OGI3NjYifQ.O1VxMNyTFd_CMCdy1LWJqyjPQiHtwye_ee7IU5wMaOA'}, ...}

    def test_channel_removeowner_basic(setup_user_data):
        users = setup_user_data
    
        # Creating a public channel
        channel_id = requests.post(config.url + 'channels/create/v2', json={
            'token': users['user1']['token'],
            'name': 'Public',
            'is_public': True,
        }).json()
    
        # Join user2
        requests.post(config.url + 'channel/join/v2', json={
            'token': users['user2']['token'],
            'channel_id': channel_id['channel_id'],
        }).json()
    
        # Add user2 to onwer pool
        requests.post(config.url + 'channel/addowner/v1', json={
            'token': users['user1']['token'],
            'channel_id': channel_id['channel_id'],
            'u_id': users['user2']['auth_user_id'],
        }).json()
    
        # Get details
        channel_details = requests.get(config.url + 'channel/details/v2', params={
            'token': users['user1']['token'],
            'channel_id': channel_id['channel_id'],
        }).json()
    
>       assert channel_details == {
            'name': 'Public',
            'owner_members': [
                {
                    'u_id': users['user1']['auth_user_id'],
                    'name_first': 'user1_first',
                    'name_last': 'user1_last',
                },
                {
                    'u_id': users['user2']['auth_user_id'],
                    'name_first': 'user2_first',
                    'name_last': 'user2_last',
                }
            ],
            'all_members': [
                {
                    'u_id': users['user1']['auth_user_id'],
                    'name_first': 'user1_first',
                    'name_last': 'user1_last',
                },
                {
                    'u_id': users['user2']['auth_user_id'],
                    'name_first': 'user2_first',
                    'name_last': 'user2_last',
                }
            ],
        }
E       AssertionError: assert {'all_members..._last', ...}]} == {'all_members...u_id': 1113}]}
E         Omitting 1 identical items, use -vv to show
E         Differing items:
E         {'all_members': [{'email': 'user1@email.com', 'handle_str': 'user1_firstuser1_las', 'name_first': 'user1_first', 'name...'user2@email.com', 'handle_str': 'user2_firstuser2_las', 'name_first': 'user2_first', 'name_last': 'user2_last', ...}]} != {'all_members': [{'name_first': 'user1_first', 'name_last': 'user1_last', 'u_id': 1112}, {'name_first': 'user2_first', 'name_last': 'user2_last', 'u_id': 1113}]}
E         {'owner_members': [{'email': 'user1@email.com', 'handle_str': 'user1_firstuser1_las', 'name_first': 'user1_first...
E         
E         ...Full output truncated (4 lines hidden), use '-vv' to show

http_tests/channel_removeowner_v1_http_test.py:127: AssertionError
___________________________ test_removeowner_dreams ____________________________

setup_user_data = {'user1': {'auth_user_id': 1118, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjExMTgsImxvZ2luX3RpbWUiOjE2MT...2NzcsInNhbHQiOiI5MzVhMjMwOS1jMzY5LTRjMzEtOGQzZS0wODU0ZTdiZDU2MDEifQ.SkA2NtJOudZN6TchBixg_VeSwLC79d6mR92z7lhsouw'}, ...}

    def test_removeowner_dreams(setup_user_data):
        users = setup_user_data
    
        # Creating a public channel as user2
        channel_id = requests.post(config.url + 'channels/create/v2', json={
            'token': users['user2']['token'],
            'name': 'Public',
            'is_public': True,
        }).json()
    
        # Join user3
        requests.post(config.url + 'channel/join/v2', json={
            'token': users['user3']['token'],
            'channel_id': channel_id['channel_id'],
        }).json()
    
        # Add user3 to onwer pool
        requests.post(config.url + 'channel/addowner/v1', json={
            'token': users['user2']['token'],
            'channel_id': channel_id['channel_id'],
            'u_id': users['user3']['auth_user_id'],
        }).json()
    
        # Get details
        channel_details = requests.get(config.url + 'channel/details/v2', params={
            'token': users['user2']['token'],
            'channel_id': channel_id['channel_id'],
        }).json()
    
>       assert channel_details == {
            'name': 'Public',
            'owner_members': [
                {
                    'u_id': users['user2']['auth_user_id'],
                    'name_first': 'user2_first',
                    'name_last': 'user2_last',
                },
                {
                    'u_id': users['user3']['auth_user_id'],
                    'name_first': 'user3_first',
                    'name_last': 'user3_last',
                }
            ],
            'all_members': [
                {
                    'u_id': users['user2']['auth_user_id'],
                    'name_first': 'user2_first',
                    'name_last': 'user2_last',
                },
                {
                    'u_id': users['user3']['auth_user_id'],
                    'name_first': 'user3_first',
                    'name_last': 'user3_last',
                }
            ],
        }
E       AssertionError: assert {'all_members..._last', ...}]} == {'all_members...u_id': 1120}]}
E         Omitting 1 identical items, use -vv to show
E         Differing items:
E         {'all_members': [{'email': 'user30@email.com', 'handle_str': 'user3_firstuser3_las', 'name_first': 'user3_first', 'nam...'user2@email.com', 'handle_str': 'user2_firstuser2_las', 'name_first': 'user2_first', 'name_last': 'user2_last', ...}]} != {'all_members': [{'name_first': 'user2_first', 'name_last': 'user2_last', 'u_id': 1119}, {'name_first': 'user3_first', 'name_last': 'user3_last', 'u_id': 1120}]}
E         {'owner_members': [{'email': 'user30@email.com', 'handle_str': 'user3_firstuser3_las', 'name_first': 'user3_firs...
E         
E         ...Full output truncated (4 lines hidden), use '-vv' to show

http_tests/channel_removeowner_v1_http_test.py:220: AssertionError
_________________________ test_channels_list_multiple __________________________

setup_user_data = {'user1': {'auth_user_id': 1163, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjExNjMsImxvZ2luX3RpbWUiOjE2MT...2NzcsInNhbHQiOiIyZjU5NTUxMi1hMjNmLTRjMDQtYWY2Ni00MjU1M2Y3MTdiMTUifQ.aRzmAiO6Xj_JEA_VL1rq5JcyHjMYYnvcGIzrUupJH_Q'}, ...}

    def test_channels_list_multiple(setup_user_data):
        users = setup_user_data
    
        channel_id3 = requests.post(config.url + 'channels/create/v2', json={
            'token': users['user2']['token'],
            'name': 'Public3',
            'is_public': True,
        }).json()
    
        channel_id4 = requests.post(config.url + 'channels/create/v2', json={
            'token': users['user2']['token'],
            'name': 'Private4',
            'is_public': False,
        }).json()
    
        channel_id5 = requests.post(config.url + 'channels/create/v2', json={
            'token': users['user2']['token'],
            'name': 'Public5',
            'is_public': True,
        }).json()
    
        # ensure channels_list returns correct values
        channel_list = requests.get(config.url + 'channels/list/v2', params={
            'token': users['user2']['token'],
        }).json()
    
        assert channel_list['channels'][0]['channel_id'] == channel_id3['channel_id']
        assert channel_list['channels'][0]['name'] == 'Public3'
    
>       assert channel_list['channels'][1]['channel_id'] == channel_id4['channel_id']
E       assert 1170 == 1169

http_tests/channels_list_v2_http_test.py:86: AssertionError
________________________________ test_function _________________________________

    def test_function():
        requests.delete(f"{url}clear/v1")
    
        a_u_id0 = requests.post(f"{url}auth/register/v2", json=user_body(0))
        user0 = a_u_id0.json()
    
        a_u_id1 = requests.post(f"{url}auth/register/v2", json=user_body(1))
        user1 = a_u_id1.json()
    
        dm_id0 = requests.post(f"{url}dm/create/v1", json=dm_create_body(user0, [user1]))
        dm0 = dm_id0.json()
    
        payload = requests.get(f"{url}dm/details/v1", params=dm_details_body(user0, dm0))
        dm_details = payload.json()
    
>       assert dm_details == {
            'name': 'first_name0last_name, first_name1last_name',
            'members': [
                {
                    'u_id': user0['auth_user_id'],
                    'name_first': 'first_name0',
                    'name_last': 'last_name0',
                },
                {
                    'u_id': user1['auth_user_id'],
                    'name_first': 'first_name1',
                    'name_last': 'last_name1',
                }
            ]
        }
E       AssertionError: assert {'members': [...me1last_name'} == {'members': [...me1last_name'}
E         Omitting 1 identical items, use -vv to show
E         Differing items:
E         {'members': [{'email': 'example1@hotmail.com', 'handle_str': 'first_name1last_name', 'name_first': 'first_name1', 'nam...ple0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_name0', 'name_last': 'last_name0', ...}]} != {'members': [{'name_first': 'first_name0', 'name_last': 'last_name0', 'u_id': 1195}, {'name_first': 'first_name1', 'name_last': 'last_name1', 'u_id': 1196}]}
E         Use -v to get the full diff

http_tests/dm_create_v1_http_test.py:50: AssertionError
________________________________ test_multiple _________________________________

    def test_multiple():
        requests.delete(f"{url}clear/v1")
    
        users = []
        for i in range(5):
            a_u_id = requests.post(f"{url}auth/register/v2", json=user_body(i))
            users.append(a_u_id.json())
    
        dm_id0 = requests.post(f"{url}dm/create/v1", json=dm_create_body(users[0], [users[1], users[2], users[3], users[4]]))
        dm0 = dm_id0.json()
    
        payload = requests.get(f"{url}dm/details/v1", params=dm_details_body(users[0], dm0))
        dm_details = payload.json()
    
>       assert dm_details == {
            'name': 'first_name0last_name, first_name1last_name, first_name2last_name, first_name3last_name, first_name4last_name',
            'members': [
                {
                    'u_id': users[0]['auth_user_id'],
                    'name_first': 'first_name0',
                    'name_last': 'last_name0',
                },
                {
                    'u_id': users[1]['auth_user_id'],
                    'name_first': 'first_name1',
                    'name_last': 'last_name1',
                },
                {
                    'u_id': users[2]['auth_user_id'],
                    'name_first': 'first_name2',
                    'name_last': 'last_name2',
                },
                {
                    'u_id': users[3]['auth_user_id'],
                    'name_first': 'first_name3',
                    'name_last': 'last_name3',
                },
                {
                    'u_id': users[4]['auth_user_id'],
                    'name_first': 'first_name4',
                    'name_last': 'last_name4',
                },
            ]
        }
E       AssertionError: assert {'members': [...me4last_name'} == {'members': [...me4last_name'}
E         Omitting 1 identical items, use -vv to show
E         Differing items:
E         {'members': [{'email': 'example3@hotmail.com', 'handle_str': 'first_name3last_name', 'name_first': 'first_name3', 'nam...ple1@hotmail.com', 'handle_str': 'first_name1last_name', 'name_first': 'first_name1', 'name_last': 'last_name1', ...}]} != {'members': [{'name_first': 'first_name0', 'name_last': 'last_name0', 'u_id': 1198}, {'name_first': 'first_name1', 'na...e3', 'name_last': 'last_name3', 'u_id': 1201}, {'name_first': 'first_name4', 'name_last': 'last_name4', 'u_id': 1202}]}
E         Use -v to get the full diff

http_tests/dm_create_v1_http_test.py:80: AssertionError
______________________________ test_invalid_token ______________________________

    def test_invalid_token():
        requests.delete(f"{url}clear/v1")
    
        a_u_id0 = requests.post(f"{url}auth/register/v2", json=user_body(0))
        user0 = a_u_id0.json()
    
        dm_id0 = requests.post(f"{url}dm/create/v1", json=dm_create_body({"token": 18936087134}, [user0]))
>       dm0 = dm_id0.json()

http_tests/dm_create_v1_http_test.py:118: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7fc5b8138048>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Invalid token</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7fc5b92d3c30>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
______________________________ test_invalid_user _______________________________

    def test_invalid_user():
        requests.delete(f"{url}clear/v1")
    
        a_u_id0 = requests.post(f"{url}auth/register/v2", json=user_body(0))
        user0 = a_u_id0.json()
    
        dm_id0 = requests.post(f"{url}dm/create/v1", json=dm_create_body(user0, [{"auth_user_id": 3295791357}]))
>       dm0 = dm_id0.json()

http_tests/dm_create_v1_http_test.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7fc5b8138048>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>400 Bad Request</title>\n<h1>Bad Request</h1>\n<p>3295791357 is not a valid ID</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7fc5b92d3c30>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
______________________________ test_invalid_dm_id ______________________________

    def test_invalid_dm_id():
        requests.delete(f"{url}clear/v1")
    
        a_u_id0 = requests.post(f"{url}auth/register/v2", json=user_body(0))
        user0 = a_u_id0.json()
    
        payload = requests.get(f"{url}dm/details/v1", params=dm_details_body(user0, {"dm_id": 5031705713}))
>       dm_details = payload.json()

http_tests/dm_details_v1_http_test.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7fc5b8138048>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>400 Bad Request</title>\n<h1>Bad Request</h1>\n<p>5031705713 is not a valid ID</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7fc5b92d3c30>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
______________________________ test_invalid_user _______________________________

    def test_invalid_user():
        requests.delete(f"{url}clear/v1")
    
        users = []
        for i in range(3):
            a_u_id = requests.post(f"{url}auth/register/v2", json=user_body(i))
            users.append(a_u_id.json())
    
        dm_id0 = requests.post(f"{url}dm/create/v1", json=dm_create_body(users[0], [users[1]]))
        dm0 = dm_id0.json()
    
        payload = requests.get(f"{url}dm/details/v1", params=dm_details_body(users[2], dm0))
>       dm_details = payload.json()

http_tests/dm_details_v1_http_test.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7fc5b8138048>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Only members can view details about this channel</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7fc5b92d3c30>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
______________________________ test_invalid_token ______________________________

    def test_invalid_token():
        requests.delete(f"{url}clear/v1")
    
        a_u_id0 = requests.post(f"{url}auth/register/v2", json=user_body(0))
        user0 = a_u_id0.json()
    
        a_u_id1 = requests.post(f"{url}auth/register/v2", json=user_body(1))
        user1 = a_u_id1.json()
    
        dm_id0 = requests.post(f"{url}dm/create/v1", json=dm_create_body(user0, [user1]))
        dm0 = dm_id0.json()
    
        payload = requests.get(f"{url}dm/details/v1", params=dm_details_body({"token": 501730570}, dm0))
>       dm_details = payload.json()

http_tests/dm_details_v1_http_test.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7fc5b8138048>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Invalid token</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7fc5b92d3c30>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
________________________________ test_function _________________________________

    def test_function():
        requests.delete(f"{url}clear/v1")
    
        users = []
        for i in range(3):
            a_u_id = requests.post(f"{url}auth/register/v2", json=user_body(i))
            users.append(a_u_id.json())
    
        dm_id0 = requests.post(f"{url}dm/create/v1", json=dm_create_body(users[0], [users[1]]))
        dm0 = dm_id0.json()
    
        requests.post(f"{url}dm/invite/v1", json=dm_invite_body(users[0], dm0, users[2]))
    
        payload = requests.get(f"{url}dm/details/v1", params=dm_details_body(users[0], dm0))
        dm_details = payload.json()
    
>       assert dm_details == {
            'name': 'first_name0last_name, first_name1last_name',
            'members': [
                {
                    'u_id': users[0]['auth_user_id'],
                    'name_first': 'first_name0',
                    'name_last': 'last_name0',
                },
                {
                    'u_id': users[1]['auth_user_id'],
                    'name_first': 'first_name1',
                    'name_last': 'last_name1',
                },
                {
                    'u_id': users[2]['auth_user_id'],
                    'name_first': 'first_name2',
                    'name_last': 'last_name2',
                },
    
            ]
        }
E       AssertionError: assert {'members': [...me1last_name'} == {'members': [...me1last_name'}
E         Omitting 1 identical items, use -vv to show
E         Differing items:
E         {'members': [{'email': 'example0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_name0', 'nam...ple1@hotmail.com', 'handle_str': 'first_name1last_name', 'name_first': 'first_name1', 'name_last': 'last_name1', ...}]} != {'members': [{'name_first': 'first_name0', 'name_last': 'last_name0', 'u_id': 1214}, {'name_first': 'first_name1', 'name_last': 'last_name1', 'u_id': 1215}, {'name_first': 'first_name2', 'name_last': 'last_name2', 'u_id': 1216}]}
E         Use -v to get the full diff

http_tests/dm_invite_v1_http_test.py:58: AssertionError
________________________________ test_multiple _________________________________

    def test_multiple():
        requests.delete(f"{url}clear/v1")
    
        users = []
        for i in range(5):
            a_u_id = requests.post(f"{url}auth/register/v2", json=user_body(i))
            users.append(a_u_id.json())
    
        dm_id0 = requests.post(f"{url}dm/create/v1", json=dm_create_body(users[0], [users[1]]))
        dm0 = dm_id0.json()
    
        for i in range(3):
            requests.post(f"{url}dm/invite/v1", json=dm_invite_body(users[0], dm0, users[i + 2]))
    
        payload = requests.get(f"{url}dm/details/v1", params=dm_details_body(users[0], dm0))
        dm_details = payload.json()
    
>       assert dm_details == {
            'name': 'first_name0last_name, first_name1last_name',
            'members': [
                {
                    'u_id': users[0]['auth_user_id'],
                    'name_first': 'first_name0',
                    'name_last': 'last_name0',
                },
                {
                    'u_id': users[1]['auth_user_id'],
                    'name_first': 'first_name1',
                    'name_last': 'last_name1',
                },
                {
                    'u_id': users[2]['auth_user_id'],
                    'name_first': 'first_name2',
                    'name_last': 'last_name2',
                },
                {
                    'u_id': users[3]['auth_user_id'],
                    'name_first': 'first_name3',
                    'name_last': 'last_name3',
                },
                {
                    'u_id': users[4]['auth_user_id'],
                    'name_first': 'first_name4',
                    'name_last': 'last_name4',
                },
            ]
        }
E       AssertionError: assert {'members': [...me1last_name'} == {'members': [...me1last_name'}
E         Omitting 1 identical items, use -vv to show
E         Differing items:
E         {'members': [{'email': 'example2@hotmail.com', 'handle_str': 'first_name2last_name', 'name_first': 'first_name2', 'nam...ple4@hotmail.com', 'handle_str': 'first_name4last_name', 'name_first': 'first_name4', 'name_last': 'last_name4', ...}]} != {'members': [{'name_first': 'first_name0', 'name_last': 'last_name0', 'u_id': 1218}, {'name_first': 'first_name1', 'na...e3', 'name_last': 'last_name3', 'u_id': 1221}, {'name_first': 'first_name4', 'name_last': 'last_name4', 'u_id': 1222}]}
E         Use -v to get the full diff

http_tests/dm_invite_v1_http_test.py:97: AssertionError
______________________________ test_invalid_token ______________________________

    def test_invalid_token():
        requests.delete(f"{url}clear/v1")
    
        users = []
        for i in range(3):
            a_u_id = requests.post(f"{url}auth/register/v2", json=user_body(i))
            users.append(a_u_id.json())
    
        dm_id0 = requests.post(f"{url}dm/create/v1", json=dm_create_body(users[0], [users[1]]))
        dm0 = dm_id0.json()
    
        r = requests.post(f"{url}dm/invite/v1", json=dm_invite_body({"token": 3165801385}, dm0, users[2]))
    
>       assert r.json()["code"] == 403

http_tests/dm_invite_v1_http_test.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7fc5b8138048>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Invalid token</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7fc5b92d3c30>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
______________________________ test_invalid_dm_id ______________________________

    def test_invalid_dm_id():
        requests.delete(f"{url}clear/v1")
    
        a_u_id0 = requests.post(f"{url}auth/register/v2", json=user_body(0))
        user0 = a_u_id0.json()
    
        a_u_id1 = requests.post(f"{url}auth/register/v2", json=user_body(1))
        user1 = a_u_id1.json()
    
        r = requests.post(f"{url}dm/invite/v1", json=dm_invite_body(user0, {"dm_id": 427602476}, user1))
    
>       assert r.json()["code"] == 400

http_tests/dm_invite_v1_http_test.py:156: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7fc5b8138048>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>400 Bad Request</title>\n<h1>Bad Request</h1>\n<p>427602476 is not a valid ID</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7fc5b92d3c30>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
______________________________ test_invalid_user _______________________________

    def test_invalid_user():
        requests.delete(f"{url}clear/v1")
    
        a_u_id0 = requests.post(f"{url}auth/register/v2", json=user_body(0))
        user0 = a_u_id0.json()
    
        a_u_id1 = requests.post(f"{url}auth/register/v2", json=user_body(1))
        user1 = a_u_id1.json()
    
        dm_id0 = requests.post(f"{url}dm/create/v1", json=dm_create_body(user0, [user1]))
        dm0 = dm_id0.json()
    
        r = requests.post(f"{url}dm/invite/v1", json=dm_invite_body(user0, dm0, {"auth_user_id": 671836071683}))
    
>       assert r.json()["code"] == 400

http_tests/dm_invite_v1_http_test.py:174: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7fc5b8138048>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>400 Bad Request</title>\n<h1>Bad Request</h1>\n<p>671836071683 is not a valid ID</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7fc5b92d3c30>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
____________________________ test_unauthorised_user ____________________________

    def test_unauthorised_user():
        requests.delete(f"{url}clear/v1")
    
        users = []
        for i in range(4):
            a_u_id = requests.post(f"{url}auth/register/v2", json=user_body(i))
            users.append(a_u_id.json())
    
        dm_id0 = requests.post(f"{url}dm/create/v1", json=dm_create_body(users[0], [users[1]]))
        dm0 = dm_id0.json()
    
        r = requests.post(f"{url}dm/invite/v1", json=dm_invite_body(users[2], dm0, users[3]))
    
>       assert r.json()["code"] == 403

http_tests/dm_invite_v1_http_test.py:191: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7fc5b8138048>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Only members can add members</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7fc5b92d3c30>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
________________________________ test_function _________________________________

    def test_function():
        requests.delete(f"{url}clear/v1")
    
        users = []
        for i in range(3):
            a_u_id = requests.post(f"{url}auth/register/v2", json=user_body(i))
            users.append(a_u_id.json())
    
        dm_id0 = requests.post(f"{url}dm/create/v1", json=dm_create_body(users[0], [users[1], users[2]]))
        dm0 = dm_id0.json()
    
        requests.post(f"{url}dm/leave/v1", json=dm_leave_body(users[1], dm0))
    
        payload = requests.get(f"{url}dm/details/v1", params=dm_details_body(users[0], dm0))
        dm_details = payload.json()
    
>       assert dm_details == {
            'name': 'first_name0last_name, first_name1last_name, first_name2last_name',
            'members': [
                {
                    'u_id': users[0]['auth_user_id'],
                    'name_first': 'first_name0',
                    'name_last': 'last_name0',
                },
                {
                    'u_id': users[2]['auth_user_id'],
                    'name_first': 'first_name2',
                    'name_last': 'last_name2',
                }
            ]
        }
E       AssertionError: assert {'members': [...me2last_name'} == {'members': [...me2last_name'}
E         Omitting 1 identical items, use -vv to show
E         Differing items:
E         {'members': [{'email': 'example2@hotmail.com', 'handle_str': 'first_name2last_name', 'name_first': 'first_name2', 'nam...ple0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_name0', 'name_last': 'last_name0', ...}]} != {'members': [{'name_first': 'first_name0', 'name_last': 'last_name0', 'u_id': 1238}, {'name_first': 'first_name2', 'name_last': 'last_name2', 'u_id': 1240}]}
E         Use -v to get the full diff

http_tests/dm_leave_v1_http_test.py:57: AssertionError
________________________________ test_multiple _________________________________

    def test_multiple():
        requests.delete(f"{url}clear/v1")
    
        users = []
        for i in range(5):
            a_u_id = requests.post(f"{url}auth/register/v2", json=user_body(i))
            users.append(a_u_id.json())
    
        dm_id0 = requests.post(f"{url}dm/create/v1", json=dm_create_body(users[0], [users[1], users[2], users[3], users[4]]))
        dm0 = dm_id0.json()
    
        for i in range(4):
            requests.post(f"{url}dm/leave/v1", json=dm_leave_body(users[i + 1], dm0))
    
        payload = requests.get(f"{url}dm/details/v1", params=dm_details_body(users[0], dm0))
        dm_details = payload.json()
    
>       assert dm_details == {
            'name': 'first_name0last_name, first_name1last_name, first_name2last_name, first_name3last_name, first_name4last_name',
            'members': [
                {
                    'u_id': users[0]['auth_user_id'],
                    'name_first': 'first_name0',
                    'name_last': 'last_name0',
                }
            ]
        }
E       AssertionError: assert {'members': [...me4last_name'} == {'members': [...me4last_name'}
E         Omitting 1 identical items, use -vv to show
E         Differing items:
E         {'members': [{'email': 'example0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_name0', 'name_last': 'last_name0', ...}]} != {'members': [{'name_first': 'first_name0', 'name_last': 'last_name0', 'u_id': 1242}]}
E         Use -v to get the full diff

http_tests/dm_leave_v1_http_test.py:90: AssertionError
______________________________ test_invalid_token ______________________________

    def test_invalid_token():
        requests.delete(f"{url}clear/v1")
    
        a_u_id0 = requests.post(f"{url}auth/register/v2", json=user_body(0))
        user0 = a_u_id0.json()
    
        a_u_id1 = requests.post(f"{url}auth/register/v2", json=user_body(1))
        user1 = a_u_id1.json()
    
        dm_id0 = requests.post(f"{url}dm/create/v1", json=dm_create_body(user0, [user1]))
        dm0 = dm_id0.json()
    
        r = requests.post(f"{url}dm/leave/v1", json=dm_leave_body({"token": 573105791532}, dm0))
>       response = r.json()

http_tests/dm_leave_v1_http_test.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7fc5b8138048>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Invalid token</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7fc5b92d3c30>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
______________________________ test_invalid_dm_id ______________________________

    def test_invalid_dm_id():
        requests.delete(f"{url}clear/v1")
    
        a_u_id0 = requests.post(f"{url}auth/register/v2", json=user_body(0))
        user0 = a_u_id0.json()
    
        r = requests.post(f"{url}dm/leave/v1", json=dm_leave_body(user0, {"dm_id": 53120246942}))
>       response = r.json()

http_tests/dm_leave_v1_http_test.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7fc5b8138048>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>400 Bad Request</title>\n<h1>Bad Request</h1>\n<p>53120246942 is not a valid ID</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7fc5b92d3c30>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
____________________________ test_unauthorised_user ____________________________

    def test_unauthorised_user():
        requests.delete(f"{url}clear/v1")
    
        users = []
        for i in range(3):
            a_u_id = requests.post(f"{url}auth/register/v2", json=user_body(i))
            users.append(a_u_id.json())
    
        dm_id0 = requests.post(f"{url}dm/create/v1", json=dm_create_body(users[0], [users[1]]))
        dm0 = dm_id0.json()
    
        r = requests.post(f"{url}dm/leave/v1", json=dm_leave_body(users[2], dm0))
>       response = r.json()

http_tests/dm_leave_v1_http_test.py:145: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7fc5b8138048>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Not a member of first_name0last_name, first_name1last_name</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7fc5b92d3c30>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
________________________________ test_multiple _________________________________

    def test_multiple():
        requests.delete(f"{url}clear/v1")
    
        users = []
        for i in range(5):
            a_u_id = requests.post(f"{url}auth/register/v2", json=user_body(i))
            users.append(a_u_id.json())
    
        dms = []
        for i in range(4):
            dm_id = requests.post(f"{url}dm/create/v1", json=dm_create_body(users[0], [users[i + 1]]))
            dms.append(dm_id.json())
    
        r = requests.get(f"{url}dm/list/v1", params=dm_list_body(users[0]))
        dm_list = r.json()
    
>       assert dm_list == {
            'dms': [
                {
                    'dm_id': dms[0]['dm_id'],
                    'name': dms[0]['dm_name']
                },
                {
                    'dm_id': dms[1]['dm_id'],
                    'name': dms[1]['dm_name']
                },
                {
                    'dm_id': dms[2]['dm_id'],
                    'name': dms[2]['dm_name']
                },
                {
                    'dm_id': dms[3]['dm_id'],
                    'name': dms[3]['dm_name']
                }
            ]
        }
E       AssertionError: assert {'dms': [{'dm...1last_name'}]} == {'dms': [{'dm...4last_name'}]}
E         Differing items:
E         {'dms': [{'dm_id': 1267, 'name': 'first_name0last_name, first_name4last_name'}, {'dm_id': 1266, 'name': 'first_name0la... 'first_name0last_name, first_name2last_name'}, {'dm_id': 1264, 'name': 'first_name0last_name, first_name1last_name'}]} != {'dms': [{'dm_id': 1264, 'name': 'first_name0last_name, first_name1last_name'}, {'dm_id': 1265, 'name': 'first_name0la... 'first_name0last_name, first_name3last_name'}, {'dm_id': 1267, 'name': 'first_name0last_name, first_name4last_name'}]}
E         Use -v to get the full diff

http_tests/dm_list_v1_http_test.py:74: AssertionError
______________________________ test_invalid_token ______________________________

    def test_invalid_token():
        requests.delete(f"{url}clear/v1")
    
        r = requests.get(f"{url}dm/list/v1", params=dm_list_body({"token": 513875017835}))
>       dm_list = r.json()

http_tests/dm_list_v1_http_test.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7fc5b8138048>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Invalid token</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7fc5b92d3c30>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
_______________________ test_dm_messages_v1_AccessError ________________________

    def test_dm_messages_v1_AccessError():
        setup = set_up_data()
        user0, dm0 = setup['user0'], setup['dm0']
        a_u_id2 = requests.post(f"{url}auth/register/v2", json=user_body(2))
        user2 = a_u_id2.json()
    
        # Add 1 message to dm0
        send_x_message(user0, dm0, 1)
    
        # user2 is not part of dm0 - should raise an access error
        r = requests.get(f"{url}dm/messages/v1", params=dm_messages_body(user2, dm0, 0))
>       dm_messages = r.json()

http_tests/dm_messages_v1_http_test.py:124: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7fc5b8138048>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Only members can view messages</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7fc5b92d3c30>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
__________________ test_dm_messages_v1_InputError_invalid_dm ___________________

    def test_dm_messages_v1_InputError_invalid_dm():
        setup = set_up_data()
        user0, dm0 = setup['user0'], setup['dm0']
    
        # Add 1 message to dm0
        send_x_message(user0, dm0, 1)
    
        # 2 is an invalid dm_id in this case
        r = requests.get(f"{url}dm/messages/v1", params=dm_messages_body(user0, {"dm_id": 2}, 0))
>       dm_messages = r.json()

http_tests/dm_messages_v1_http_test.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7fc5b8138048>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>400 Bad Request</title>\n<h1>Bad Request</h1>\n<p>2 is not a valid ID</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7fc5b92d3c30>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
_________________ test_dm_messages_v1_InputError_invalid_start _________________

    def test_dm_messages_v1_InputError_invalid_start():
        setup = set_up_data()
        user0, dm0 = setup['user0'], setup['dm0']
    
        # Add 1 message to dm1
        send_x_message(user0, dm0, 1)
    
        r = requests.get(f"{url}dm/messages/v1", params=dm_messages_body(user0, dm0, 2))
>       dm_messages = r.json()

http_tests/dm_messages_v1_http_test.py:156: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7fc5b8138048>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>400 Bad Request</title>\n<h1>Bad Request</h1>\n<p>Incorrect pagination start (2 &gt; 1)</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7fc5b92d3c30>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
_______________________ test_dm_messages_v1_50_messages ________________________

    def test_dm_messages_v1_50_messages():
        setup = set_up_data()
        user0, user1, dm0 = setup['user0'], setup['user1'], setup['dm0']
    
        # Add 50 messages
        message_id_list = send_x_messages_two_users(user0, user1, dm0, 50)
    
        r = requests.get(f"{url}dm/messages/v1", params=dm_messages_body(user0, dm0, 0))
        dm_messages = r.json()
    
        assert dm_messages['start'] == 0,\
        "Start should not change"
    
>       assert dm_messages['end'] == -1,\
        "50th message IS the least recent message so it should return 'end': -1"
E       AssertionError: 50th message IS the least recent message so it should return 'end': -1
E       assert 50 == -1

http_tests/dm_messages_v1_http_test.py:215: AssertionError
__________________ test_dm_messages_v1_111_messages_start_50 ___________________

    def test_dm_messages_v1_111_messages_start_50():
        setup = set_up_data()
        user0, user1, dm0 = setup['user0'], setup['user1'], setup['dm0']
    
        # Add members 1 and 2 into dm 1 and add 111 messages with the message just being the message id
        message_id_list = send_x_messages_two_users(user0, user1, dm0, 111)
    
        r = requests.get(f"{url}dm/messages/v1", params=dm_messages_body(user0, dm0, 50))
        dm_messages = r.json()
    
        assert dm_messages['start'] == 50, "Start should not change"
    
>       assert dm_messages['end'] == 100, "111 > start + 50 - function should return 'end': 100"
E       AssertionError: 111 > start + 50 - function should return 'end': 100
E       assert -1 == 100

http_tests/dm_messages_v1_http_test.py:411: AssertionError
________________________________ test_multiple _________________________________

    def test_multiple():
        requests.delete(f"{url}clear/v1")
    
        users = []
        for i in range(5):
            a_u_id = requests.post(f"{url}auth/register/v2", json=user_body(i))
            users.append(a_u_id.json())
    
        dms = []
        for i in range(4):
            dm_id = requests.post(f"{url}dm/create/v1", json=dm_create_body(users[0], [users[i + 1]]))
            dms.append(dm_id.json())
    
        r = requests.get(f"{url}dm/list/v1", params=dm_list_body(users[0]))
        dm_list = r.json()
    
>       assert dm_list == {
            'dms': [
                {
                    'dm_id': dms[0]['dm_id'],
                    'name': dms[0]['dm_name']
                },
                {
                    'dm_id': dms[1]['dm_id'],
                    'name': dms[1]['dm_name']
                },
                {
                    'dm_id': dms[2]['dm_id'],
                    'name': dms[2]['dm_name']
                },
                {
                    'dm_id': dms[3]['dm_id'],
                    'name': dms[3]['dm_name']
                }
            ]
        }
E       AssertionError: assert {'dms': [{'dm...4last_name'}]} == {'dms': [{'dm...4last_name'}]}
E         Differing items:
E         {'dms': [{'dm_id': 2146, 'name': 'first_name0last_name, first_name1last_name'}, {'dm_id': 2148, 'name': 'first_name0la... 'first_name0last_name, first_name2last_name'}, {'dm_id': 2149, 'name': 'first_name0last_name, first_name4last_name'}]} != {'dms': [{'dm_id': 2146, 'name': 'first_name0last_name, first_name1last_name'}, {'dm_id': 2147, 'name': 'first_name0la... 'first_name0last_name, first_name3last_name'}, {'dm_id': 2149, 'name': 'first_name0last_name, first_name4last_name'}]}
E         Use -v to get the full diff

http_tests/dm_remove_v1_http_test.py:87: AssertionError
______________________________ test_invalid_dm_id ______________________________

    def test_invalid_dm_id():
        requests.delete(f"{url}clear/v1")
    
        a_u_id0 = requests.post(f"{url}auth/register/v2", json=user_body(0))
        user0 = a_u_id0.json()
    
        r = requests.delete(f"{url}dm/remove/v1", json=dm_remove_body(user0, {"dm_id": 13601738017}))
>       response = r.json()

http_tests/dm_remove_v1_http_test.py:134: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7fc5b8138048>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>400 Bad Request</title>\n<h1>Bad Request</h1>\n<p>13601738017 is not a valid ID</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7fc5b92d3c30>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
____________________________ test_unauthorized_user ____________________________

    def test_unauthorized_user():
        requests.delete(f"{url}clear/v1")
    
        a_u_id0 = requests.post(f"{url}auth/register/v2", json=user_body(0))
        user0 = a_u_id0.json()
    
        a_u_id1 = requests.post(f"{url}auth/register/v2", json=user_body(1))
        user1 = a_u_id1.json()
    
        dm_id0 = requests.post(f"{url}dm/create/v1", json=dm_create_body(user0, [user1]))
        dm0 = dm_id0.json()
    
        r = requests.delete(f"{url}dm/remove/v1", json=dm_remove_body(user1, dm0))
>       response = r.json()

http_tests/dm_remove_v1_http_test.py:153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7fc5b8138048>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>You don\'t have permission to remove this DM</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7fc5b92d3c30>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
______________________________ test_invalid_token ______________________________

    def test_invalid_token():
        requests.delete(f"{url}clear/v1")
    
        a_u_id0 = requests.post(f"{url}auth/register/v2", json=user_body(0))
        user0 = a_u_id0.json()
    
        a_u_id1 = requests.post(f"{url}auth/register/v2", json=user_body(1))
        user1 = a_u_id1.json()
    
        dm_id0 = requests.post(f"{url}dm/create/v1", json=dm_create_body(user0, [user1]))
        dm0 = dm_id0.json()
    
        r = requests.delete(f"{url}dm/remove/v1", json=dm_remove_body({"token": 521580128575}, dm0))
>       response = r.json()

http_tests/dm_remove_v1_http_test.py:172: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7fc5b8138048>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Invalid token</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7fc5b92d3c30>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
______________________ test_http_message_edit_v2_edit_one ______________________

    def test_http_message_edit_v2_edit_one():
        setup = set_up_data()
        user1, user2, channel1 = setup['user1'], setup['user2'], setup['channel1']
    
        # Send 3 messages and edit the very first message sent
        send_x_messages(user2, channel1, 3)
    
        channel_messages = requests.get(f"{url}channel/messages/v2", params= {
            "token": user2["token"],
            "channel_id": channel1,
            "start": 0
        }).json()
    
        m_id = channel_messages["messages"][2]["message_id"]
    
        messages_info = channel_messages["messages"][2]
    
        requests.put(f"{url}message/edit/v2", json={
            "token": user2["token"],
            "message_id": m_id,
            "message": "Hi"
        }).json()
    
        m_dict0 = {
            'message_id': messages_info['message_id'],
            'u_id': messages_info['u_id'],
            'message': 'Hi',
            'time_created': messages_info['time_created'],
        }
        m_dict1 = channel_messages["messages"][1]
        m_dict2 = channel_messages["messages"][0]
    
        answer = {
            'messages': [m_dict2, m_dict1, m_dict0],
            'start': 0,
            'end': -1
        }
    
        channel_messages_answer = requests.get(f"{url}channel/messages/v2", params= {
            "token": user1["token"],
            "channel_id": channel1,
            "start": 0
        }).json()
    
>       assert channel_messages_answer == answer
E       AssertionError: assert {'end': -1, '...], 'start': 0} == {'end': -1, '...], 'start': 0}
E         Omitting 2 identical items, use -vv to show
E         Differing items:
E         {'messages': [{'is_pinned': False, 'message': '3', 'message_id': 2183, 'reacts': [{'is_this_user_reacted': False, 'rea...e, 'message': 'Hi', 'message_id': 2181, 'reacts': [{'is_this_user_reacted': False, 'react_id': 1, 'u_ids': []}], ...}]} != {'messages': [{'is_pinned': False, 'message': '3', 'message_id': 2183, 'reacts': [{'is_this_user_reacted': False, 'rea..., 'react_id': 1, 'u_ids': []}], ...}, {'message': 'Hi', 'message_id': 2181, 'time_created': 1618249682, 'u_id': 2178}]}
E         Use -v to get the full diff

http_tests/message_edit_v2_http_test.py:237: AssertionError
___________________ test_http_message_edit_v2_edit_multiple ____________________

    def test_http_message_edit_v2_edit_multiple():
        setup = set_up_data()
        user2, channel1 = setup['user2'], setup['channel1']
    
        # Send 5 messages and edit messages with index 0, 2, 3
        send_x_messages(user2, channel1, 5)
    
        channel_msgs = requests.get(f"{url}channel/messages/v2", params= {
            "token": user2["token"],
            "channel_id": channel1,
            "start": 0
        }).json()
    
        m_id0 = channel_msgs["messages"][4]
        m_id2 = channel_msgs["messages"][2]
        m_id3 = channel_msgs["messages"][1]
    
        requests.put(f"{url}message/edit/v2", json={
            "token": user2["token"],
            "message_id": m_id0["message_id"],
            "message": "Hi"
        }).json()
    
        requests.put(f"{url}message/edit/v2", json={
            "token": user2["token"],
            "message_id": m_id2["message_id"],
            "message": "Hello"
        }).json()
    
        requests.put(f"{url}message/edit/v2", json={
            "token": user2["token"],
            "message_id": m_id3["message_id"],
            "message": "Hey"
        }).json()
    
        m_dict0 = {
            'message_id': m_id0['message_id'],
            'u_id': m_id0['u_id'],
            'message': 'Hi',
            'time_created': m_id0['time_created'],
        }
        m_dict2 = {
            'message_id': m_id2['message_id'],
            'u_id': m_id2['u_id'],
            'message': 'Hello',
            'time_created': m_id2['time_created'],
        }
        m_dict3 = {
            'message_id': m_id3['message_id'],
            'u_id': m_id3['u_id'],
            'message': 'Hey',
            'time_created': m_id3['time_created'],
        }
    
        m_dict1 = channel_msgs["messages"][3]
        m_dict4 = channel_msgs["messages"][0]
    
        answer = {
            'messages': [m_dict4, m_dict3, m_dict2, m_dict1, m_dict0],
            'start': 0,
            'end': -1
        }
        channel_messages_answer = requests.get(f"{url}channel/messages/v2", params= {
            "token": user2["token"],
            "channel_id": channel1,
            "start": 0
        }).json()
    
>       assert channel_messages_answer == answer
E       AssertionError: assert {'end': -1, '...], 'start': 0} == {'end': -1, '...], 'start': 0}
E         Omitting 2 identical items, use -vv to show
E         Differing items:
E         {'messages': [{'is_pinned': False, 'message': '5', 'message_id': 2192, 'reacts': [{'is_this_user_reacted': False, 'rea...e, 'message': 'Hi', 'message_id': 2188, 'reacts': [{'is_this_user_reacted': False, 'react_id': 1, 'u_ids': []}], ...}]} != {'messages': [{'is_pinned': False, 'message': '5', 'message_id': 2192, 'reacts': [{'is_this_user_reacted': False, 'rea..., 'react_id': 1, 'u_ids': []}], ...}, {'message': 'Hi', 'message_id': 2188, 'time_created': 1618249682, 'u_id': 2185}]}
E         Use -v to get the full diff

http_tests/message_edit_v2_http_test.py:309: AssertionError
_________________ test_http_message_edit_v2_edit_all_messages __________________

    def test_http_message_edit_v2_edit_all_messages():
        setup = set_up_data()
        user2, channel1 = setup['user2'], setup['channel1']
    
        # Send 5 messages and edit messages with index 0, 2, 3
        send_x_messages(user2, channel1, 5)
    
        channel_msgs = requests.get(f"{url}channel/messages/v2", params= {
            "token": user2["token"],
            "channel_id": channel1,
            "start": 0
        }).json()
    
        m_id0 = channel_msgs["messages"][4]
        m_id1 = channel_msgs["messages"][3]
        m_id2 = channel_msgs["messages"][2]
        m_id3 = channel_msgs["messages"][1]
        m_id4 = channel_msgs["messages"][0]
    
        requests.put(f"{url}message/edit/v2", json={
            "token": user2["token"],
            "message_id": m_id0["message_id"],
            "message": "Hi"
        }).json()
    
        requests.put(f"{url}message/edit/v2", json={
            "token": user2["token"],
            "message_id": m_id1["message_id"],
            "message": "Hello"
        }).json()
    
        requests.put(f"{url}message/edit/v2", json={
            "token": user2["token"],
            "message_id": m_id2["message_id"],
            "message": "Hey"
        }).json()
    
        requests.put(f"{url}message/edit/v2", json={
            "token": user2["token"],
            "message_id": m_id3["message_id"],
            "message": "Goodbye"
        }).json()
    
        requests.put(f"{url}message/edit/v2", json={
            "token": user2["token"],
            "message_id": m_id4["message_id"],
            "message": "Bye"
        }).json()
    
    
        m_dict0 = {
            'message_id': m_id0['message_id'],
            'u_id': m_id0['u_id'],
            'message': 'Hi',
            'time_created': m_id0['time_created'],
        }
    
        m_dict1 = {
            'message_id': m_id1['message_id'],
            'u_id': m_id1['u_id'],
            'message': 'Hello',
            'time_created': m_id1['time_created'],
        }
    
        m_dict2 = {
            'message_id': m_id2['message_id'],
            'u_id': m_id2['u_id'],
            'message': 'Hey',
            'time_created': m_id2['time_created'],
        }
    
        m_dict3 = {
            'message_id': m_id3['message_id'],
            'u_id': m_id3['u_id'],
            'message': 'Goodbye',
            'time_created': m_id3['time_created'],
        }
    
        m_dict4 = {
            'message_id': m_id4['message_id'],
            'u_id': m_id4['u_id'],
            'message': 'Bye',
            'time_created': m_id4['time_created'],
        }
    
        answer = {
            'messages': [m_dict4, m_dict3, m_dict2, m_dict1, m_dict0],
            'start': 0,
            'end': -1
        }
    
        channel_messages_answer = requests.get(f"{url}channel/messages/v2", params= {
            "token": user2["token"],
            "channel_id": channel1,
            "start": 0
        }).json()
    
>       assert channel_messages_answer == answer
E       AssertionError: assert {'end': -1, '...], 'start': 0} == {'end': -1, '...], 'start': 0}
E         Omitting 2 identical items, use -vv to show
E         Differing items:
E         {'messages': [{'is_pinned': False, 'message': 'Bye', 'message_id': 2201, 'reacts': [{'is_this_user_reacted': False, 'r...e, 'message': 'Hi', 'message_id': 2197, 'reacts': [{'is_this_user_reacted': False, 'react_id': 1, 'u_ids': []}], ...}]} != {'messages': [{'message': 'Bye', 'message_id': 2201, 'time_created': 1618249682, 'u_id': 2194}, {'message': 'Goodbye',..._created': 1618249682, 'u_id': 2194}, {'message': 'Hi', 'message_id': 2197, 'time_created': 1618249682, 'u_id': 2194}]}
E         Use -v to get the full diff

http_tests/message_edit_v2_http_test.py:410: AssertionError
________________ test_http_message_edit_v2_owner_edits_message _________________

    def test_http_message_edit_v2_owner_edits_message():
        requests.delete(f"{url}clear/v1")
    
        user1 = requests.post(f"{url}auth/register/v2", json = { # Dreams owner
            "email": "bob.builder@email.com",
            "password": "badpassword1",
            "name_first": "Bob",
            "name_last": "Builder"
        }).json()
    
        user2 = requests.post(f"{url}auth/register/v2", json = {
            "email": "shaun.sheep@email.com",
            "password": "password123",
            "name_first": "Shaun",
            "name_last": "Sheep"
        }).json()
    
        user3 = requests.post(f"{url}auth/register/v2", json = {
            "email": "thomas.tankengine@email.com",
            "password": "password123",
            "name_first": "Thomas",
            "name_last": "Tankengine"
        }).json()
    
        # User2 makes channel1 and invites user3
        channel1 = requests.post(f"{url}channels/create/v2", json = {
            "token": user2["token"],
            "name": "Channel1",
            "is_public": True
        }).json()
    
        requests.post(f"{url}channel/invite/v2", json = {
            "token": user2["token"],
            "channel_id": channel1["channel_id"],
            "u_id": user3["auth_user_id"]
        }).json()
    
        requests.post(f"{url}channel/invite/v2", json = {
            "token": user2["token"],
            "channel_id": channel1["channel_id"],
            "u_id": user1["auth_user_id"]
        }).json()
    
        # user3 sends 3 messages and user2 edits the very first message sent
        send_x_messages(user3, channel1["channel_id"], 3)
    
        channel_msgs = requests.get(f"{url}channel/messages/v2", params= {
            "token": user2["token"],
            "channel_id": channel1["channel_id"],
            "start": 0
        }).json()
    
        msg1 = channel_msgs['messages'][1]
    
        requests.put(f"{url}message/edit/v2", json={
            "token": user2["token"],
            "message_id": msg1["message_id"],
            "message": "Bao"
        }).json()
    
        m_dict1 = {
            'message_id': msg1['message_id'],
            'u_id': msg1['u_id'],
            'message': 'Bao',
            'time_created': msg1['time_created'],
        }
        m_dict0 = channel_msgs['messages'][2]
        m_dict2 = channel_msgs['messages'][0]
    
        answer = {
            'messages': [m_dict2, m_dict1, m_dict0],
            'start': 0,
            'end': -1
        }
        channel_messages_answer = requests.get(f"{url}channel/messages/v2", params= {
            "token": user2["token"],
            "channel_id": channel1["channel_id"],
            "start": 0
        }).json()
    
>       assert channel_messages_answer == answer
E       AssertionError: assert {'end': -1, '...], 'start': 0} == {'end': -1, '...], 'start': 0}
E         Omitting 2 identical items, use -vv to show
E         Differing items:
E         {'messages': [{'is_pinned': False, 'message': '3', 'message_id': 2208, 'reacts': [{'is_this_user_reacted': False, 'rea...se, 'message': '1', 'message_id': 2206, 'reacts': [{'is_this_user_reacted': False, 'react_id': 1, 'u_ids': []}], ...}]} != {'messages': [{'is_pinned': False, 'message': '3', 'message_id': 2208, 'reacts': [{'is_this_user_reacted': False, 'rea...se, 'message': '1', 'message_id': 2206, 'reacts': [{'is_this_user_reacted': False, 'react_id': 1, 'u_ids': []}], ...}]}
E         Use -v to get the full diff

http_tests/message_edit_v2_http_test.py:494: AssertionError
_____________ test_http_message_edit_v2_dream_owner_edits_message ______________

    def test_http_message_edit_v2_dream_owner_edits_message():
        requests.delete(f"{url}clear/v1")
    
        user1 = requests.post(f"{url}auth/register/v2", json = { # Dreams owner
            "email": "bob.builder@email.com",
            "password": "badpassword1",
            "name_first": "Bob",
            "name_last": "Builder"
        }).json()
    
        user2 = requests.post(f"{url}auth/register/v2", json = {
            "email": "shaun.sheep@email.com",
            "password": "password123",
            "name_first": "Shaun",
            "name_last": "Sheep"
        }).json()
    
        user3 = requests.post(f"{url}auth/register/v2", json = {
            "email": "thomas.tankengine@email.com",
            "password": "password123",
            "name_first": "Thomas",
            "name_last": "Tankengine"
        }).json()
    
        # User2 makes channel1 and invites user3
        channel1 = requests.post(f"{url}channels/create/v2", json = {
            "token": user2["token"],
            "name": "Channel1",
            "is_public": True
        }).json()
    
        requests.post(f"{url}channel/invite/v2", json = {
            "token": user2["token"],
            "channel_id": channel1["channel_id"],
            "u_id": user3["auth_user_id"]
        }).json()
    
        # user3 sends 3 messages and user1 (dreams owner) who is not in the channel
        # removes the very first message sent
        send_x_messages(user3, channel1["channel_id"], 3)
    
        channel_msgs = requests.get(f"{url}channel/messages/v2", params= {
            "token": user2["token"],
            "channel_id": channel1["channel_id"],
            "start": 0
        }).json()
    
        msg1 = channel_msgs['messages'][1]
    
        requests.put(f"{url}message/edit/v2", json={
            "token": user1["token"],
            "message_id": msg1["message_id"],
            "message": "HELLO!"
        }).json()
    
    
        m_dict1 = {
            'message_id': msg1['message_id'],
            'u_id': msg1['u_id'],
            'message': 'HELLO!',
            'time_created': msg1['time_created'],
        }
        m_dict0 = channel_msgs['messages'][2]
        m_dict2 = channel_msgs['messages'][0]
    
        answer = {
            'messages': [m_dict2, m_dict1, m_dict0],
            'start': 0,
            'end': -1
        }
    
        channel_messages_answer = requests.get(f"{url}channel/messages/v2", params= {
            "token": user2["token"],
            "channel_id": channel1["channel_id"],
            "start": 0
        }).json()
    
>       assert channel_messages_answer == answer
E       AssertionError: assert {'end': -1, '...], 'start': 0} == {'end': -1, '...], 'start': 0}
E         Omitting 2 identical items, use -vv to show
E         Differing items:
E         {'messages': [{'is_pinned': False, 'message': '3', 'message_id': 2215, 'reacts': [{'is_this_user_reacted': False, 'rea...se, 'message': '1', 'message_id': 2213, 'reacts': [{'is_this_user_reacted': False, 'react_id': 1, 'u_ids': []}], ...}]} != {'messages': [{'is_pinned': False, 'message': '3', 'message_id': 2215, 'reacts': [{'is_this_user_reacted': False, 'rea...se, 'message': '1', 'message_id': 2213, 'reacts': [{'is_this_user_reacted': False, 'react_id': 1, 'u_ids': []}], ...}]}
E         Use -v to get the full diff

http_tests/message_edit_v2_http_test.py:576: AssertionError
________ test_http_message_edit_v2_dream_owner_edits_message_in_channel ________

    def test_http_message_edit_v2_dream_owner_edits_message_in_channel():
        requests.delete(f"{url}clear/v1")
    
        user1 = requests.post(f"{url}auth/register/v2", json = { # Dreams owner
            "email": "bob.builder@email.com",
            "password": "badpassword1",
            "name_first": "Bob",
            "name_last": "Builder"
        }).json()
    
        user2 = requests.post(f"{url}auth/register/v2", json = {
            "email": "shaun.sheep@email.com",
            "password": "password123",
            "name_first": "Shaun",
            "name_last": "Sheep"
        }).json()
    
        user3 = requests.post(f"{url}auth/register/v2", json = {
            "email": "thomas.tankengine@email.com",
            "password": "password123",
            "name_first": "Thomas",
            "name_last": "Tankengine"
        }).json()
    
        # User2 makes channel1 and invites user3 and user1
        channel1 = requests.post(f"{url}channels/create/v2", json = {
            "token": user2["token"],
            "name": "Channel1",
            "is_public": True
        }).json()
    
        requests.post(f"{url}channel/invite/v2", json = {
            "token": user2["token"],
            "channel_id": channel1["channel_id"],
            "u_id": user3["auth_user_id"]
        }).json()
    
        requests.post(f"{url}channel/invite/v2", json = {
            "token": user2["token"],
            "channel_id": channel1["channel_id"],
            "u_id": user1["auth_user_id"]
        }).json()
    
    
        # user3 sends 3 messages and user1 (dreams owner) who is in the channel
        # edits the second message sent (which they did not send)
        send_x_messages(user3, channel1["channel_id"], 3)
    
        channel_msgs = requests.get(f"{url}channel/messages/v2", params= {
            "token": user2["token"],
            "channel_id": channel1["channel_id"],
            "start": 0
        }).json()
    
        msg1 = channel_msgs['messages'][1]
    
        requests.put(f"{url}message/edit/v2", json={
            "token": user1["token"],
            "message_id": msg1["message_id"],
            "message": "Testing?"
        }).json()
    
    
        m_dict1 = {
            'message_id': msg1['message_id'],
            'u_id': msg1['u_id'],
            'message': 'Testing?',
            'time_created': msg1['time_created'],
        }
        m_dict0 = channel_msgs['messages'][2]
        m_dict2 = channel_msgs['messages'][0]
    
        answer = {
            'messages': [m_dict2, m_dict1, m_dict0],
            'start': 0,
            'end': -1
        }
    
        channel_messages_answer = requests.get(f"{url}channel/messages/v2", params= {
            "token": user2["token"],
            "channel_id": channel1["channel_id"],
            "start": 0
        }).json()
    
>       assert channel_messages_answer == answer
E       AssertionError: assert {'end': -1, '...], 'start': 0} == {'end': -1, '...], 'start': 0}
E         Omitting 2 identical items, use -vv to show
E         Differing items:
E         {'messages': [{'is_pinned': False, 'message': '3', 'message_id': 2222, 'reacts': [{'is_this_user_reacted': False, 'rea...se, 'message': '1', 'message_id': 2220, 'reacts': [{'is_this_user_reacted': False, 'react_id': 1, 'u_ids': []}], ...}]} != {'messages': [{'is_pinned': False, 'message': '3', 'message_id': 2222, 'reacts': [{'is_this_user_reacted': False, 'rea...se, 'message': '1', 'message_id': 2220, 'reacts': [{'is_this_user_reacted': False, 'react_id': 1, 'u_ids': []}], ...}]}
E         Use -v to get the full diff

http_tests/message_edit_v2_http_test.py:665: AssertionError
_____________________ test_message_edit_v2_edit_msg_in_dm ______________________

    def test_message_edit_v2_edit_msg_in_dm():
        setup = set_up_data()
        user1, dm1 = setup['user1'], setup['dm1']
    
        message_count = 0
        while message_count < 5:
            message_num = message_count + 1
            requests.post(f"{url}message/senddm/v1", json= {
                "token": user1["token"],
                "dm_id": dm1,
                "message": str(message_num)
            }).json()
            message_count += 1
    
        dm_msgs = requests.get(f"{url}dm/messages/v1", params= {
            "token": user1["token"],
            "dm_id": dm1,
            "start": 0
        }).json()
    
        msg0 = dm_msgs['messages'][4]
        msg2 = dm_msgs['messages'][2]
        msg3 = dm_msgs['messages'][1]
    
        requests.put(f"{url}message/edit/v2", json={
            "token": user1["token"],
            "message_id": msg0["message_id"],
            "message": "Hey"
        }).json()
    
        requests.put(f"{url}message/edit/v2", json={
            "token": user1["token"],
            "message_id": msg2["message_id"],
            "message": ""
        }).json()
    
        requests.put(f"{url}message/edit/v2", json={
            "token": user1["token"],
            "message_id": msg3["message_id"],
            "message": "Hello"
        }).json()
    
        m_dict1 = dm_msgs['messages'][3]
        m_dict4 = dm_msgs['messages'][0]
    
        m_dict0 = {
            'message_id': msg0['message_id'],
            'u_id': msg0['u_id'],
            'message': 'Hey',
            'time_created': msg0['time_created'],
        }
        m_dict3 = {
            'message_id': msg3['message_id'],
            'u_id': msg3['u_id'],
            'message': 'Hello',
            'time_created': msg3['time_created'],
        }
    
        answer = {
            'messages': [m_dict4, m_dict3, m_dict1, m_dict0],
            'start': 0,
            'end': -1
        }
    
    
        dm_messages_answer = requests.get(f"{url}dm/messages/v1", params= {
            "token": user1["token"],
            "dm_id": dm1,
            "start": 0
        }).json()
    
>       assert dm_messages_answer == answer
E       AssertionError: assert {'end': -1, '...], 'start': 0} == {'end': -1, '...], 'start': 0}
E         Omitting 2 identical items, use -vv to show
E         Differing items:
E         {'messages': [{'is_pinned': False, 'message': '5', 'message_id': 2247, 'reacts': [{'is_this_user_reacted': False, 'rea..., 'message': 'Hey', 'message_id': 2243, 'reacts': [{'is_this_user_reacted': False, 'react_id': 1, 'u_ids': []}], ...}]} != {'messages': [{'is_pinned': False, 'message': '5', 'message_id': 2247, 'reacts': [{'is_this_user_reacted': False, 'rea... 'react_id': 1, 'u_ids': []}], ...}, {'message': 'Hey', 'message_id': 2243, 'time_created': 1618249682, 'u_id': 2239}]}
E         Use -v to get the full diff

http_tests/message_edit_v2_http_test.py:837: AssertionError
______________________ test_channels_create_access_error _______________________

setup_user_data = {'user1': {'auth_user_id': 2474, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI0NzQsImxvZ2luX3RpbWUiOjE2MT...2ODQsInNhbHQiOiJiN2VjZjhiOS00M2IyLTQxYTgtOTIwOC0xMjk4MjIzZWE4NmUifQ.9WE_dikMW55a8wM2fMFRjvopebWnVELkuaZEbnJpVEI'}, ...}

    def test_channels_create_access_error(setup_user_data):
        users = setup_user_data
    
        # Creating a dm
        u_id_list = [users['user2'],users['user3']]
        dm_id1 = requests.post(config.url + 'dm/create/v1', json=dm_create_body(users['user1'],u_id_list)).json()
    
        # Invalidate an existing token to guarantee a token is invalid
        invalid_token = users['user1']['token']
        requests.post(config.url + 'auth/logout/v1', json={
            'token': invalid_token
        })
    
        # Ensure AccessError
>       assert requests.post(config.url + 'message/senddm/v1', json={
            'token': invalid_token,
            'dm_id': dm_id1,
            'message': "Hello",
        }).status_code == 403
E       AssertionError: assert 500 == 403
E        +  where 500 = <Response [500]>.status_code
E        +    where <Response [500]> = <function post at 0x7fc5b7c38488>(('http://localhost:60811/' + 'message/senddm/v1'), json={'dm_id': {'dm_id': 2479, 'dm_name': 'user1_firstuser1_las, user2_firstuser2_las, user3_firstuser3_las'}, 'message': '...TgyNDk2ODQsInNhbHQiOiIyNmNmMjQ2NC1lNGU3LTQ1YmEtOGQzNS0xZWMzN2U0YmMwNzUifQ.vxRhyF_3NoJQE6EBqhYjd7u9p1Fd2DIbjp1mZYxXvSQ'})
E        +      where <function post at 0x7fc5b7c38488> = requests.post
E        +      and   'http://localhost:60811/' = config.url

http_tests/message_senddm_http_test.py:43: AssertionError
_____________ test_http_message_share_v1_share_one_multiple_times ______________

    def test_http_message_share_v1_share_one_multiple_times():
        setup = set_up_data()
        user1, user2, channel1, channel2 = setup['user1'], setup['user2'], setup['channel1'], setup['channel2']
        msg = requests.post(f"{url}message/send/v2", json= {
            "token": user1["token"],
            "channel_id": channel1,
            "message": "Hello"
        }).json()
        m_id = msg["message_id"]
    
        shared_msg1 = requests.post(f"{url}message/share/v1", json={
            "token": user2["token"],
            "og_message_id": m_id,
            "message": "Shared Message 1",
            "channel_id": channel2,
            "dm_id": -1
        }).json()
        shared_m_id1 = shared_msg1["shared_message_id"]
    
        shared_msg2 = requests.post(f"{url}message/share/v1", json={
            "token": user2["token"],
            "og_message_id": shared_m_id1,
            "message": "Shared Message 2",
            "channel_id": channel1,
            "dm_id": -1
        }).json()
        shared_m_id2 = shared_msg2["shared_message_id"]
    
        shared_msg3 = requests.post(f"{url}message/share/v1", json={
            "token": user2["token"],
            "og_message_id": shared_m_id2,
            "message": "Shared Message 3",
            "channel_id": channel2,
            "dm_id": -1
        }).json()
        shared_m_id3 = shared_msg3["shared_message_id"]
    
        channel1_messages = requests.get(f"{url}channel/messages/v2", params= {
            "token": user1["token"],
            "channel_id": channel1,
            "start": 0
        }).json()
    
        channel2_messages = requests.get(f"{url}channel/messages/v2", params= {
            "token": user1["token"],
            "channel_id": channel2,
            "start": 0
        }).json()
    
        assert channel1_messages["messages"][1]["message_id"] == m_id
        assert channel1_messages["messages"][1]["message"] == "Hello"
        assert channel2_messages["messages"][1]["message_id"] == shared_m_id1
        assert channel2_messages["messages"][1]["message"] == 'Shared Message 1\n\n"""\nHello\n"""'
        assert channel2_messages["messages"][0]["message_id"] == shared_m_id3
>       assert channel2_messages["messages"][0]["message"] == 'Shared Message 3\n\n"""\nShared Message 2\n    \n    """\n    Shared Message 1\n        \n        """\n        Hello\n        """\n    """\n"""'
E       assert 'Shared Messa..."\n\t"""\n"""' == 'Shared Messa...n    """\n"""'
E           Shared Message 3
E           
E           """
E           Shared Message 2
E         -     
E         -     """
E         + 	...
E         
E         ...Full output truncated (17 lines hidden), use '-vv' to show

http_tests/message_share_v1_http_test.py:234: AssertionError
_______ test_http_message_share_v1_share_one_multiple_times_same_channel _______

    def test_http_message_share_v1_share_one_multiple_times_same_channel():
        setup = set_up_data()
        user1, user2, channel1 = setup['user1'], setup['user2'], setup['channel1']
        msg = requests.post(f"{url}message/send/v2", json= {
            "token": user1["token"],
            "channel_id": channel1,
            "message": "Hello"
        }).json()
        m_id = msg["message_id"]
    
        shared_msg1 = requests.post(f"{url}message/share/v1", json={
            "token": user2["token"],
            "og_message_id": m_id,
            "message": "Shared Message 1",
            "channel_id": channel1,
            "dm_id": -1
        }).json()
        shared_m_id1 = shared_msg1["shared_message_id"]
    
        shared_msg2 = requests.post(f"{url}message/share/v1", json={
            "token": user2["token"],
            "og_message_id": shared_m_id1,
            "message": "Shared Message 2",
            "channel_id": channel1,
            "dm_id": -1
        }).json()
        shared_m_id2 = shared_msg2["shared_message_id"]
    
        shared_msg3 = requests.post(f"{url}message/share/v1", json={
            "token": user2["token"],
            "og_message_id": shared_m_id2,
            "message": "Shared Message 3",
            "channel_id": channel1,
            "dm_id": -1
        }).json()
        shared_m_id3 = shared_msg3["shared_message_id"]
    
        channel_messages = requests.get(f"{url}channel/messages/v2", params= {
            "token": user1["token"],
            "channel_id": channel1,
            "start": 0
        }).json()
    
        assert channel_messages["messages"][3]["message_id"] == m_id
        assert channel_messages["messages"][3]["message"] == "Hello"
        assert channel_messages["messages"][2]["message_id"] == shared_m_id1
        assert channel_messages["messages"][2]["message"] == 'Shared Message 1\n\n"""\nHello\n"""'
        assert channel_messages["messages"][0]["message_id"] == shared_m_id3
>       assert channel_messages["messages"][0]["message"] == 'Shared Message 3\n\n"""\nShared Message 2\n    \n    """\n    Shared Message 1\n        \n        """\n        Hello\n        """\n    """\n"""'
E       assert 'Shared Messa..."\n\t"""\n"""' == 'Shared Messa...n    """\n"""'
E           Shared Message 3
E           
E           """
E           Shared Message 2
E         -     
E         -     """
E         + 	...
E         
E         ...Full output truncated (17 lines hidden), use '-vv' to show

http_tests/message_share_v1_http_test.py:290: AssertionError
______________ test_http_message_share_v1_share_with_no_added_msg ______________

    def test_http_message_share_v1_share_with_no_added_msg():
        setup = set_up_data()
        user1, user2, channel1, channel2 = setup['user1'], setup['user2'], setup['channel1'], setup['channel2']
        msg = requests.post(f"{url}message/send/v2", json= {
            "token": user1["token"],
            "channel_id": channel1,
            "message": "Hello"
        }).json()
        m_id = msg["message_id"]
    
        shared_msg1 = requests.post(f"{url}message/share/v1", json={
            "token": user2["token"],
            "og_message_id": m_id,
            "message": "",
            "channel_id": channel1,
            "dm_id": -1
        }).json()
        shared_m_id1 = shared_msg1["shared_message_id"]
    
        shared_msg2 = requests.post(f"{url}message/share/v1", json={
            "token": user2["token"],
            "og_message_id": shared_m_id1,
            "message": "",
            "channel_id": channel2,
            "dm_id": -1
        }).json()
        shared_m_id2 = shared_msg2["shared_message_id"]
    
        shared_msg3 = requests.post(f"{url}message/share/v1", json={
            "token": user2["token"],
            "og_message_id": shared_m_id2,
            "message": "Hi",
            "channel_id": channel1,
            "dm_id": -1
        }).json()
        shared_m_id3 = shared_msg3["shared_message_id"]
    
        channel1_messages = requests.get(f"{url}channel/messages/v2", params= {
            "token": user1["token"],
            "channel_id": channel1,
            "start": 0
        }).json()
    
        channel2_messages = requests.get(f"{url}channel/messages/v2", params= {
            "token": user1["token"],
            "channel_id": channel2,
            "start": 0
        }).json()
    
        assert channel1_messages["messages"][2]["message_id"] == m_id
        assert channel1_messages["messages"][2]["message"] == "Hello"
        assert channel1_messages["messages"][1]["message_id"] == shared_m_id1
        assert channel1_messages["messages"][1]["message"] == '\n\n"""\nHello\n"""'
        assert channel1_messages["messages"][0]["message_id"] == shared_m_id3
>       assert channel1_messages["messages"][0]["message"] == 'Hi\n\n"""\n\n    \n    """\n    \n        \n        """\n        Hello\n        """\n    """\n"""'
E       assert 'Hi\n\n"""\n\..."\n\t"""\n"""' == 'Hi\n\n"""\n\...n    """\n"""'
E           Hi
E           
E           """
E           
E         -     
E         -     """
E         -     ...
E         
E         ...Full output truncated (15 lines hidden), use '-vv' to show

http_tests/message_share_v1_http_test.py:351: AssertionError
______________ test_http_message_share_v1_share_dm_multiple_times ______________

    def test_http_message_share_v1_share_dm_multiple_times():
        setup = set_up_data()
        user1, user2, dm1, dm2 = setup['user1'], setup['user2'], setup['dm1'], setup['dm2']
        msg = requests.post(f"{url}message/senddm/v1", json= {
            "token": user1["token"],
            "dm_id": dm1,
            "message": "Hello"
        }).json()
        m_id = msg["message_id"]
    
        shared_msg1 = requests.post(f"{url}message/share/v1", json={
            "token": user2["token"],
            "og_message_id": m_id,
            "message": "Shared Message 1",
            "channel_id": -1,
            "dm_id": dm1
        }).json()
        shared_m_id1 = shared_msg1["shared_message_id"]
    
        shared_msg2 = requests.post(f"{url}message/share/v1", json={
            "token": user2["token"],
            "og_message_id": shared_m_id1,
            "message": "Shared Message 2",
            "channel_id": -1,
            "dm_id": dm2
        }).json()
        shared_m_id2 = shared_msg2["shared_message_id"]
    
        shared_msg3 = requests.post(f"{url}message/share/v1", json={
            "token": user2["token"],
            "og_message_id": shared_m_id2,
            "message": "Shared Message 3",
            "channel_id": -1,
            "dm_id": dm1
        }).json()
        shared_m_id3 = shared_msg3["shared_message_id"]
    
        dm1_messages = requests.get(f"{url}dm/messages/v1", params= {
            "token": user1["token"],
            "dm_id": dm1,
            "start": 0
        }).json()
    
    
        dm2_messages = requests.get(f"{url}dm/messages/v1", params= {
            "token": user1["token"],
            "dm_id": dm2,
            "start": 0
        }).json()
    
        assert dm1_messages["messages"][2]["message_id"] == m_id
        assert dm1_messages["messages"][2]["message"] == "Hello"
        assert dm1_messages["messages"][1]["message_id"] == shared_m_id1
        assert dm1_messages["messages"][1]["message"] == 'Shared Message 1\n\n"""\nHello\n"""'
        assert dm1_messages["messages"][0]["message_id"] == shared_m_id3
>       assert dm1_messages["messages"][0]["message"] == 'Shared Message 3\n\n"""\nShared Message 2\n    \n    """\n    Shared Message 1\n        \n        """\n        Hello\n        """\n    """\n"""'
E       assert 'Shared Messa..."\n\t"""\n"""' == 'Shared Messa...n    """\n"""'
E           Shared Message 3
E           
E           """
E           Shared Message 2
E         -     
E         -     """
E         + 	...
E         
E         ...Full output truncated (17 lines hidden), use '-vv' to show

http_tests/message_share_v1_http_test.py:456: AssertionError
____________ test_http_message_share_v1_share_dm_with_no_added_msg _____________

    def test_http_message_share_v1_share_dm_with_no_added_msg():
        setup = set_up_data()
        user1, user2, dm1 = setup['user1'], setup['user2'], setup['dm1']
        msg = requests.post(f"{url}message/senddm/v1", json= {
            "token": user1["token"],
            "dm_id": dm1,
            "message": "Hello"
        }).json()
        m_id = msg["message_id"]
    
        shared_msg1 = requests.post(f"{url}message/share/v1", json={
            "token": user2["token"],
            "og_message_id": m_id,
            "message": "",
            "channel_id": -1,
            "dm_id": dm1
        }).json()
        shared_m_id1 = shared_msg1["shared_message_id"]
    
        shared_msg2 = requests.post(f"{url}message/share/v1", json={
            "token": user2["token"],
            "og_message_id": shared_m_id1,
            "message": "",
            "channel_id": -1,
            "dm_id": dm1,
        }).json()
        shared_m_id2 = shared_msg2["shared_message_id"]
    
        shared_msg3 = requests.post(f"{url}message/share/v1", json={
            "token": user2["token"],
            "og_message_id": shared_m_id2,
            "message": "Hi",
            "channel_id": -1,
            "dm_id": dm1
        }).json()
        shared_m_id3 = shared_msg3["shared_message_id"]
    
        dm_messages = requests.get(f"{url}dm/messages/v1", params= {
            "token": user1["token"],
            "dm_id": dm1,
            "start": 0
        }).json()
        assert dm_messages["messages"][3]["message_id"] == m_id
        assert dm_messages["messages"][3]["message"] == "Hello"
        assert dm_messages["messages"][2]["message_id"] == shared_m_id1
        assert dm_messages["messages"][2]["message"] == '\n\n"""\nHello\n"""'
        assert dm_messages["messages"][1]["message_id"] == shared_m_id2
>       assert dm_messages["messages"][1]["message"] == '\n\n"""\n\n    \n    """\n    Hello\n    """\n"""'
E       assert '\n\n"""\n\n\...o\n\t"""\n"""' == '\n\n"""\n\n ...n    """\n"""'
E           
E           
E           """
E           
E         -     
E         -     """
E         -     Hello...
E         
E         ...Full output truncated (7 lines hidden), use '-vv' to show

http_tests/message_share_v1_http_test.py:512: AssertionError
_________ test_http_message_share_v1_share_dm_with_no_added_msg_2_dms __________

    def test_http_message_share_v1_share_dm_with_no_added_msg_2_dms():
        setup = set_up_data()
        user1, user2, dm1, dm2 = setup['user1'], setup['user2'], setup['dm1'], setup['dm2']
        msg = requests.post(f"{url}message/senddm/v1", json= {
            "token": user1["token"],
            "dm_id": dm1,
            "message": "Hello"
        }).json()
        m_id = msg["message_id"]
    
        shared_msg1 = requests.post(f"{url}message/share/v1", json={
            "token": user2["token"],
            "og_message_id": m_id,
            "message": "",
            "channel_id": -1,
            "dm_id": dm1
        }).json()
        shared_m_id1 = shared_msg1["shared_message_id"]
    
        shared_msg2 = requests.post(f"{url}message/share/v1", json={
            "token": user2["token"],
            "og_message_id": shared_m_id1,
            "message": "",
            "channel_id": -1,
            "dm_id": dm2,
        }).json()
        shared_m_id2 = shared_msg2["shared_message_id"]
    
        shared_msg3 = requests.post(f"{url}message/share/v1", json={
            "token": user2["token"],
            "og_message_id": shared_m_id2,
            "message": "Hi",
            "channel_id": -1,
            "dm_id": dm1
        }).json()
        shared_m_id3 = shared_msg3["shared_message_id"]
    
        dm1_messages = requests.get(f"{url}dm/messages/v1", params= {
            "token": user1["token"],
            "dm_id": dm1,
            "start": 0
        }).json()
    
        dm2_messages = requests.get(f"{url}dm/messages/v1", params= {
            "token": user1["token"],
            "dm_id": dm2,
            "start": 0
        }).json()
    
        assert dm1_messages["messages"][2]["message_id"] == m_id
        assert dm1_messages["messages"][2]["message"] == "Hello"
        assert dm1_messages["messages"][1]["message_id"] == shared_m_id1
        assert dm1_messages["messages"][1]["message"] == '\n\n"""\nHello\n"""'
        assert dm1_messages["messages"][0]["message_id"] == shared_m_id3
>       assert dm1_messages["messages"][0]["message"] == 'Hi\n\n"""\n\n    \n    """\n    \n        \n        """\n        Hello\n        """\n    """\n"""'
E       assert 'Hi\n\n"""\n\..."\n\t"""\n"""' == 'Hi\n\n"""\n\...n    """\n"""'
E           Hi
E           
E           """
E           
E         -     
E         -     """
E         -     ...
E         
E         ...Full output truncated (15 lines hidden), use '-vv' to show

http_tests/message_share_v1_http_test.py:574: AssertionError
________________________ test_notifications_channel_tag ________________________

setup_user_data = {'user1': {'auth_user_id': 2626, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI2MjYsImxvZ2luX3RpbWUiOjE2MT...2ODUsInNhbHQiOiI0NTU1YzBhYy0zNzlhLTQ5NDYtYmJjOC04YzIyYTIzYjNjOWQifQ.xrX12iQQH3PjyabyX3av3LoWA1eSqKdUmdrfuaRSvdY'}, ...}

    def test_notifications_channel_tag(setup_user_data):
    
        # Create user 1
        user1 = requests.post(config.url + 'auth/register/v2', json={
            'email': 'user1@gmail.com',
            'password': 'password123',
            'name_first': 'first1',
            'name_last': 'last1',
        }).json()
    
        # Create user 2
        user2 = requests.post(config.url + 'auth/register/v2', json={
            'email': 'user2@gmail.com',
            'password': 'password123',
            'name_first': 'first2',
            'name_last': 'last2',
        }).json()
    
        # Creating a public channel
        channel_id = requests.post(config.url + 'channels/create/v2', json={
            'token': user1['token'],
            'name': 'Public',
            'is_public': True,
        }).json()
    
        # Invite user2
        requests.post(config.url + 'channel/invite/v2', json={
            'token': user1['token'],
            'channel_id': channel_id['channel_id'],
            'u_id': user2['auth_user_id'],
        }).json()
    
        # Tag user2
        requests.post(config.url + 'message/send/v2', json={
            'token': user1['token'],
            'channel_id': channel_id['channel_id'],
            'message': '@first2last2 1v1me',
        }).json()
    
        # Get notifications for user2
        notifications = requests.get(config.url + 'notifications/get/v1', params={
            'token': user2['token'],
        }).json()
    
>       assert notifications == {
            'notifications': [
                {
                    'channel_id' : channel_id['channel_id'],
                    'dm_id' : -1,
                    'notification_message' : 'first1last1 added you to Public',
                },
                {
                    'channel_id' : channel_id['channel_id'],
                    'dm_id' : -1,
                    'notification_message' : 'first1last1 tagged you in Public: @first2last2 1v1me',
                },
            ]
        }
E       AssertionError: assert {'notificatio... to Public'}]} == {'notificatio...ast2 1v1me'}]}
E         Differing items:
E         {'notifications': [{'channel_id': 2633, 'dm_id': -1, 'notification_message': 'first1last1 tagged you in Public: @first2last2 1v1me'}, {'channel_id': 2633, 'dm_id': -1, 'notification_message': 'first1last1 added you to Public'}]} != {'notifications': [{'channel_id': 2633, 'dm_id': -1, 'notification_message': 'first1last1 added you to Public'}, {'channel_id': 2633, 'dm_id': -1, 'notification_message': 'first1last1 tagged you in Public: @first2last2 1v1me'}]}
E         Use -v to get the full diff

http_tests/notifications_get_v1_http_test.py:145: AssertionError
__________________________ test_notifications_dm_tag ___________________________

setup_user_data = {'user1': {'auth_user_id': 2635, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI2MzUsImxvZ2luX3RpbWUiOjE2MT...2ODUsInNhbHQiOiIyNDM1NDVjMC00ZjM2LTQxNzMtODU0YS02YWExYWNiNDYwZjYifQ.b_QvuGlNkK4g3lN4m-Lm2v5Qx3tBzUaF1zpXGhW4kU4'}, ...}

    def test_notifications_dm_tag(setup_user_data):
    
        # Create user 1
        user1 = requests.post(config.url + 'auth/register/v2', json={
            'email': 'user1@gmail.com',
            'password': 'password123',
            'name_first': 'first1',
            'name_last': 'last1',
        }).json()
    
        # Create user 2
        user2 = requests.post(config.url + 'auth/register/v2', json={
            'email': 'user2@gmail.com',
            'password': 'password123',
            'name_first': 'first2',
            'name_last': 'last2',
        }).json()
    
        # Creating a dm
        dm_id = requests.post(config.url + 'dm/create/v1', json={
            'token': user1['token'],
            'u_ids': [user2['auth_user_id']],
        }).json()
    
        # Tag user2
        requests.post(config.url + 'message/senddm/v1', json={
            'token': user1['token'],
            'dm_id': dm_id['dm_id'],
            'message': '@first2last2 1v1me',
        }).json()
    
        # Get notifications for user2
        notifications = requests.get(config.url + 'notifications/get/v1', params={
            'token': user2['token'],
        }).json()
    
>       assert notifications == {
            'notifications': [
                {
                    'channel_id' : -1,
                    'dm_id' : dm_id['dm_id'],
                    'notification_message' : 'first1last1 added you to first1last1, first2last2',
                },
                {
                    'channel_id' : -1,
                    'dm_id' : dm_id['dm_id'],
                    'notification_message' : 'first1last1 tagged you in first1last1, first2last2: @first2last2 1v1me',
                },
            ]
        }
E       AssertionError: assert {'notificatio...irst2last2'}]} == {'notificatio...ast2 1v1me'}]}
E         Differing items:
E         {'notifications': [{'channel_id': -1, 'dm_id': 2642, 'notification_message': 'first1last1 tagged you in first1last1, f...1me'}, {'channel_id': -1, 'dm_id': 2642, 'notification_message': 'first1last1 added you to first1last1, first2last2'}]} != {'notifications': [{'channel_id': -1, 'dm_id': 2642, 'notification_message': 'first1last1 added you to first1last1, fi... -1, 'dm_id': 2642, 'notification_message': 'first1last1 tagged you in first1last1, first2last2: @first2last2 1v1me'}]}
E         Use -v to get the full diff

http_tests/notifications_get_v1_http_test.py:196: AssertionError
____________________________ test_search_no_channel ____________________________

setup_user_data = {'user1': {'auth_user_id': 2644, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI2NDQsImxvZ2luX3RpbWUiOjE2MT...2ODUsInNhbHQiOiJiYTAzMmVjNS03ZTBkLTQ4ODgtYjE5Mi01OGQyNTY2MDM4ZTEifQ.wzTs5AfDM3oGE-G03gsTnzZpVOBeBwT3QfXdMzlg5Do'}, ...}

    def test_search_no_channel(setup_user_data):
        users = setup_user_data
    
        # User 1 creates a channel
        channel_id1 = requests.post(config.url + 'channels/create/v2', json={
            'token': users['user1']['token'],
            'name': "Test Channel",
            'is_public': True,
        }).json()
    
        # User 1 sends a message
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "A message in no channels"
        }).json()
    
        search_none = requests.get(config.url + 'search/v2', params={
            'token': users['user2']['token'],
            'query_str': "A message in no channels"
        }).json()
    
>       assert len(search_none) == 0
E       AssertionError: assert 1 == 0
E        +  where 1 = len({'messages': []})

http_tests/search_http_test.py:52: AssertionError
_____________________________ test_search_standard _____________________________

setup_user_data = {'user1': {'auth_user_id': 2651, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI2NTEsImxvZ2luX3RpbWUiOjE2MT...2ODUsInNhbHQiOiJjMDUyMTFlNy0xYjA4LTQ2N2ItYjNjZC1lNmYyMDBmNDQ2NDMifQ.baVODfzMXWQm4XOn8gEw8dTqEMVdaM5h-XwcpVWPJm0'}, ...}

    def test_search_standard(setup_user_data):
        users = setup_user_data
    
        # User 1 creates a channel
        channel_id1 = requests.post(config.url + 'channels/create/v2', json={
            'token': users['user1']['token'],
            'name': "Test Channel",
            'is_public': True,
        }).json()
    
        # User 1 sends a message
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "A message in no channels"
        }).json()
    
        # User 1 invites User 2 to channel 1
        requests.post(config.url + 'channel/invite/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'u_id': users['user2']['auth_user_id']
        }).json()
    
        # User 2 sends a message
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user2']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "A message in no channels"
        }).json()
    
        # User 2 creates a dm to User 3. User 2 sends a message
        u_id_list = [users['user3']]
        dm_id1 = requests.post(config.url + 'dm/create/v1', json=dm_create_body(users['user2'],u_id_list)).json()
    
        requests.post(config.url + 'message/senddm/v1', json={
            'token': users['user2']['token'],
            'dm_id': dm_id1['dm_id'],
            'message': "A message in channels",
        }).json()
    
        search_message = requests.get(config.url + 'search/v2', params={
            'token': users['user2']['token'],
            'query_str': "message"
        }).json()
    
>       assert len(search_message) == 3
E       AssertionError: assert 1 == 3
E        +  where 1 = len({'messages': [{'is_pinned': False, 'message': 'A message in no channels', 'message_id': 2657, 'reacts': [{'is_this_use...ssage in channels', 'message_id': 2660, 'reacts': [{'is_this_user_reacted': False, 'react_id': 1, 'u_ids': []}], ...}]})

http_tests/search_http_test.py:102: AssertionError
__________________________ test_search_case_sensitive __________________________

setup_user_data = {'user1': {'auth_user_id': 2661, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI2NjEsImxvZ2luX3RpbWUiOjE2MT...2ODUsInNhbHQiOiIzZmZlZTFlYS1mMTAwLTRhY2EtOWM0Zi1kMWUwZmQwYzRiNjQifQ.QwgS5P5d9N38rLRdX7KX5GAwr2myW4CCb02-LHoWyNE'}, ...}

    def test_search_case_sensitive(setup_user_data):
        users = setup_user_data
    
        # User 1 creates a channel
        channel_id1 = requests.post(config.url + 'channels/create/v2', json={
            'token': users['user1']['token'],
            'name': "Test Channel",
            'is_public': True,
        }).json()
    
        # User 1 sends a message
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "A message in no channels"
        }).json()
    
        # User 1 invites User 2 to channel 1
        requests.post(config.url + 'channel/invite/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'u_id': users['user2']['auth_user_id']
        }).json()
    
        # User 2 sends a message
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user2']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "A message in no channels"
        }).json()
    
        search_message = requests.get(config.url + 'search/v2', params={
            'token': users['user2']['token'],
            'query_str': "Channels"
        }).json()
    
>       assert len(search_message) == 0
E       AssertionError: assert 1 == 0
E        +  where 1 = len({'messages': []})

http_tests/search_http_test.py:143: AssertionError
__________________________ test_search_leave_channel ___________________________

setup_user_data = {'user1': {'auth_user_id': 2676, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI2NzYsImxvZ2luX3RpbWUiOjE2MT...2ODUsInNhbHQiOiI4NTVlMDllYS03OWY4LTQxMTctYTFlMS00Y2JlZjMzYmVhNmIifQ.HtXdUGkO3J8axT1H5Rp78Gv7QqpiiteM6Kq_w1Bl5Zc'}, ...}

    def test_search_leave_channel(setup_user_data):
        users = setup_user_data
    
        # User 1 creates a channel
        channel_id1 = requests.post(config.url + 'channels/create/v2', json={
            'token': users['user1']['token'],
            'name': "Test Channel",
            'is_public': True,
        }).json()
    
        # User 1 sends a message
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "Welcome to channel"
        }).json()
    
        # User 1 invites User 2 to channel 1
        requests.post(config.url + 'channel/invite/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'u_id': users['user2']['auth_user_id']
        }).json()
    
        # User 2 sends a message
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user2']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "Hi channel"
        }).json()
    
        # User 3 joins channel 1
        requests.post(config.url + 'channel/join/v2', json={
            'token': users['user3']['token'],
            'channel_id': channel_id1['channel_id'],
        }).json()
    
        # User 3 sends a message
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user3']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "Hi channel"
        }).json()
    
        # User 2 creates a dm to User 3. User 2 sends a message
        u_id_list = [users['user3']]
        dm_id1 = requests.post(config.url + 'dm/create/v1', json=dm_create_body(users['user2'],u_id_list)).json()
    
        requests.post(config.url + 'message/senddm/v1', json={
            'token': users['user2']['token'],
            'dm_id': dm_id1['dm_id'],
            'message': "A message in channels",
        }).json()
    
        search_message = requests.get(config.url + 'search/v2', params={
            'token': users['user2']['token'],
            'query_str': "channel"
        }).json()
    
>       assert len(search_message) == 4
E       AssertionError: assert 1 == 4
E        +  where 1 = len({'messages': [{'is_pinned': False, 'message': 'Welcome to channel', 'message_id': 2682, 'reacts': [{'is_this_user_reac...ssage in channels', 'message_id': 2686, 'reacts': [{'is_this_user_reacted': False, 'react_id': 1, 'u_ids': []}], ...}]})

http_tests/search_http_test.py:246: AssertionError
_____________________________ test_search_leave_dm _____________________________

setup_user_data = {'user1': {'auth_user_id': 2687, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI2ODcsImxvZ2luX3RpbWUiOjE2MT...2ODUsInNhbHQiOiI4ZDFmYmNmZi04Zjg0LTQxZmEtOGMwMi02NjNlNDMzMjY4ZGMifQ.fcAc1gIUgovmG3J5Dwe-SS0oaxBpgpZ9puoumMNJNVc'}, ...}

    def test_search_leave_dm(setup_user_data):
        users = setup_user_data
    
        # User 1 creates a channel
        channel_id1 = requests.post(config.url + 'channels/create/v2', json={
            'token': users['user1']['token'],
            'name': "Test Channel",
            'is_public': True,
        }).json()
    
        # User 1 sends a message
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "Welcome to channel"
        }).json()
    
        # User 1 invites User 2 to channel 1
        requests.post(config.url + 'channel/invite/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'u_id': users['user2']['auth_user_id']
        }).json()
    
        # User 2 sends a message
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user2']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "Hi channel"
        }).json()
    
        # User 3 joins channel 1
        requests.post(config.url + 'channel/join/v2', json={
            'token': users['user3']['token'],
            'channel_id': channel_id1['channel_id'],
        }).json()
    
        # User 3 sends a message
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user3']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "Hi channel"
        }).json()
    
        # User 2 creates a dm to User 3. User 2 sends a message
        u_id_list = [users['user3']]
        dm_id1 = requests.post(config.url + 'dm/create/v1', json=dm_create_body(users['user2'],u_id_list)).json()
    
        requests.post(config.url + 'message/senddm/v1', json={
            'token': users['user2']['token'],
            'dm_id': dm_id1['dm_id'],
            'message': "A message in channels",
        }).json()
    
        search_message = requests.get(config.url + 'search/v2', params={
            'token': users['user2']['token'],
            'query_str': "channel"
        }).json()
    
>       assert len(search_message) == 4
E       AssertionError: assert 1 == 4
E        +  where 1 = len({'messages': [{'is_pinned': False, 'message': 'Welcome to channel', 'message_id': 2693, 'reacts': [{'is_this_user_reac...ssage in channels', 'message_id': 2697, 'reacts': [{'is_this_user_reacted': False, 'react_id': 1, 'u_ids': []}], ...}]})

http_tests/search_http_test.py:322: AssertionError
______________________________ test_user_profile _______________________________

    def test_user_profile():
    	resp_register = requests.post(config.url + 'auth/register/v2', json={'email':'exampleUserEmail@email.com', 'password':'ExamplePassword', 'name_first':'FIRSTNAME', 'name_last':'LASTNAME'})
    	json_data_register = json.loads(resp_register.text)
    
    	resp_profile = requests.get(config.url + 'user/profile/v2', params={'token' : json_data_register['token'], 'u_id' : json_data_register['auth_user_id']})
    	json_data_profile = json.loads(resp_profile.text)
    
>   	assert json_data_profile == {'user' :
    				{
    	            'auth_user_id' : json_data_register['auth_user_id'],
    	            'email'        : 'exampleUserEmail@email.com',
    	            'name_first'   : 'FIRSTNAME',
    	            'name_last'    : 'LASTNAME',
    	            'handle_str'   : 'firstnamelastname'
    	            }
               }
E    AssertionError: assert {'user': {'em...STNAME', ...}} == {'user': {'au...STNAME', ...}}
E      Differing items:
E      {'user': {'email': 'exampleUserEmail@email.com', 'handle_str': 'firstnamelastname', 'name_first': 'FIRSTNAME', 'name_last': 'LASTNAME', ...}} != {'user': {'auth_user_id': 2698, 'email': 'exampleUserEmail@email.com', 'handle_str': 'firstnamelastname', 'name_first': 'FIRSTNAME', ...}}
E      Use -v to get the full diff

http_tests/user_profile_http_test.py:22: AssertionError
_______________________ test_user_profile_invalid_token ________________________

    def test_user_profile_invalid_token():
    	resp_register = requests.post(config.url + 'auth/register/v2', json={'email':'exampleUserEmail@email.com', 'password':'ExamplePassword', 'name_first':'FIRSTNAME', 'name_last':'LASTNAME'})
    	json_data_register = json.loads(resp_register.text)
    	assert json_data_register
    
    	resp_profile = requests.get(config.url + 'user/profile/v2', params={'token' : 'someRandomToken', 'u_id' : json_data_register['auth_user_id']})
>   	json_data_profile = json.loads(resp_profile.text)

http_tests/user_profile_http_test.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.7/json/__init__.py:348: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.7/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7fc5b9900128>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Invalid token</p>\n'
idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.7/json/decoder.py:355: JSONDecodeError
__________________________ test_user_profile_setname ___________________________

    def test_user_profile_setname():
    	resp_register = requests.post(config.url + 'auth/register/v2', json={'email':'exampleUserEmail@email.com', 'password':'ExamplePassword', 'name_first':'FIRSTNAME', 'name_last':'LASTNAME'})
    	json_data_register = json.loads(resp_register.text)
    	assert json_data_register
    
    	resp_setname = requests.put(config.url + 'user/profile/setname/v2', json={'token' : json_data_register['token'], 'name_first' : 'changedFirstname', 'name_last' : 'changedLastname'})
    	json_data_setname = json.loads(resp_setname.text)
    	assert json_data_setname == {}
    
    	resp_profile = requests.get(config.url + 'user/profile/v2', params={'token' : json_data_register['token'], 'u_id' : json_data_register['auth_user_id']})
    	json_data_profile = json.loads(resp_profile.text)
>   	assert json_data_profile == {'user' :
    				{
    	            'auth_user_id' : json_data_register['auth_user_id'],
    	            'email'        : 'exampleUserEmail@email.com',
    	            'name_first'   : 'changedFirstname',
    	            'name_last'    : 'changedLastname',
    	            'handle_str'   : 'firstnamelastname'
    	            }
               }
E    AssertionError: assert {'user': {'em...stname', ...}} == {'user': {'au...stname', ...}}
E      Differing items:
E      {'user': {'email': 'exampleUserEmail@email.com', 'handle_str': 'firstnamelastname', 'name_first': 'changedFirstname', 'name_last': 'changedLastname', ...}} != {'user': {'auth_user_id': 2700, 'email': 'exampleUserEmail@email.com', 'handle_str': 'firstnamelastname', 'name_first': 'changedFirstname', ...}}
E      Use -v to get the full diff

http_tests/user_profile_http_test.py:68: AssertionError
___________________ test_user_profile_setname_invalid_token ____________________

    def test_user_profile_setname_invalid_token():
    	resp_register = requests.post(config.url + 'auth/register/v2', json={'email':'exampleUserEmail@email.com', 'password':'ExamplePassword', 'name_first':'FIRSTNAME', 'name_last':'LASTNAME'})
    	json_data_register = json.loads(resp_register.text)
    	assert json_data_register
    
    	resp_setname = requests.put(config.url + 'user/profile/setname/v2', json={'token' : 'someRandomToken', 'name_first' : 'changedFirstname', 'name_last' : 'changedLastname'})
>   	json_data_setname = json.loads(resp_setname.text)

http_tests/user_profile_http_test.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.7/json/__init__.py:348: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.7/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7fc5b9900128>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Invalid token</p>\n'
idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.7/json/decoder.py:355: JSONDecodeError
________________ test_user_profile_setname_invalid_name_length _________________

    def test_user_profile_setname_invalid_name_length():
    	resp_register = requests.post(config.url + 'auth/register/v2', json={'email':'exampleUserEmail@email.com', 'password':'ExamplePassword', 'name_first':'FIRSTNAME', 'name_last':'LASTNAME'})
    	json_data_register = json.loads(resp_register.text)
    	assert json_data_register
    
    	resp_setname = requests.put(config.url + 'user/profile/setname/v2', json={'token' : json_data_register['token'], 'name_first' : '', 'name_last' : 'changedLastname'})
>   	json_data_setname = json.loads(resp_setname.text)

http_tests/user_profile_http_test.py:97: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.7/json/__init__.py:348: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.7/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7fc5b9900128>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>400 Bad Request</title>\n<h1>Bad Request</h1>\n<p>Name must be between 1 and 50 characters inclusive</p>\n'
idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.7/json/decoder.py:355: JSONDecodeError
__________________________ test_user_profile_setemail __________________________

    def test_user_profile_setemail():
    	resp_register = requests.post(config.url + 'auth/register/v2', json={'email':'exampleUserEmail@email.com', 'password':'ExamplePassword', 'name_first':'FIRSTNAME', 'name_last':'LASTNAME'})
    	json_data_register = json.loads(resp_register.text)
    	assert json_data_register
    
    	resp_setname = requests.put(config.url + 'user/profile/setemail/v2', json={'token' : json_data_register['token'], 'email' : 'changedEmail@outlook.com'})
    	json_data_setemail = json.loads(resp_setname.text)
    	assert json_data_setemail == {}
    
    	resp_profile = requests.get(config.url + 'user/profile/v2', params={'token' : json_data_register['token'], 'u_id' : json_data_register['auth_user_id']})
    	json_data_profile = json.loads(resp_profile.text)
    
>   	assert json_data_profile == {'user' :
    				{
    	            'auth_user_id' : json_data_register['auth_user_id'],
    	            'email'        : 'changedEmail@outlook.com',
    	            'name_first'   : 'FIRSTNAME',
    	            'name_last'    : 'LASTNAME',
    	            'handle_str'   : 'firstnamelastname'
    	            }
               }
E    AssertionError: assert {'user': {'em...STNAME', ...}} == {'user': {'au...STNAME', ...}}
E      Differing items:
E      {'user': {'email': 'changedEmail@outlook.com', 'handle_str': 'firstnamelastname', 'name_first': 'FIRSTNAME', 'name_last': 'LASTNAME', ...}} != {'user': {'auth_user_id': 2703, 'email': 'changedEmail@outlook.com', 'handle_str': 'firstnamelastname', 'name_first': 'FIRSTNAME', ...}}
E      Use -v to get the full diff

http_tests/user_profile_http_test.py:115: AssertionError
________________________ test_user_profile_sethandle_v1 ________________________

    def test_user_profile_sethandle_v1():
    	resp_register = requests.post(config.url + 'auth/register/v2', json={'email':'exampleUserEmail@email.com', 'password':'ExamplePassword', 'name_first':'FIRSTNAME', 'name_last':'LASTNAME'})
    	json_data_register = json.loads(resp_register.text)
    	assert json_data_register
    
    	resp_sethandle = requests.put(config.url + 'user/profile/sethandle/v2', json={'token' : json_data_register['token'], 'handle_str' : 'changedHandle'})
>   	json_data_sethandle = json.loads(resp_sethandle.text)

http_tests/user_profile_http_test.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.7/json/__init__.py:348: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.7/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7fc5b9900128>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n'
idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.7/json/decoder.py:355: JSONDecodeError
=========================== short test summary info ============================
FAILED http_tests/admin_user_remove_http_test.py::test_admin_user_remove - si...
FAILED http_tests/admin_userpermission_change_http_test.py::test_admin_userpermission_change_invalid_uid
FAILED http_tests/admin_userpermission_change_http_test.py::test_admin_userpermission_change_only_owner
FAILED http_tests/admin_userpermission_change_http_test.py::test_admin_userpermission_change_ogowner
FAILED http_tests/auth_http_test.py::test_auth_login_api_invalid - json.decod...
FAILED http_tests/channel_addowner_v1_http_test.py::test_channel_join_owner_input_error
FAILED http_tests/channel_addowner_v1_http_test.py::test_addowner_dreams - As...
FAILED http_tests/channel_details_v2_http_test.py::test_function - AssertionE...
FAILED http_tests/channel_details_v2_http_test.py::test_multiple - AssertionE...
FAILED http_tests/channel_details_v2_http_test.py::test_multiple_channels - A...
FAILED http_tests/channel_details_v2_http_test.py::test_invalid_channel_id - ...
FAILED http_tests/channel_details_v2_http_test.py::test_unauthorized_user - s...
FAILED http_tests/channel_details_v2_http_test.py::test_invalid_token - simpl...
FAILED http_tests/channel_invite_v2_http_test.py::test_function - AssertionEr...
FAILED http_tests/channel_invite_v2_http_test.py::test_multiple - AssertionEr...
FAILED http_tests/channel_invite_v2_http_test.py::test_multiple_users_invite
FAILED http_tests/channel_invite_v2_http_test.py::test_invalid_channel_id - s...
FAILED http_tests/channel_invite_v2_http_test.py::test_invalid_invited_user
FAILED http_tests/channel_invite_v2_http_test.py::test_unauthorized_user - si...
FAILED http_tests/channel_invite_v2_http_test.py::test_invalid_token - simple...
FAILED http_tests/channel_messages_v2_http_test.py::test_channel_messages_v2_50_messages
FAILED http_tests/channel_messages_v2_http_test.py::test_channel_messages_v2_111_messages_start_50
FAILED http_tests/channel_removeowner_v1_http_test.py::test_channel_removeowner_owner_error
FAILED http_tests/channel_removeowner_v1_http_test.py::test_channel_removeowner_basic
FAILED http_tests/channel_removeowner_v1_http_test.py::test_removeowner_dreams
FAILED http_tests/channels_list_v2_http_test.py::test_channels_list_multiple
FAILED http_tests/dm_create_v1_http_test.py::test_function - AssertionError: ...
FAILED http_tests/dm_create_v1_http_test.py::test_multiple - AssertionError: ...
FAILED http_tests/dm_create_v1_http_test.py::test_invalid_token - simplejson....
FAILED http_tests/dm_create_v1_http_test.py::test_invalid_user - simplejson.e...
FAILED http_tests/dm_details_v1_http_test.py::test_invalid_dm_id - simplejson...
FAILED http_tests/dm_details_v1_http_test.py::test_invalid_user - simplejson....
FAILED http_tests/dm_details_v1_http_test.py::test_invalid_token - simplejson...
FAILED http_tests/dm_invite_v1_http_test.py::test_function - AssertionError: ...
FAILED http_tests/dm_invite_v1_http_test.py::test_multiple - AssertionError: ...
FAILED http_tests/dm_invite_v1_http_test.py::test_invalid_token - simplejson....
FAILED http_tests/dm_invite_v1_http_test.py::test_invalid_dm_id - simplejson....
FAILED http_tests/dm_invite_v1_http_test.py::test_invalid_user - simplejson.e...
FAILED http_tests/dm_invite_v1_http_test.py::test_unauthorised_user - simplej...
FAILED http_tests/dm_leave_v1_http_test.py::test_function - AssertionError: a...
FAILED http_tests/dm_leave_v1_http_test.py::test_multiple - AssertionError: a...
FAILED http_tests/dm_leave_v1_http_test.py::test_invalid_token - simplejson.e...
FAILED http_tests/dm_leave_v1_http_test.py::test_invalid_dm_id - simplejson.e...
FAILED http_tests/dm_leave_v1_http_test.py::test_unauthorised_user - simplejs...
FAILED http_tests/dm_list_v1_http_test.py::test_multiple - AssertionError: as...
FAILED http_tests/dm_list_v1_http_test.py::test_invalid_token - simplejson.er...
FAILED http_tests/dm_messages_v1_http_test.py::test_dm_messages_v1_AccessError
FAILED http_tests/dm_messages_v1_http_test.py::test_dm_messages_v1_InputError_invalid_dm
FAILED http_tests/dm_messages_v1_http_test.py::test_dm_messages_v1_InputError_invalid_start
FAILED http_tests/dm_messages_v1_http_test.py::test_dm_messages_v1_50_messages
FAILED http_tests/dm_messages_v1_http_test.py::test_dm_messages_v1_111_messages_start_50
FAILED http_tests/dm_remove_v1_http_test.py::test_multiple - AssertionError: ...
FAILED http_tests/dm_remove_v1_http_test.py::test_invalid_dm_id - simplejson....
FAILED http_tests/dm_remove_v1_http_test.py::test_unauthorized_user - simplej...
FAILED http_tests/dm_remove_v1_http_test.py::test_invalid_token - simplejson....
FAILED http_tests/message_edit_v2_http_test.py::test_http_message_edit_v2_edit_one
FAILED http_tests/message_edit_v2_http_test.py::test_http_message_edit_v2_edit_multiple
FAILED http_tests/message_edit_v2_http_test.py::test_http_message_edit_v2_edit_all_messages
FAILED http_tests/message_edit_v2_http_test.py::test_http_message_edit_v2_owner_edits_message
FAILED http_tests/message_edit_v2_http_test.py::test_http_message_edit_v2_dream_owner_edits_message
FAILED http_tests/message_edit_v2_http_test.py::test_http_message_edit_v2_dream_owner_edits_message_in_channel
FAILED http_tests/message_edit_v2_http_test.py::test_message_edit_v2_edit_msg_in_dm
FAILED http_tests/message_senddm_http_test.py::test_channels_create_access_error
FAILED http_tests/message_share_v1_http_test.py::test_http_message_share_v1_share_one_multiple_times
FAILED http_tests/message_share_v1_http_test.py::test_http_message_share_v1_share_one_multiple_times_same_channel
FAILED http_tests/message_share_v1_http_test.py::test_http_message_share_v1_share_with_no_added_msg
FAILED http_tests/message_share_v1_http_test.py::test_http_message_share_v1_share_dm_multiple_times
FAILED http_tests/message_share_v1_http_test.py::test_http_message_share_v1_share_dm_with_no_added_msg
FAILED http_tests/message_share_v1_http_test.py::test_http_message_share_v1_share_dm_with_no_added_msg_2_dms
FAILED http_tests/notifications_get_v1_http_test.py::test_notifications_channel_tag
FAILED http_tests/notifications_get_v1_http_test.py::test_notifications_dm_tag
FAILED http_tests/search_http_test.py::test_search_no_channel - AssertionErro...
FAILED http_tests/search_http_test.py::test_search_standard - AssertionError:...
FAILED http_tests/search_http_test.py::test_search_case_sensitive - Assertion...
FAILED http_tests/search_http_test.py::test_search_leave_channel - AssertionE...
FAILED http_tests/search_http_test.py::test_search_leave_dm - AssertionError:...
FAILED http_tests/user_profile_http_test.py::test_user_profile - AssertionErr...
FAILED http_tests/user_profile_http_test.py::test_user_profile_invalid_token
FAILED http_tests/user_profile_http_test.py::test_user_profile_setname - Asse...
FAILED http_tests/user_profile_http_test.py::test_user_profile_setname_invalid_token
FAILED http_tests/user_profile_http_test.py::test_user_profile_setname_invalid_name_length
FAILED http_tests/user_profile_http_test.py::test_user_profile_setemail - Ass...
FAILED http_tests/user_profile_http_test.py::test_user_profile_sethandle_v1
======================= 83 failed, 342 passed in 21.98s ========================
