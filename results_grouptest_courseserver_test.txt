============================= test session starts ==============================
platform linux -- Python 3.7.3, pytest-6.2.3, py-1.10.0, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/tmp_amd/kamen/export/kamen/3/cs1531/automark/tempstore/.hypothesis/examples')
rootdir: /tmp_amd/kamen/export/kamen/3/cs1531/automark/tempstore, configfile: pytest.ini
plugins: forked-1.3.0, xdist-2.2.1, hypothesis-6.1.1, timeout-1.4.2
collecting ... collected 284 items

http_tests/admin_user_remove_http_test.py::test_admin_user_remove_invalid_token PASSED [  0%]
http_tests/admin_user_remove_http_test.py::test_admin_user_remove_invalid_uid PASSED [  0%]
http_tests/admin_user_remove_http_test.py::test_admin_user_remove_invalid_owner PASSED [  1%]
http_tests/admin_user_remove_http_test.py::test_admin_user_remove_only_owner PASSED [  1%]
http_tests/admin_user_remove_http_test.py::test_admin_user_remove_channel_messages PASSED [  1%]
http_tests/admin_user_remove_http_test.py::test_admin_user_remove FAILED [  2%]
http_tests/admin_user_remove_http_test.py::test_admin_user_remove_invalid_token PASSED [  2%]
http_tests/admin_user_remove_http_test.py::test_admin_user_remove_invalid_uid PASSED [  2%]
http_tests/admin_user_remove_http_test.py::test_admin_user_remove_invalid_owner PASSED [  2%]
http_tests/admin_user_remove_http_test.py::test_admin_user_remove_only_owner PASSED [  2%]
http_tests/admin_user_remove_http_test.py::test_admin_user_remove_channel_messages PASSED [  2%]
http_tests/admin_user_remove_http_test.py::test_admin_user_remove FAILED [  2%]
http_tests/admin_userpermission_change_http_test.py::test_admin_userpermission_change_invalid_token PASSED [  2%]
http_tests/admin_userpermission_change_http_test.py::test_admin_userpermission_change_invalid_uid FAILED [  2%]
http_tests/admin_userpermission_change_http_test.py::test_admin_userpermission_change_invalid_owner PASSED [  3%]
http_tests/admin_userpermission_change_http_test.py::test_admin_userpermission_change_basic PASSED [  3%]
http_tests/admin_userpermission_change_http_test.py::test_admin_userpermission_change_join_private_channels PASSED [  3%]
http_tests/admin_userpermission_change_http_test.py::test_admin_userpermission_change_ogowner PASSED [  4%]
http_tests/auth_http_test.py::test_auth_register_api_valid PASSED        [  4%]
http_tests/auth_http_test.py::test_auth_login_api_valid PASSED           [  4%]
http_tests/auth_http_test.py::test_auth_login_api_invalid FAILED         [  5%]
http_tests/auth_http_test.py::test_auth_logout_api FAILED                [  5%]
http_tests/auth_http_test.py::test_auth_logout_api_logging_back PASSED   [  5%]
http_tests/channel_addowner_v1_http_test.py::test_channel_addowner_channel_id_error PASSED [  6%]
http_tests/channel_addowner_v1_http_test.py::test_channel_addowner_owner_error PASSED [  6%]
http_tests/channel_addowner_v1_http_test.py::test_addowner_access_error PASSED [  7%]
http_tests/channel_addowner_v1_http_test.py::test_channel_join_owner_input_error FAILED [  7%]
http_tests/channel_addowner_v1_http_test.py::test_addowner_dreams FAILED [  7%]
http_tests/channel_details_v2_http_test.py::test_function FAILED         [  8%]
http_tests/channel_details_v2_http_test.py::test_multiple FAILED         [  8%]
http_tests/channel_details_v2_http_test.py::test_multiple_channels FAILED [  8%]
http_tests/channel_details_v2_http_test.py::test_invalid_channel_id FAILED [  9%]
http_tests/channel_details_v2_http_test.py::test_unauthorized_user FAILED [  9%]
http_tests/channel_details_v2_http_test.py::test_invalid_token FAILED    [  9%]
http_tests/channel_invite_v2_http_test.py::test_function FAILED          [ 10%]
http_tests/channel_invite_v2_http_test.py::test_multiple FAILED          [ 10%]
http_tests/channel_invite_v2_http_test.py::test_multiple_users_invite FAILED [ 10%]
http_tests/channel_invite_v2_http_test.py::test_invalid_channel_id FAILED [ 11%]
http_tests/channel_invite_v2_http_test.py::test_invalid_invited_user FAILED [ 11%]
http_tests/channel_invite_v2_http_test.py::test_unauthorized_user FAILED [ 11%]
http_tests/channel_invite_v2_http_test.py::test_invalid_token FAILED     [ 12%]
http_tests/channel_join_v2_http_test.py::test_channel_join_input_error PASSED [ 12%]
http_tests/channel_join_v2_http_test.py::test_channel_join_access_error PASSED [ 13%]
http_tests/channel_join_v2_http_test.py::test_channels_join_basic PASSED [ 13%]
http_tests/channel_join_v2_http_test.py::test_channels_join_dreams PASSED [ 13%]
http_tests/channel_leave_http_test.py::test_channel_leave_token_access_error PASSED [ 14%]
http_tests/channel_leave_http_test.py::test_channel_leave_access_error PASSED [ 14%]
http_tests/channel_leave_http_test.py::test_channel_leave_input_error PASSED [ 14%]
http_tests/channel_leave_http_test.py::test_channel_leave_basic_channel PASSED [ 15%]
http_tests/channel_leave_http_test.py::test_channel_leave_basic_user PASSED [ 15%]
http_tests/channel_messages_v2_http_test.py::test_channel_messages_v2_AccessError PASSED [ 15%]
http_tests/channel_messages_v2_http_test.py::test_channel_messages_v2_InputError_invalid_channel PASSED [ 16%]
http_tests/channel_messages_v2_http_test.py::test_channel_messages_v2_InputError_invalid_start PASSED [ 16%]
http_tests/channel_messages_v2_http_test.py::test_channel_messages_v2_no_messages PASSED [ 16%]
http_tests/channel_messages_v2_http_test.py::test_channel_messages_v2_1_message PASSED [ 17%]
http_tests/channel_messages_v2_http_test.py::test_channel_messages_v2_100_messages_start_50 PASSED [ 17%]
http_tests/channel_messages_v2_http_test.py::test_channel_messages_start_is_last_message PASSED [ 17%]
http_tests/channel_messages_v2_http_test.py::test_start_equals_num_messages PASSED [ 18%]
http_tests/channel_messages_v2_http_test.py::test_channel_messages_v2_48_messages PASSED [ 18%]
http_tests/channel_messages_v2_http_test.py::test_channel_messages_v2_51_messages_start_0 PASSED [ 19%]
http_tests/channel_messages_v2_http_test.py::test_channel_messages_v2_51_messages_start_50 PASSED [ 19%]
http_tests/channel_messages_v2_http_test.py::test_channel_messages_v2_111_messages_start_0 PASSED [ 19%]
http_tests/channel_messages_v2_http_test.py::test_channel_messages_v2_start_21 PASSED [ 20%]
http_tests/channel_messages_v2_http_test.py::test_channel_messages_v2_start_21_end_neg1 PASSED [ 20%]
http_tests/channel_removeowner_v1_http_test.py::test_channel_removeowner_channel_id_error PASSED [ 20%]
http_tests/channel_removeowner_v1_http_test.py::test_channel_removeowner_owner_error FAILED [ 21%]
http_tests/channel_removeowner_v1_http_test.py::test_removeowner_access_error PASSED [ 21%]
http_tests/channel_removeowner_v1_http_test.py::test_removesoleowner_access_error PASSED [ 21%]
http_tests/channel_removeowner_v1_http_test.py::test_channel_removeowner_basic FAILED [ 22%]
http_tests/channel_removeowner_v1_http_test.py::test_removeowner_dreams FAILED [ 22%]
http_tests/channels_create_http_test.py::test_channels_create_access_error PASSED [ 22%]
http_tests/channels_create_http_test.py::test_channels_create_input_error PASSED [ 23%]
http_tests/channels_create_http_test.py::test_channels_create_same_name PASSED [ 23%]
http_tests/channels_create_http_test.py::test_channels_create_valid_basic PASSED [ 23%]
http_tests/channels_list_v2_http_test.py::test_channels_list_access_error PASSED [ 24%]
http_tests/channels_list_v2_http_test.py::test_channels_list_empty PASSED [ 24%]
http_tests/channels_list_v2_http_test.py::test_channels_list_single PASSED [ 25%]
http_tests/channels_list_v2_http_test.py::test_channels_list_multiple FAILED [ 25%]
http_tests/channels_listall_http_test.py::test_channels_listall_access_error PASSED [ 25%]
http_tests/channels_listall_http_test.py::test_channels_listall_empty PASSED [ 26%]
http_tests/channels_listall_http_test.py::test_channels_listall_single PASSED [ 26%]
http_tests/channels_listall_http_test.py::test_channels_listall_multiple PASSED [ 26%]
http_tests/dm_create_v1_http_test.py::test_function FAILED               [ 27%]
http_tests/dm_create_v1_http_test.py::test_multiple FAILED               [ 27%]
http_tests/dm_create_v1_http_test.py::test_empty_u_ids_list FAILED       [ 27%]
http_tests/dm_create_v1_http_test.py::test_invalid_token FAILED          [ 28%]
http_tests/dm_create_v1_http_test.py::test_invalid_user FAILED           [ 28%]
http_tests/dm_details_v1_http_test.py::test_invalid_dm_id FAILED         [ 28%]
http_tests/dm_details_v1_http_test.py::test_invalid_user FAILED          [ 29%]
http_tests/dm_details_v1_http_test.py::test_invalid_token FAILED         [ 29%]
http_tests/dm_invite_v1_http_test.py::test_function FAILED               [ 29%]
http_tests/dm_invite_v1_http_test.py::test_multiple FAILED               [ 30%]
http_tests/dm_invite_v1_http_test.py::test_invalid_token FAILED          [ 30%]
http_tests/dm_invite_v1_http_test.py::test_invalid_dm_id FAILED          [ 30%]
http_tests/dm_invite_v1_http_test.py::test_invalid_user FAILED           [ 31%]
http_tests/dm_invite_v1_http_test.py::test_unauthorised_user FAILED      [ 31%]
http_tests/dm_leave_v1_http_test.py::test_function FAILED                [ 32%]
http_tests/dm_leave_v1_http_test.py::test_multiple FAILED                [ 32%]
http_tests/dm_leave_v1_http_test.py::test_invalid_token FAILED           [ 32%]
http_tests/dm_leave_v1_http_test.py::test_invalid_dm_id FAILED           [ 33%]
http_tests/dm_leave_v1_http_test.py::test_unauthorised_user FAILED       [ 33%]
http_tests/dm_list_v1_http_test.py::test_function PASSED                 [ 33%]
http_tests/dm_list_v1_http_test.py::test_multiple FAILED                 [ 34%]
http_tests/dm_list_v1_http_test.py::test_invalid_token FAILED            [ 34%]
http_tests/dm_messages_v1_http_test.py::test_dm_messages_v1_AccessError FAILED [ 34%]
http_tests/dm_messages_v1_http_test.py::test_dm_messages_v1_InputError_invalid_dm FAILED [ 35%]
http_tests/dm_messages_v1_http_test.py::test_dm_messages_v1_InputError_invalid_start FAILED [ 35%]
http_tests/dm_messages_v1_http_test.py::test_dm_messages_v1_no_messages PASSED [ 35%]
http_tests/dm_messages_v1_http_test.py::test_dm_messages_v1_1_message PASSED [ 36%]
http_tests/dm_messages_v1_http_test.py::test_dm_messages_v1_100_messages_start_50 PASSED [ 36%]
http_tests/dm_messages_v1_http_test.py::test_dm_messages_start_is_last_message PASSED [ 36%]
http_tests/dm_messages_v1_http_test.py::test_start_equals_num_messages PASSED [ 37%]
http_tests/dm_messages_v1_http_test.py::test_dm_messages_v1_48_messages PASSED [ 37%]
http_tests/dm_messages_v1_http_test.py::test_dm_messages_v1_51_messages_start_0 PASSED [ 38%]
http_tests/dm_messages_v1_http_test.py::test_dm_messages_v1_51_messages_start_50 PASSED [ 38%]
http_tests/dm_messages_v1_http_test.py::test_dm_messages_v1_111_messages_start_0 PASSED [ 38%]
http_tests/dm_messages_v1_http_test.py::test_dm_messages_v1_start_21 PASSED [ 39%]
http_tests/dm_messages_v1_http_test.py::test_dm_messages_v1_start_21_end_neg1 PASSED [ 39%]
http_tests/dm_remove_v1_http_test.py::test_function PASSED               [ 39%]
http_tests/dm_remove_v1_http_test.py::test_multiple FAILED               [ 40%]
http_tests/dm_remove_v1_http_test.py::test_invalid_dm_id FAILED          [ 40%]
http_tests/dm_remove_v1_http_test.py::test_unauthorized_user FAILED      [ 40%]
http_tests/dm_remove_v1_http_test.py::test_invalid_token FAILED          [ 41%]
http_tests/message_edit_v2_http_test.py::test_http_message_edit_v2_InputError_msg_too_long PASSED [ 41%]
http_tests/message_edit_v2_http_test.py::test_http_message_edit_v2_InputError_msg_removed PASSED [ 41%]
http_tests/message_edit_v2_http_test.py::test_http_message_edit_v2_AccessError PASSED [ 42%]
http_tests/message_edit_v2_http_test.py::test_message_edit_v2_AccessError_not_dm_owner PASSED [ 42%]
http_tests/message_edit_v2_http_test.py::test_http_message_edit_v2_default_Access_Error PASSED [ 42%]
http_tests/message_edit_v2_http_test.py::test_http_message_edit_v2_edit_one FAILED [ 43%]
http_tests/message_edit_v2_http_test.py::test_http_message_edit_v2_edit_multiple FAILED [ 43%]
http_tests/message_edit_v2_http_test.py::test_http_message_edit_v2_edit_all_messages FAILED [ 44%]
http_tests/message_edit_v2_http_test.py::test_http_message_edit_v2_owner_edits_message FAILED [ 44%]
http_tests/message_edit_v2_http_test.py::test_http_message_edit_v2_dream_owner_edits_message FAILED [ 44%]
http_tests/message_edit_v2_http_test.py::test_http_message_edit_v2_dream_owner_edits_message_in_channel FAILED [ 45%]
http_tests/message_edit_v2_http_test.py::test_http_message_edit_v2_edit_removes_1_msg PASSED [ 45%]
http_tests/message_edit_v2_http_test.py::test_http_message_edit_v2_edit_removes_multiple_msg PASSED [ 45%]
http_tests/message_edit_v2_http_test.py::test_message_edit_v2_edit_msg_in_dm FAILED [ 46%]
http_tests/message_pin_v1_http_test.py::test_http_message_pin_v1_AccessError PASSED [ 46%]
http_tests/message_pin_v1_http_test.py::test_http_message_pin_v1_AccessError_dm PASSED [ 46%]
http_tests/message_pin_v1_http_test.py::test_http_message_pin_v1_AccessError_non_owner PASSED [ 47%]
http_tests/message_pin_v1_http_test.py::test_http_message_pin_v1_AccessError_dm_non_owner PASSED [ 47%]
http_tests/message_pin_v1_http_test.py::test_http_message_pin_v1_InputError_non_valid_id PASSED [ 47%]
http_tests/message_pin_v1_http_test.py::test_http_message_pin_v1_InputError_already_pinned PASSED [ 48%]
http_tests/message_pin_v1_http_test.py::test_http_message_pin_v1_default_Access_Error PASSED [ 48%]
http_tests/message_pin_v1_http_test.py::test_http_message_pin_v1_InputError_pin_removed_msg PASSED [ 48%]
http_tests/message_pin_v1_http_test.py::test_http_message_pin_v1_pin_one PASSED [ 49%]
http_tests/message_pin_v1_http_test.py::test_http_message_pin_v1_pin_multiple PASSED [ 49%]
http_tests/message_pin_v1_http_test.py::test_http_message_pin_v1_pin_one_dm PASSED [ 50%]
http_tests/message_react_v1_http_test.py::test_react_v1_invalid_message_id_nonexistent_InputError PASSED [ 50%]
http_tests/message_react_v1_http_test.py::test_react_v1_invalid_react_id_InputError PASSED [ 50%]
http_tests/message_react_v1_http_test.py::test_react_v1_repeat_react_InputError PASSED [ 51%]
http_tests/message_react_v1_http_test.py::test_react_v1_invalid_message_id_inaccessible_channel_AccessError PASSED [ 51%]
http_tests/message_react_v1_http_test.py::test_react_v1_invalid_message_id_inaccessible_dm_AccessError PASSED [ 51%]
http_tests/message_react_v1_http_test.py::test_message_react_v1_default_Access_Error PASSED [ 52%]
http_tests/message_react_v1_http_test.py::test_message_react_v1_channel PASSED [ 52%]
http_tests/message_react_v1_http_test.py::test_message_react_v1_dm PASSED [ 52%]
http_tests/message_react_v1_http_test.py::test_message_react_v1_self PASSED [ 53%]
http_tests/message_react_v1_http_test.py::test_message_react_v1_different_messages FAILED [ 53%]
http_tests/message_react_v1_http_test.py::test_message_react_v1_multiple_reacts PASSED [ 53%]
http_tests/message_remove_v2_http_test.py::test_http_message_remove_v1_AccessError PASSED [ 54%]
http_tests/message_remove_v2_http_test.py::test_http_message_remove_v1_InputError PASSED [ 54%]
http_tests/message_remove_v2_http_test.py::test_message_remove_v1_AccessError_not_dm_owner PASSED [ 54%]
http_tests/message_remove_v2_http_test.py::test_http_message_remove_v1_default_Access_Error PASSED [ 55%]
http_tests/message_remove_v2_http_test.py::test_http_message_remove_v1_remove_one PASSED [ 55%]
http_tests/message_remove_v2_http_test.py::test_http_message_remove_v1_remove_multiple PASSED [ 55%]
http_tests/message_remove_v2_http_test.py::test_http_message_remove_v1_remove_all PASSED [ 56%]
http_tests/message_remove_v2_http_test.py::test_http_message_remove_v1_owner_removes_message PASSED [ 56%]
http_tests/message_remove_v2_http_test.py::test_http_message_remove_v1_dream_owner_removes_message PASSED [ 57%]
http_tests/message_remove_v2_http_test.py::test_http_message_remove_v1_dream_owner_removes_message_in_channel PASSED [ 57%]
http_tests/message_remove_v2_http_test.py::test_http_message_remove_v1_remove_same_msg_diff_channels PASSED [ 57%]
http_tests/message_remove_v2_http_test.py::test_message_edit_v2_edit_msg_in_dm PASSED [ 58%]
http_tests/message_send_v2_http_test.py::test_http_message_send_v2_AccessError PASSED [ 58%]
http_tests/message_send_v2_http_test.py::test_http_message_send_v2_InputError PASSED [ 58%]
http_tests/message_send_v2_http_test.py::test_http_message_send_v2_default_Access_Error PASSED [ 59%]
http_tests/message_send_v2_http_test.py::test_http_message_send_v2_send_one PASSED [ 59%]
http_tests/message_send_v2_http_test.py::test_http_message_send_v2_user_sends_identical_messages PASSED [ 59%]
http_tests/message_send_v2_http_test.py::test_http_message_send_v2_multiple_users_multiple_messages PASSED [ 60%]
http_tests/message_send_v2_http_test.py::test_http_message_send_v2_multiple_users_multiple_messages_message_id PASSED [ 60%]
http_tests/message_send_v2_http_test.py::test_http_message_send_v2_identical_message_to_2_channels PASSED [ 60%]
http_tests/message_send_v2_http_test.py::test_http_message_send_v2_appends_to_data_messages PASSED [ 61%]
http_tests/message_senddm_http_test.py::test_message_senddm_v1_access_error FAILED [ 61%]
http_tests/message_senddm_http_test.py::test_message_senddm_v1_input_error PASSED [ 61%]
http_tests/message_senddm_http_test.py::test_message_senddm_v1_send_one PASSED [ 62%]
http_tests/message_senddm_http_test.py::test_message_senddm_v1_user_sends_identical_messages PASSED [ 62%]
http_tests/message_senddm_http_test.py::test_message_senddm_v1_send_multiple PASSED [ 63%]
http_tests/message_senddm_http_test.py::test_message_senddm_v1_send_two PASSED [ 63%]
http_tests/message_sendlater_v1_http_test.py::test_http_message_sendlater_v1_AccessError PASSED [ 63%]
http_tests/message_sendlater_v1_http_test.py::test_http_message_sendlater_v1_InputError PASSED [ 64%]
http_tests/message_sendlater_v1_http_test.py::test_http_message_sendlater_v1_InputError_invalid_channel PASSED [ 64%]
http_tests/message_sendlater_v1_http_test.py::test_http_message_sendlater_v1_InputError_invalid_time PASSED [ 64%]
http_tests/message_sendlater_v1_http_test.py::test_http_message_sendlater_v1_default_Access_Error FAILED [ 65%]
http_tests/message_sendlater_v1_http_test.py::test_http_message_send_later_v1_1_message PASSED [ 65%]
http_tests/message_sendlater_v1_http_test.py::test_http_message_send_later_v1_send_multiple_after FAILED [ 65%]
http_tests/message_sendlater_v1_http_test.py::test_http_message_send_later_v1_leave_channel_before_message_sent FAILED [ 66%]
http_tests/message_sendlaterdm_v1_http_test.py::test_http_message_sendlaterdm_v1_AccessError PASSED [ 66%]
http_tests/message_sendlaterdm_v1_http_test.py::test_http_message_sendlaterdm_v1_InputError PASSED [ 66%]
http_tests/message_sendlaterdm_v1_http_test.py::test_http_message_sendlaterdm_v1_InputError_invalid_dm PASSED [ 67%]
http_tests/message_sendlaterdm_v1_http_test.py::test_http_message_sendlaterdm_v1_InputError_invalid_time PASSED [ 67%]
http_tests/message_sendlaterdm_v1_http_test.py::test_http_message_sendlaterdm_v1_default_Access_Error FAILED [ 67%]
http_tests/message_sendlaterdm_v1_http_test.py::test_http_message_sendlaterdm_v1_1_message PASSED [ 68%]
http_tests/message_sendlaterdm_v1_http_test.py::test_http_message_sendlaterdm_v1_send_multiple_after FAILED [ 68%]
http_tests/message_sendlaterdm_v1_http_test.py::test_http_message_sendlaterdm_v1_leave_dm_before_message_sent FAILED [ 69%]
http_tests/message_share_v1_http_test.py::test_http_message_share_v1_AccessError PASSED [ 69%]
http_tests/message_share_v1_http_test.py::test_http_message_share_v1_default_Access_Error PASSED [ 69%]
http_tests/message_share_v1_http_test.py::test_http_message_share_v1_share_one_to_channel PASSED [ 70%]
http_tests/message_share_v1_http_test.py::test_http_message_share_v1_share_one_multiple_times PASSED [ 70%]
http_tests/message_share_v1_http_test.py::test_http_message_share_v1_share_one_multiple_times_same_channel PASSED [ 70%]
http_tests/message_share_v1_http_test.py::test_http_message_share_v1_share_with_no_added_msg PASSED [ 71%]
http_tests/message_share_v1_http_test.py::test_http_message_share_v1_share_from_channel_to_dm PASSED [ 71%]
http_tests/message_share_v1_http_test.py::test_http_message_share_v1_share_dm_multiple_times PASSED [ 71%]
http_tests/message_share_v1_http_test.py::test_http_message_share_v1_share_dm_with_no_added_msg PASSED [ 72%]
http_tests/message_share_v1_http_test.py::test_http_message_share_v1_share_dm_with_no_added_msg_2_dms PASSED [ 72%]
http_tests/message_unpin_v1_http_test.py::test_http_message_unpin_v1_AccessError PASSED [ 72%]
http_tests/message_unpin_v1_http_test.py::test_http_message_unpin_v1_AccessError_dm PASSED [ 73%]
http_tests/message_unpin_v1_http_test.py::test_http_message_unpin_v1_AccessError_non_owner PASSED [ 73%]
http_tests/message_unpin_v1_http_test.py::test_http_message_unpin_v1_AccessError_dm_non_owner PASSED [ 73%]
http_tests/message_unpin_v1_http_test.py::test_http_message_unpin_v1_InputError_non_valid_id PASSED [ 74%]
http_tests/message_unpin_v1_http_test.py::test_http_message_unpin_v1_InputError_already_pinned PASSED [ 74%]
http_tests/message_unpin_v1_http_test.py::test_http_message_unpin_v1_default_Access_Error PASSED [ 75%]
http_tests/message_unpin_v1_http_test.py::test_http_message_unpin_v1_InputError_unpin_removed_msg PASSED [ 75%]
http_tests/message_unpin_v1_http_test.py::test_http_message_unpin_v1_pin_one PASSED [ 75%]
http_tests/message_unpin_v1_http_test.py::test_http_message_unpin_v1_pin_multiple PASSED [ 76%]
http_tests/message_unpin_v1_http_test.py::test_http_message_unpin_v1_pin_one_dm PASSED [ 76%]
http_tests/message_unreact_v1_http_test.py::test_unreact_v1_invalid_message_id_nonexistent_InputError PASSED [ 76%]
http_tests/message_unreact_v1_http_test.py::test_unreact_v1_invalid_react_id_InputError PASSED [ 77%]
http_tests/message_unreact_v1_http_test.py::test_unreact_v1_repeat_react_InputError PASSED [ 77%]
http_tests/message_unreact_v1_http_test.py::test_unreact_v1_invalid_message_id_inaccessible_channel_AccessError PASSED [ 77%]
http_tests/message_unreact_v1_http_test.py::test_unreact_v1_invalid_message_id_inaccessible_dm_AccessError PASSED [ 78%]
http_tests/message_unreact_v1_http_test.py::test_message_unreact_v1_default_Access_Error PASSED [ 78%]
http_tests/message_unreact_v1_http_test.py::test_message_unreact_v1_channel PASSED [ 78%]
http_tests/message_unreact_v1_http_test.py::test_message_unreact_v1_dm PASSED [ 79%]
http_tests/message_unreact_v1_http_test.py::test_message_unreact_v1_self PASSED [ 79%]
http_tests/message_unreact_v1_http_test.py::test_message_unreact_v1_different_messages FAILED [ 79%]
http_tests/message_unreact_v1_http_test.py::test_message_unreact_v1_multiple_reacts FAILED [ 80%]
http_tests/notifications_get_v1_http_test.py::test_notifications_channel_invite PASSED [ 80%]
http_tests/notifications_get_v1_http_test.py::test_notifications_dm_create PASSED [ 80%]
http_tests/notifications_get_v1_http_test.py::test_notifications_dm_invite PASSED [ 81%]
http_tests/notifications_get_v1_http_test.py::test_notifications_channel_tag FAILED [ 81%]
http_tests/notifications_get_v1_http_test.py::test_notifications_dm_tag FAILED [ 82%]
http_tests/search_http_test.py::test_search_no_channel PASSED            [ 82%]
http_tests/search_http_test.py::test_search_standard PASSED              [ 82%]
http_tests/search_http_test.py::test_search_case_sensitive PASSED        [ 83%]
http_tests/search_http_test.py::test_search_too_long PASSED              [ 83%]
http_tests/search_http_test.py::test_search_leave_channel PASSED         [ 83%]
http_tests/search_http_test.py::test_search_leave_dm PASSED              [ 84%]
http_tests/standup_active_v1_http_test.py::test_function PASSED          [ 84%]
http_tests/standup_active_v1_http_test.py::test_multiple_runs PASSED     [ 84%]
http_tests/standup_active_v1_http_test.py::test_invalid_channel_id FAILED [ 85%]
http_tests/standup_active_v1_http_test.py::test_invalid_token FAILED     [ 85%]
http_tests/standup_send_v1_http_test.py::test_function PASSED            [ 85%]
http_tests/standup_send_v1_http_test.py::test_multiple_messages PASSED   [ 86%]
http_tests/standup_send_v1_http_test.py::test_multiple_messages_from_multiple_users PASSED [ 86%]
http_tests/standup_send_v1_http_test.py::test_invalid_channel_id FAILED  [ 86%]
http_tests/standup_send_v1_http_test.py::test_too_long_message FAILED    [ 87%]
http_tests/standup_send_v1_http_test.py::test_inactive_standup FAILED    [ 87%]
http_tests/standup_send_v1_http_test.py::test_unauthorized_user FAILED   [ 88%]
http_tests/standup_send_v1_http_test.py::test_invalid_token FAILED       [ 88%]
http_tests/standup_start_v1_http_test.py::test_function PASSED           [ 88%]
http_tests/standup_start_v1_http_test.py::test_multiple_runs PASSED      [ 89%]
http_tests/standup_start_v1_http_test.py::test_invalid_channel_id FAILED [ 89%]
http_tests/standup_start_v1_http_test.py::test_active_standup FAILED     [ 89%]
http_tests/standup_start_v1_http_test.py::test_unauthorized_user FAILED  [ 90%]
http_tests/standup_start_v1_http_test.py::test_invalid_token FAILED      [ 90%]
http_tests/user_profile_http_test.py::test_user_profile FAILED           [ 90%]
http_tests/user_profile_http_test.py::test_user_profile_invalid_token FAILED [ 91%]
http_tests/user_profile_http_test.py::test_user_profile_setname FAILED   [ 91%]
http_tests/user_profile_http_test.py::test_user_profile_setname_invalid_token FAILED [ 91%]
http_tests/user_profile_http_test.py::test_user_profile_setname_invalid_name_length FAILED [ 92%]
http_tests/user_profile_http_test.py::test_user_profile_setemail FAILED  [ 92%]
http_tests/user_profile_http_test.py::test_user_profile_sethandle_v1 FAILED [ 92%]
http_tests/user_profile_http_test.py::test_users_all_v1 PASSED           [ 93%]
http_tests/user_stats_http_test.py::test_user_stats_v1_default_Access_Error PASSED [ 93%]
http_tests/user_stats_http_test.py::test_user_stats_v1_empty FAILED      [ 94%]
http_tests/user_stats_http_test.py::test_user_stats_v1_full FAILED       [ 94%]
http_tests/user_stats_http_test.py::test_user_stats_v1_all FAILED        [ 94%]
http_tests/user_stats_http_test.py::test_user_stats_v1_invite_join FAILED [ 95%]
http_tests/user_stats_http_test.py::test_user_stats_v1_active FAILED     [ 95%]
http_tests/users_stats_http_test.py::test_user_stats_v1_default_Access_Error PASSED [ 95%]
http_tests/users_stats_http_test.py::test_users_stats_v1_empty FAILED    [ 96%]
http_tests/users_stats_http_test.py::test_users_stats_v1_no_msg FAILED   [ 96%]
http_tests/users_stats_http_test.py::test_users_stats_v1_loner FAILED    [ 96%]
http_tests/users_stats_http_test.py::test_users_stats_v1_invite_join FAILED [ 97%]
http_tests/users_stats_http_test.py::test_users_stats_v1_partial_util FAILED [ 97%]
http_tests/users_stats_http_test.py::test_users_stats_v1_active FAILED   [ 97%]

=================================== FAILURES ===================================
____________________________ test_admin_user_remove ____________________________

setup_user_data = {'user1': {'auth_user_id': 27, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI3LCJsb2dpbl90aW1lIjoxNjE4OTM4...NTI1LCJzYWx0IjoiYjc5MzBlMTQtM2Y4Ny00NzQyLTllYmYtYjZiZjY5Y2U4YjIzIn0.q7-u_qvY-jfjBIz6fj3-Sq8oW2HR2OJ6-_xZluErmjM'}, ...}

    def test_admin_user_remove(setup_user_data):
        users = setup_user_data
    
        # User 1 makes channel 1
        channel_id1 = requests.post(config.url + 'channels/create/v2', json={
            'token': users['user1']['token'],
            'name': "Public Channel",
            'is_public': True,
        }).json()
    
        # User 3 joins the public channel
        requests.post(config.url + 'channel/join/v2', json={
            'token': users['user3']['token'],
            'channel_id': channel_id1['channel_id'],
        }).json()
    
        # User 1 makes User 3 an owner
        requests.post(config.url + 'channel/addowner/v1', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'u_id': users['user3']['auth_user_id']
        }).json()
    
        # User 1 sends a message
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': 'Nice day'
        }).json()
    
        # User 2 makes channel 2
        channel_id2 = requests.post(config.url + 'channels/create/v2', json={
            'token': users['user2']['token'],
            'name': "Private Channel",
            'is_public': False,
        }).json()
    
        # User 1 joins the private channel as global owner
        requests.post(config.url + 'channel/join/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id2['channel_id'],
        }).json()
    
        # User 1 sends a message
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id2['channel_id'],
            'message': 'Hello user2'
        }).json()
    
        # User 2 sends a message
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user2']['token'],
            'channel_id': channel_id2['channel_id'],
            'message': 'Hello user1'
        }).json()
    
        # User 1 creates a dm to User 2 and User 3. User 1 sends a message
        u_id_list = [users['user2'],users['user3']]
        dm_id1 = requests.post(config.url + 'dm/create/v1', json=dm_create_body(users['user1'],u_id_list)).json()
    
        requests.post(config.url + 'message/senddm/v1', json={
            'token': users['user1']['token'],
            'dm_id': dm_id1['dm_id'],
            'message': "Hi guys",
        }).json()
    
        # Set up variables to test function outputs
        user_profile_id1 = requests.get(config.url + 'user/profile/v2', params={
            'token': users['user2']['token'],
            'u_id': users['user1']['auth_user_id'],
        }).json()
        print(user_profile_id1)
    
        messages_channel_id1 = requests.get(config.url + 'channel/messages/v2', params={
            'token': users['user3']['token'],
            'channel_id': channel_id1['channel_id'],
            'start': 0
        }).json()
    
        messages_channel_id2 = requests.get(config.url + 'channel/messages/v2', params={
            'token': users['user2']['token'],
            'channel_id': channel_id2['channel_id'],
            'start': 0
        }).json()
    
        messages_dm_id1 = requests.get(config.url + 'dm/messages/v1', params={
            'token': users['user2']['token'],
            'dm_id': dm_id1['dm_id'],
            'start': 0
        }).json()
    
        # Ensure the correct output
        assert user_profile_id1['user']['name_first'] == "user1_first"
        assert messages_channel_id1['messages'][0]['message'] == "Nice day"
        assert messages_channel_id2['messages'][0]['message'] == "Hello user1"
        assert messages_channel_id2['messages'][1]['message'] == "Hello user2"
        assert messages_dm_id1['messages'][0]['message'] == "Hi guys"
    
        # Global User 1 makes User 2 Global
        requests.post(config.url + 'admin/userpermission/change/v1', json={
            'token': users['user1']['token'],
            'u_id': users['user2']['auth_user_id'],
            'permission_id': 1,
        }).json()
    
        # Global User 2 makes User 3 Global
        requests.post(config.url + 'admin/userpermission/change/v1', json={
            'token': users['user2']['token'],
            'u_id': users['user3']['auth_user_id'],
            'permission_id': 1,
        }).json()
    
        channel_details = requests.get(config.url + 'channel/details/v2', params={
            'token': users['user2']['token'],
            'channel_id': channel_id2['channel_id'],
        }).json()
        print(channel_details)
        print("\n\n")
    
        # Global User 2 removes User 1
        requests.delete(config.url + 'admin/user/remove/v1', json={
            'token': users['user2']['token'],
            'u_id': users['user1']['auth_user_id'],
        }).json()
    
        channel_details = requests.get(config.url + 'channel/details/v2', params={
            'token': users['user1']['token'],
>           'channel_id': channel_id2['channel_id'],
        }).json()

http_tests/admin_user_remove_http_test.py:280: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Invalid token</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
----------------------------- Captured stdout call -----------------------------
{'user': {'email': 'user1@email.com', 'handle_str': 'user1_firstuser1_las', 'name_first': 'user1_first', 'name_last': 'user1_last', 'profile_img_url': '', 'u_id': 27}}
{'all_members': [{'email': 'user1@email.com', 'handle_str': 'user1_firstuser1_las', 'name_first': 'user1_first', 'name_last': 'user1_last', 'profile_img_url': '', 'u_id': 27}, {'email': 'user2@email.com', 'handle_str': 'user2_firstuser2_las', 'name_first': 'user2_first', 'name_last': 'user2_last', 'profile_img_url': '', 'u_id': 28}], 'is_public': False, 'name': 'Private Channel', 'owner_members': [{'email': 'user1@email.com', 'handle_str': 'user1_firstuser1_las', 'name_first': 'user1_first', 'name_last': 'user1_last', 'profile_img_url': '', 'u_id': 27}, {'email': 'user2@email.com', 'handle_str': 'user2_firstuser2_las', 'name_first': 'user2_first', 'name_last': 'user2_last', 'profile_img_url': '', 'u_id': 28}]}



____________________________ test_admin_user_remove ____________________________

setup_user_data = {'user1': {'auth_user_id': 66, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjY2LCJsb2dpbl90aW1lIjoxNjE4OTM4...NTI2LCJzYWx0IjoiYmRhOWNkNTUtZmY1NS00ZWMwLWE0ZjctMTIyYTFkZjM4MTk4In0.gOYhW5hGRrXb1Man_WM-VIChMZcOXcFsPSxvNHKe1pQ'}, ...}

    def test_admin_user_remove(setup_user_data):
        users = setup_user_data
    
        # User 1 makes channel 1
        channel_id1 = requests.post(config.url + 'channels/create/v2', json={
            'token': users['user1']['token'],
            'name': "Public Channel",
            'is_public': True,
        }).json()
    
        # User 3 joins the public channel
        requests.post(config.url + 'channel/join/v2', json={
            'token': users['user3']['token'],
            'channel_id': channel_id1['channel_id'],
        }).json()
    
        # User 1 makes User 3 an owner
        requests.post(config.url + 'channel/addowner/v1', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'u_id': users['user3']['auth_user_id']
        }).json()
    
        # User 1 sends a message
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': 'Nice day'
        }).json()
    
        # User 2 makes channel 2
        channel_id2 = requests.post(config.url + 'channels/create/v2', json={
            'token': users['user2']['token'],
            'name': "Private Channel",
            'is_public': False,
        }).json()
    
        # User 1 joins the private channel as global owner
        requests.post(config.url + 'channel/join/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id2['channel_id'],
        }).json()
    
        # User 1 sends a message
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id2['channel_id'],
            'message': 'Hello user2'
        }).json()
    
        # User 2 sends a message
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user2']['token'],
            'channel_id': channel_id2['channel_id'],
            'message': 'Hello user1'
        }).json()
    
        # User 1 creates a dm to User 2 and User 3. User 1 sends a message
        u_id_list = [users['user2'],users['user3']]
        dm_id1 = requests.post(config.url + 'dm/create/v1', json=dm_create_body(users['user1'],u_id_list)).json()
    
        requests.post(config.url + 'message/senddm/v1', json={
            'token': users['user1']['token'],
            'dm_id': dm_id1['dm_id'],
            'message': "Hi guys",
        }).json()
    
        # Set up variables to test function outputs
        user_profile_id1 = requests.get(config.url + 'user/profile/v2', params={
            'token': users['user2']['token'],
            'u_id': users['user1']['auth_user_id'],
        }).json()
        print(user_profile_id1)
    
        messages_channel_id1 = requests.get(config.url + 'channel/messages/v2', params={
            'token': users['user3']['token'],
            'channel_id': channel_id1['channel_id'],
            'start': 0
        }).json()
    
        messages_channel_id2 = requests.get(config.url + 'channel/messages/v2', params={
            'token': users['user2']['token'],
            'channel_id': channel_id2['channel_id'],
            'start': 0
        }).json()
    
        messages_dm_id1 = requests.get(config.url + 'dm/messages/v1', params={
            'token': users['user2']['token'],
            'dm_id': dm_id1['dm_id'],
            'start': 0
        }).json()
    
        # Ensure the correct output
        assert user_profile_id1['user']['name_first'] == "user1_first"
        assert messages_channel_id1['messages'][0]['message'] == "Nice day"
        assert messages_channel_id2['messages'][0]['message'] == "Hello user1"
        assert messages_channel_id2['messages'][1]['message'] == "Hello user2"
        assert messages_dm_id1['messages'][0]['message'] == "Hi guys"
    
        # Global User 1 makes User 2 Global
        requests.post(config.url + 'admin/userpermission/change/v1', json={
            'token': users['user1']['token'],
            'u_id': users['user2']['auth_user_id'],
            'permission_id': 1,
        }).json()
    
        # Global User 2 makes User 3 Global
        requests.post(config.url + 'admin/userpermission/change/v1', json={
            'token': users['user2']['token'],
            'u_id': users['user3']['auth_user_id'],
            'permission_id': 1,
        }).json()
    
        channel_details = requests.get(config.url + 'channel/details/v2', params={
            'token': users['user2']['token'],
            'channel_id': channel_id2['channel_id'],
        }).json()
        print(channel_details)
        print("\n\n")
    
        # Global User 2 removes User 1
        requests.delete(config.url + 'admin/user/remove/v1', json={
            'token': users['user2']['token'],
            'u_id': users['user1']['auth_user_id'],
        }).json()
    
        channel_details = requests.get(config.url + 'channel/details/v2', params={
            'token': users['user1']['token'],
>           'channel_id': channel_id2['channel_id'],
        }).json()

http_tests/admin_user_remove_http_test.py:280: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Invalid token</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
----------------------------- Captured stdout call -----------------------------
{'user': {'email': 'user1@email.com', 'handle_str': 'user1_firstuser1_las', 'name_first': 'user1_first', 'name_last': 'user1_last', 'profile_img_url': '', 'u_id': 66}}
{'all_members': [{'email': 'user1@email.com', 'handle_str': 'user1_firstuser1_las', 'name_first': 'user1_first', 'name_last': 'user1_last', 'profile_img_url': '', 'u_id': 66}, {'email': 'user2@email.com', 'handle_str': 'user2_firstuser2_las', 'name_first': 'user2_first', 'name_last': 'user2_last', 'profile_img_url': '', 'u_id': 67}], 'is_public': False, 'name': 'Private Channel', 'owner_members': [{'email': 'user1@email.com', 'handle_str': 'user1_firstuser1_las', 'name_first': 'user1_first', 'name_last': 'user1_last', 'profile_img_url': '', 'u_id': 66}, {'email': 'user2@email.com', 'handle_str': 'user2_firstuser2_las', 'name_first': 'user2_first', 'name_last': 'user2_last', 'profile_img_url': '', 'u_id': 67}]}



_________________ test_admin_userpermission_change_invalid_uid _________________

setup_user_data = {'user1': {'auth_user_id': 83, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjgzLCJsb2dpbl90aW1lIjoxNjE4OTM4...NTI2LCJzYWx0IjoiODJlODZjYmItOWVkMC00YWNkLThiZGItZDA0MTg1YWYyNTNlIn0.FpWU6OjJ8_0m0rqsYckZQ0Q6CLUdH6tRteBlZOAr_jI'}, ...}

    def test_admin_userpermission_change_invalid_uid(setup_user_data):
        users = setup_user_data
    
        # Ensure InputError
>       assert requests.post(config.url + 'admin/userpermission/change/v1', json={
            'token': users['user1']['token'],
            'u_id': "Invalid u_id",
            'permission_id': 2,
        }).status_code == 400
E       assert 500 == 400
E         +500
E         -400

http_tests/admin_userpermission_change_http_test.py:40: AssertionError
_________________________ test_auth_login_api_invalid __________________________

    def test_auth_login_api_invalid():
    	# register
    	response_register = requests.post(config.url + 'auth/register/v2', json={'email':'exampleUserEmail@email.com', 'password':'ExamplePassword', 'name_first':'FIRSTNAME', 'name_last':'LASTNAME'})
    	json_data_register = json.loads(response_register.text)
    	assert json_data_register['token']
    
    	# if credentials don't match, handled by customized exception handler
    	response_login = requests.post(config.url + 'auth/login/v2', json={'email':'exampleUserEmail@email.com', 'password':'wrongpassword'})
>   	json_data_login = json.loads(response_login.text)

http_tests/auth_http_test.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.7/json/__init__.py:348: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.7/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7ff332af75f8>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>400 Bad Request</title>\n<h1>Bad Request</h1>\n<p>Email or password is incorrect</p>\n'
idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.7/json/decoder.py:355: JSONDecodeError
_____________________________ test_auth_logout_api _____________________________

    def test_auth_logout_api():
    	# register
    	response_register = requests.post(config.url + 'auth/register/v2', json={'email':'exampleUserEmail@email.com', 'password':'ExamplePassword', 'name_first':'FIRSTNAME', 'name_last':'LASTNAME'})
    	json_data_register = json.loads(response_register.text)
    	token_kept_by_client = json_data_register['token']
    
    	# logout
    	response_logout1 = requests.post(config.url + 'auth/logout/v1', json={'token':token_kept_by_client})
    	json_data_logout1 = json.loads(response_logout1.text)
    	assert json_data_logout1['is_success'] == True
    
    	# logout again with the same token, blacklisted since we've already logged out
    	response_logout2 = requests.post(config.url + 'auth/logout/v1', json={'token':token_kept_by_client})
>   	json_data_logout2 = json.loads(response_logout2.text)

http_tests/auth_http_test.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.7/json/__init__.py:348: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.7/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7ff332af75f8>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Not logged in bro</p>\n'
idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.7/json/decoder.py:355: JSONDecodeError
_____________________ test_channel_join_owner_input_error ______________________

setup_user_data = {'user1': {'auth_user_id': 132, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjEzMiwibG9naW5fdGltZSI6MTYxODk...DUyNiwic2FsdCI6IjU0MGE2NmYxLWRjZGEtNGVmMi04ODMwLTJjNjMzNmU3NDgwYiJ9.T2nqUrBZLoFnR-Mm6M3B0iN8Yvlk_ZgEpwuE0aC7Pt4'}, ...}

    def test_channel_join_owner_input_error(setup_user_data):
        users = setup_user_data
    
        # Creating a public channel
        channel_id = requests.post(config.url + 'channels/create/v2', json={
            'token': users['user1']['token'],
            'name': 'Public',
            'is_public': True,
        }).json()
    
        # Join user2
        requests.post(config.url + 'channel/join/v2', json={
            'token': users['user2']['token'],
            'channel_id': channel_id['channel_id'],
        }).json()
    
        # Add user2 to onwer pool
        requests.post(config.url + 'channel/addowner/v1', json={
            'token': users['user1']['token'],
            'channel_id': channel_id['channel_id'],
            'u_id': users['user2']['auth_user_id'],
        }).json()
    
        # Get details
        channel_details = requests.get(config.url + 'channel/details/v2', params={
            'token': users['user1']['token'],
            'channel_id': channel_id['channel_id'],
        }).json()
    
>       assert channel_details == {
            'name': 'Public',
            'is_public': True,
            'owner_members': [
                {
                    'u_id': users['user1']['auth_user_id'],
                    'email': 'user1@email.com',
                    'name_first': 'user1_first',
                    'name_last': 'user1_last',
                    'handle_str': 'user1_firstuser1_las'
                },
                {
                    'u_id': users['user2']['auth_user_id'],
                    'email': 'user2@email.com',
                    'name_first': 'user2_first',
                    'name_last': 'user2_last',
                    'handle_str': 'user2_firstuser2_las'
                }
            ],
            'all_members': [
                {
                    'u_id': users['user1']['auth_user_id'],
                    'email': 'user1@email.com',
                    'name_first': 'user1_first',
                    'name_last': 'user1_last',
                    'handle_str': 'user1_firstuser1_las'
                },
                {
                    'u_id': users['user2']['auth_user_id'],
                    'email': 'user2@email.com',
                    'name_first': 'user2_first',
                    'name_last': 'user2_last',
                    'handle_str': 'user2_firstuser2_las'
                }
            ],
        }
E       AssertionError: assert {'all_members': [{'email': 'user2@email.com',\n                  'handle_str': 'user2_firstuser2_las',\n                  'name_first': 'user2_first',\n                  'name_last': 'user2_last',\n                  'profile_img_url': '',\n                  'u_id': 133},\n                 {'email': 'user1@email.com',\n                  'handle_str': 'user1_firstuser1_las',\n                  'name_first': 'user1_first',\n                  'name_last': 'user1_last',\n                  'profile_img_url': '',\n                  'u_id': 132}],\n 'is_public': True,\n 'name': 'Public',\n 'owner_members': [{'email': 'user2@email.com',\n                    'handle_str': 'user2_firstuser2_las',\n                    'name_first': 'user2_first',\n                    'name_last': 'user2_last',\n                    'profile_img_url': '',\n                    'u_id': 133},\n                   {'email': 'user1@email.com',\n                    'handle_str': 'user1_firstuser1_las',\n                    'name_first': 'user1_first',\n                    'name_last': 'user1_last',\n                    'profile_img_url': '',\n                    'u_id': 132}]} == {'all_members': [{'email': 'user1@email.com',\n                  'handle_str': 'user1_firstuser1_las',\n                  'name_first': 'user1_first',\n                  'name_last': 'user1_last',\n                  'u_id': 132},\n                 {'email': 'user2@email.com',\n                  'handle_str': 'user2_firstuser2_las',\n                  'name_first': 'user2_first',\n                  'name_last': 'user2_last',\n                  'u_id': 133}],\n 'is_public': True,\n 'name': 'Public',\n 'owner_members': [{'email': 'user1@email.com',\n                    'handle_str': 'user1_firstuser1_las',\n                    'name_first': 'user1_first',\n                    'name_last': 'user1_last',\n                    'u_id': 132},\n                   {'email': 'user2@email.com',\n                    'handle_str': 'user2_firstuser2_las',\n                    'name_first': 'user2_first',\n                    'name_last': 'user2_last',\n                    'u_id': 133}]}
E         Common items:
E         {'is_public': True, 'name': 'Public'}
E         Differing items:
E         {'all_members': [{'email': 'user2@email.com', 'handle_str': 'user2_firstuser2_las', 'name_first': 'user2_first', 'name...'user1@email.com', 'handle_str': 'user1_firstuser1_las', 'name_first': 'user1_first', 'name_last': 'user1_last', ...}]} != {'all_members': [{'email': 'user1@email.com', 'handle_str': 'user1_firstuser1_las', 'name_first': 'user1_first', 'name...'user2@email.com', 'handle_str': 'user2_firstuser2_las', 'name_first': 'user2_first', 'name_last': 'user2_last', ...}]}
E         {'owner_members': [{'email': 'user2@email.com', 'handle_str': 'user2_firstuser2_las', 'name_first': 'user2_first', 'na...'user1@email.com', 'handle_str': 'user1_firstuser1_las', 'name_first': 'user1_first', 'name_last': 'user1_last', ...}]} != {'owner_members': [{'email': 'user1@email.com', 'handle_str': 'user1_firstuser1_las', 'name_first': 'user1_first', 'na...'user2@email.com', 'handle_str': 'user2_firstuser2_las', 'name_first': 'user2_first', 'name_last': 'user2_last', ...}]}
E         Full diff:
E           {
E         -  'all_members': [{'email': 'user1@email.com',
E         ?                                 ^
E         +  'all_members': [{'email': 'user2@email.com',
E         ?                                 ^
E         +                   'handle_str': 'user2_firstuser2_las',
E         +                   'name_first': 'user2_first',
E         +                   'name_last': 'user2_last',
E         +                   'profile_img_url': '',
E         +                   'u_id': 133},
E         +                  {'email': 'user1@email.com',
E                             'handle_str': 'user1_firstuser1_las',
E                             'name_first': 'user1_first',
E                             'name_last': 'user1_last',
E         +                   'profile_img_url': '',
E         -                   'u_id': 132},
E         +                   'u_id': 132}],
E         ?                               +
E         -                  {'email': 'user2@email.com',
E         -                   'handle_str': 'user2_firstuser2_las',
E         -                   'name_first': 'user2_first',
E         -                   'name_last': 'user2_last',
E         -                   'u_id': 133}],
E            'is_public': True,
E            'name': 'Public',
E         -  'owner_members': [{'email': 'user1@email.com',
E         ?                                   ^
E         +  'owner_members': [{'email': 'user2@email.com',
E         ?                                   ^
E         +                     'handle_str': 'user2_firstuser2_las',
E         +                     'name_first': 'user2_first',
E         +                     'name_last': 'user2_last',
E         +                     'profile_img_url': '',
E         +                     'u_id': 133},
E         +                    {'email': 'user1@email.com',
E                               'handle_str': 'user1_firstuser1_las',
E                               'name_first': 'user1_first',
E                               'name_last': 'user1_last',
E         +                     'profile_img_url': '',
E         -                     'u_id': 132},
E         +                     'u_id': 132}],
E         ?                                 +
E         -                    {'email': 'user2@email.com',
E         -                     'handle_str': 'user2_firstuser2_las',
E         -                     'name_first': 'user2_first',
E         -                     'name_last': 'user2_last',
E         -                     'u_id': 133}],
E           }

http_tests/channel_addowner_v1_http_test.py:109: AssertionError
_____________________________ test_addowner_dreams _____________________________

setup_user_data = {'user1': {'auth_user_id': 138, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjEzOCwibG9naW5fdGltZSI6MTYxODk...DUyNiwic2FsdCI6IjE3NjFkMjE4LTNmNGItNDg2Ni05YjQ2LWM3ZDQzYzZhYmRjOCJ9.2dry2ZFK1WBLtR4_litNebcxRfGEaRhcOF7_tRwPonY'}, ...}

    def test_addowner_dreams(setup_user_data):
        users = setup_user_data
    
        # Creating a public channel
        channel_id = requests.post(config.url + 'channels/create/v2', json={
            'token': users['user2']['token'],
            'name': 'Public',
            'is_public': True,
        }).json()
    
        # Join user3
        requests.post(config.url + 'channel/join/v2', json={
            'token': users['user3']['token'],
            'channel_id': channel_id['channel_id'],
        }).json()
    
        # Add user2 to onwer pool as dreams owner
        requests.post(config.url + 'channel/addowner/v1', json={
            'token': users['user1']['token'],
            'channel_id': channel_id['channel_id'],
            'u_id': users['user3']['auth_user_id'],
        }).json()
    
        # Get details
        channel_details = requests.get(config.url + 'channel/details/v2', params={
            'token': users['user2']['token'],
            'channel_id': channel_id['channel_id'],
        }).json()
    
>       assert channel_details == {
            'name': 'Public',
            'is_public': True,
            'owner_members': [
                {
                    'u_id': users['user2']['auth_user_id'],
                    'email': 'user2@email.com',
                    'name_first': 'user2_first',
                    'name_last': 'user2_last',
                    'handle_str': 'user2_firstuser2_las'
                },
                {
                    'u_id': users['user3']['auth_user_id'],
                    'email': 'user3@email.com',
                    'name_first': 'user3_first',
                    'name_last': 'user3_last',
                    'handle_str': 'user3_firstuser3_las'
                }
            ],
            'all_members': [
                {
                    'u_id': users['user2']['auth_user_id'],
                    'email': 'user2@email.com',
                    'name_first': 'user2_first',
                    'name_last': 'user2_last',
                    'handle_str': 'user2_firstuser2_las'
                },
                {
                    'u_id': users['user3']['auth_user_id'],
                    'email': 'user3@email.com',
                    'name_first': 'user3_first',
                    'name_last': 'user3_last',
                    'handle_str': 'user3_firstuser3_las'
                }
            ],
        }
E       AssertionError: assert {'all_members': [{'email': 'user3@email.com',\n                  'handle_str': 'user3_firstuser3_las',\n                  'name_first': 'user3_first',\n                  'name_last': 'user3_last',\n                  'profile_img_url': '',\n                  'u_id': 140},\n                 {'email': 'user2@email.com',\n                  'handle_str': 'user2_firstuser2_las',\n                  'name_first': 'user2_first',\n                  'name_last': 'user2_last',\n                  'profile_img_url': '',\n                  'u_id': 139}],\n 'is_public': True,\n 'name': 'Public',\n 'owner_members': [{'email': 'user3@email.com',\n                    'handle_str': 'user3_firstuser3_las',\n                    'name_first': 'user3_first',\n                    'name_last': 'user3_last',\n                    'profile_img_url': '',\n                    'u_id': 140},\n                   {'email': 'user2@email.com',\n                    'handle_str': 'user2_firstuser2_las',\n                    'name_first': 'user2_first',\n                    'name_last': 'user2_last',\n                    'profile_img_url': '',\n                    'u_id': 139}]} == {'all_members': [{'email': 'user2@email.com',\n                  'handle_str': 'user2_firstuser2_las',\n                  'name_first': 'user2_first',\n                  'name_last': 'user2_last',\n                  'u_id': 139},\n                 {'email': 'user3@email.com',\n                  'handle_str': 'user3_firstuser3_las',\n                  'name_first': 'user3_first',\n                  'name_last': 'user3_last',\n                  'u_id': 140}],\n 'is_public': True,\n 'name': 'Public',\n 'owner_members': [{'email': 'user2@email.com',\n                    'handle_str': 'user2_firstuser2_las',\n                    'name_first': 'user2_first',\n                    'name_last': 'user2_last',\n                    'u_id': 139},\n                   {'email': 'user3@email.com',\n                    'handle_str': 'user3_firstuser3_las',\n                    'name_first': 'user3_first',\n                    'name_last': 'user3_last',\n                    'u_id': 140}]}
E         Common items:
E         {'is_public': True, 'name': 'Public'}
E         Differing items:
E         {'all_members': [{'email': 'user3@email.com', 'handle_str': 'user3_firstuser3_las', 'name_first': 'user3_first', 'name...'user2@email.com', 'handle_str': 'user2_firstuser2_las', 'name_first': 'user2_first', 'name_last': 'user2_last', ...}]} != {'all_members': [{'email': 'user2@email.com', 'handle_str': 'user2_firstuser2_las', 'name_first': 'user2_first', 'name...'user3@email.com', 'handle_str': 'user3_firstuser3_las', 'name_first': 'user3_first', 'name_last': 'user3_last', ...}]}
E         {'owner_members': [{'email': 'user3@email.com', 'handle_str': 'user3_firstuser3_las', 'name_first': 'user3_first', 'na...'user2@email.com', 'handle_str': 'user2_firstuser2_las', 'name_first': 'user2_first', 'name_last': 'user2_last', ...}]} != {'owner_members': [{'email': 'user2@email.com', 'handle_str': 'user2_firstuser2_las', 'name_first': 'user2_first', 'na...'user3@email.com', 'handle_str': 'user3_firstuser3_las', 'name_first': 'user3_first', 'name_last': 'user3_last', ...}]}
E         Full diff:
E           {
E         -  'all_members': [{'email': 'user2@email.com',
E         ?                                 ^
E         +  'all_members': [{'email': 'user3@email.com',
E         ?                                 ^
E         +                   'handle_str': 'user3_firstuser3_las',
E         +                   'name_first': 'user3_first',
E         +                   'name_last': 'user3_last',
E         +                   'profile_img_url': '',
E         +                   'u_id': 140},
E         +                  {'email': 'user2@email.com',
E                             'handle_str': 'user2_firstuser2_las',
E                             'name_first': 'user2_first',
E                             'name_last': 'user2_last',
E         +                   'profile_img_url': '',
E         -                   'u_id': 139},
E         +                   'u_id': 139}],
E         ?                               +
E         -                  {'email': 'user3@email.com',
E         -                   'handle_str': 'user3_firstuser3_las',
E         -                   'name_first': 'user3_first',
E         -                   'name_last': 'user3_last',
E         -                   'u_id': 140}],
E            'is_public': True,
E            'name': 'Public',
E         -  'owner_members': [{'email': 'user2@email.com',
E         ?                                   ^
E         +  'owner_members': [{'email': 'user3@email.com',
E         ?                                   ^
E         +                     'handle_str': 'user3_firstuser3_las',
E         +                     'name_first': 'user3_first',
E         +                     'name_last': 'user3_last',
E         +                     'profile_img_url': '',
E         +                     'u_id': 140},
E         +                    {'email': 'user2@email.com',
E                               'handle_str': 'user2_firstuser2_las',
E                               'name_first': 'user2_first',
E                               'name_last': 'user2_last',
E         +                     'profile_img_url': '',
E         -                     'u_id': 139},
E         +                     'u_id': 139}],
E         ?                                 +
E         -                    {'email': 'user3@email.com',
E         -                     'handle_str': 'user3_firstuser3_las',
E         -                     'name_first': 'user3_first',
E         -                     'name_last': 'user3_last',
E         -                     'u_id': 140}],
E           }

http_tests/channel_addowner_v1_http_test.py:177: AssertionError
________________________________ test_function _________________________________

    def test_function():
        requests.delete(f"{url}clear/v1")
    
        a_u_id0 = requests.post(f"{url}auth/register/v2", json=user_body(0))
        user0 = a_u_id0.json()
    
        a_u_id1 = requests.post(f"{url}auth/register/v2", json=user_body(1))
        user1 = a_u_id1.json()
    
        ch_id0 = requests.post(f"{url}channels/create/v2", json=channel_create_body(user0, 0, True))
        channel0 = ch_id0.json()
    
        requests.post(f"{url}channel/invite/v2", json=channel_invite_body(user0, channel0, user1))
    
        payload = requests.get(f"{url}channel/details/v2", params=channel_details_body(user0, channel0))
        channel_details = payload.json()
    
>       assert channel_details == {
            'name': 'channel0',
            'is_public': True,
            'owner_members': [
                {
                    'u_id': user0['auth_user_id'],
                    'email': 'example0@hotmail.com',
                    'name_first': 'first_name0',
                    'name_last': 'last_name0',
                    'handle_str': 'first_name0last_name'
                }
            ],
            'all_members': [
                {
                    'u_id': user0['auth_user_id'],
                    'email': 'example0@hotmail.com',
                    'name_first': 'first_name0',
                    'name_last': 'last_name0',
                    'handle_str': 'first_name0last_name'
                },
                {
                    'u_id': user1['auth_user_id'],
                    'email': 'example1@hotmail.com',
                    'name_first': 'first_name1',
                    'name_last': 'last_name1',
                    'handle_str': 'first_name1last_name'
                }
            ],
        }
E       AssertionError: assert {'all_members': [{'email': 'example0@hotmail.com',\n                  'handle_str': 'first_name0last_name',\n                  'name_first': 'first_name0',\n                  'name_last': 'last_name0',\n                  'profile_img_url': '',\n                  'u_id': 144},\n                 {'email': 'example1@hotmail.com',\n                  'handle_str': 'first_name1last_name',\n                  'name_first': 'first_name1',\n                  'name_last': 'last_name1',\n                  'profile_img_url': '',\n                  'u_id': 145}],\n 'is_public': True,\n 'name': 'channel0',\n 'owner_members': [{'email': 'example0@hotmail.com',\n                    'handle_str': 'first_name0last_name',\n                    'name_first': 'first_name0',\n                    'name_last': 'last_name0',\n                    'profile_img_url': '',\n                    'u_id': 144}]} == {'all_members': [{'email': 'example0@hotmail.com',\n                  'handle_str': 'first_name0last_name',\n                  'name_first': 'first_name0',\n                  'name_last': 'last_name0',\n                  'u_id': 144},\n                 {'email': 'example1@hotmail.com',\n                  'handle_str': 'first_name1last_name',\n                  'name_first': 'first_name1',\n                  'name_last': 'last_name1',\n                  'u_id': 145}],\n 'is_public': True,\n 'name': 'channel0',\n 'owner_members': [{'email': 'example0@hotmail.com',\n                    'handle_str': 'first_name0last_name',\n                    'name_first': 'first_name0',\n                    'name_last': 'last_name0',\n                    'u_id': 144}]}
E         Common items:
E         {'is_public': True, 'name': 'channel0'}
E         Differing items:
E         {'all_members': [{'email': 'example0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_name0', ...ple1@hotmail.com', 'handle_str': 'first_name1last_name', 'name_first': 'first_name1', 'name_last': 'last_name1', ...}]} != {'all_members': [{'email': 'example0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_name0', ...ple1@hotmail.com', 'handle_str': 'first_name1last_name', 'name_first': 'first_name1', 'name_last': 'last_name1', ...}]}
E         {'owner_members': [{'email': 'example0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_name0', 'name_last': 'last_name0', ...}]} != {'owner_members': [{'email': 'example0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_name0', 'name_last': 'last_name0', ...}]}
E         Full diff:
E           {
E            'all_members': [{'email': 'example0@hotmail.com',
E                             'handle_str': 'first_name0last_name',
E                             'name_first': 'first_name0',
E                             'name_last': 'last_name0',
E         +                   'profile_img_url': '',
E                             'u_id': 144},
E                            {'email': 'example1@hotmail.com',
E                             'handle_str': 'first_name1last_name',
E                             'name_first': 'first_name1',
E                             'name_last': 'last_name1',
E         +                   'profile_img_url': '',
E                             'u_id': 145}],
E            'is_public': True,
E            'name': 'channel0',
E            'owner_members': [{'email': 'example0@hotmail.com',
E                               'handle_str': 'first_name0last_name',
E                               'name_first': 'first_name0',
E                               'name_last': 'last_name0',
E         +                     'profile_img_url': '',
E                               'u_id': 144}],
E           }

http_tests/channel_details_v2_http_test.py:59: AssertionError
________________________________ test_multiple _________________________________

    def test_multiple():
        requests.delete(f"{url}clear/v1")
    
        users = []
        for i in range(10):
            a_u_id = requests.post(f"{url}auth/register/v2", json=user_body(i))
            users.append(a_u_id.json())
    
        ch_id0 = requests.post(f"{url}channels/create/v2", json=channel_create_body(users[0], 0, True))
        channel0 = ch_id0.json()
    
        for i in range(1,10):
            requests.post(f"{url}channel/invite/v2", json=channel_invite_body(users[0], channel0, users[i]))
    
        payload = requests.get(f"{url}channel/details/v2", params=channel_details_body(users[0], channel0))
        channel_details = payload.json()
    
>       assert channel_details == {
            'name': 'channel0',
            'is_public': True,
            'owner_members': [
                {
                    'u_id': users[0]['auth_user_id'],
                    'email': 'example0@hotmail.com',
                    'name_first': 'first_name0',
                    'name_last': 'last_name0',
                    'handle_str': 'first_name0last_name'
                }
            ],
            'all_members': [
                {
                    'u_id': users[0]['auth_user_id'],
                    'email': 'example0@hotmail.com',
                    'name_first': 'first_name0',
                    'name_last': 'last_name0',
                    'handle_str': 'first_name0last_name'
                },
                {
                    'u_id': users[1]['auth_user_id'],
                    'email': 'example1@hotmail.com',
                    'name_first': 'first_name1',
                    'name_last': 'last_name1',
                    'handle_str': 'first_name1last_name'
                },
                {
                    'u_id': users[2]['auth_user_id'],
                    'email': 'example2@hotmail.com',
                    'name_first': 'first_name2',
                    'name_last': 'last_name2',
                    'handle_str': 'first_name2last_name'
                },
                {
                    'u_id': users[3]['auth_user_id'],
                    'email': 'example3@hotmail.com',
                    'name_first': 'first_name3',
                    'name_last': 'last_name3',
                    'handle_str': 'first_name3last_name'
                },
                {
                    'u_id': users[4]['auth_user_id'],
                    'email': 'example4@hotmail.com',
                    'name_first': 'first_name4',
                    'name_last': 'last_name4',
                    'handle_str': 'first_name4last_name'
                },
                {
                    'u_id': users[5]['auth_user_id'],
                    'email': 'example5@hotmail.com',
                    'name_first': 'first_name5',
                    'name_last': 'last_name5',
                    'handle_str': 'first_name5last_name'
                },
                {
                    'u_id': users[6]['auth_user_id'],
                    'email': 'example6@hotmail.com',
                    'name_first': 'first_name6',
                    'name_last': 'last_name6',
                    'handle_str': 'first_name6last_name'
                },
                {
                    'u_id': users[7]['auth_user_id'],
                    'email': 'example7@hotmail.com',
                    'name_first': 'first_name7',
                    'name_last': 'last_name7',
                    'handle_str': 'first_name7last_name'
                },
                {
                    'u_id': users[8]['auth_user_id'],
                    'email': 'example8@hotmail.com',
                    'name_first': 'first_name8',
                    'name_last': 'last_name8',
                    'handle_str': 'first_name8last_name'
                },
                {
                    'u_id': users[9]['auth_user_id'],
                    'email': 'example9@hotmail.com',
                    'name_first': 'first_name9',
                    'name_last': 'last_name9',
                    'handle_str': 'first_name9last_name'
                }
            ],
        }
E       AssertionError: assert {'all_members': [{'email': 'example4@hotmail.com',\n                  'handle_str': 'first_name4last_name',\n                  'name_first': 'first_name4',\n                  'name_last': 'last_name4',\n                  'profile_img_url': '',\n                  'u_id': 151},\n                 {'email': 'example3@hotmail.com',\n                  'handle_str': 'first_name3last_name',\n                  'name_first': 'first_name3',\n                  'name_last': 'last_name3',\n                  'profile_img_url': '',\n                  'u_id': 150},\n                 {'email': 'example2@hotmail.com',\n                  'handle_str': 'first_name2last_name',\n                  'name_first': 'first_name2',\n                  'name_last': 'last_name2',\n                  'profile_img_url': '',\n                  'u_id': 149},\n                 {'email': 'example7@hotmail.com',\n                  'handle_str': 'first_name7last_name',\n                  'name_first': 'first_name7',\n                  'name_last': 'last_name7',\n                  'profile_img_url': '',\n                  'u_id': 154},\n                 {'email': 'example8@hotmail.com',\n                  'handle_str': 'first_name8last_name',\n                  'name_first': 'first_name8',\n                  'name_last': 'last_name8',\n                  'profile_img_url': '',\n                  'u_id': 155},\n                 {'email': 'example9@hotmail.com',\n                  'handle_str': 'first_name9last_name',\n                  'name_first': 'first_name9',\n                  'name_last': 'last_name9',\n                  'profile_img_url': '',\n                  'u_id': 156},\n                 {'email': 'example1@hotmail.com',\n                  'handle_str': 'first_name1last_name',\n                  'name_first': 'first_name1',\n                  'name_last': 'last_name1',\n                  'profile_img_url': '',\n                  'u_id': 148},\n                 {'email': 'example0@hotmail.com',\n                  'handle_str': 'first_name0last_name',\n                  'name_first': 'first_name0',\n                  'name_last': 'last_name0',\n                  'profile_img_url': '',\n                  'u_id': 147},\n                 {'email': 'example5@hotmail.com',\n                  'handle_str': 'first_name5last_name',\n                  'name_first': 'first_name5',\n                  'name_last': 'last_name5',\n                  'profile_img_url': '',\n                  'u_id': 152},\n                 {'email': 'example6@hotmail.com',\n                  'handle_str': 'first_name6last_name',\n                  'name_first': 'first_name6',\n                  'name_last': 'last_name6',\n                  'profile_img_url': '',\n                  'u_id': 153}],\n 'is_public': True,\n 'name': 'channel0',\n 'owner_members': [{'email': 'example0@hotmail.com',\n                    'handle_str': 'first_name0last_name',\n                    'name_first': 'first_name0',\n                    'name_last': 'last_name0',\n                    'profile_img_url': '',\n                    'u_id': 147}]} == {'all_members': [{'email': 'example0@hotmail.com',\n                  'handle_str': 'first_name0last_name',\n                  'name_first': 'first_name0',\n                  'name_last': 'last_name0',\n                  'u_id': 147},\n                 {'email': 'example1@hotmail.com',\n                  'handle_str': 'first_name1last_name',\n                  'name_first': 'first_name1',\n                  'name_last': 'last_name1',\n                  'u_id': 148},\n                 {'email': 'example2@hotmail.com',\n                  'handle_str': 'first_name2last_name',\n                  'name_first': 'first_name2',\n                  'name_last': 'last_name2',\n                  'u_id': 149},\n                 {'email': 'example3@hotmail.com',\n                  'handle_str': 'first_name3last_name',\n                  'name_first': 'first_name3',\n                  'name_last': 'last_name3',\n                  'u_id': 150},\n                 {'email': 'example4@hotmail.com',\n                  'handle_str': 'first_name4last_name',\n                  'name_first': 'first_name4',\n                  'name_last': 'last_name4',\n                  'u_id': 151},\n                 {'email': 'example5@hotmail.com',\n                  'handle_str': 'first_name5last_name',\n                  'name_first': 'first_name5',\n                  'name_last': 'last_name5',\n                  'u_id': 152},\n                 {'email': 'example6@hotmail.com',\n                  'handle_str': 'first_name6last_name',\n                  'name_first': 'first_name6',\n                  'name_last': 'last_name6',\n                  'u_id': 153},\n                 {'email': 'example7@hotmail.com',\n                  'handle_str': 'first_name7last_name',\n                  'name_first': 'first_name7',\n                  'name_last': 'last_name7',\n                  'u_id': 154},\n                 {'email': 'example8@hotmail.com',\n                  'handle_str': 'first_name8last_name',\n                  'name_first': 'first_name8',\n                  'name_last': 'last_name8',\n                  'u_id': 155},\n                 {'email': 'example9@hotmail.com',\n                  'handle_str': 'first_name9last_name',\n                  'name_first': 'first_name9',\n                  'name_last': 'last_name9',\n                  'u_id': 156}],\n 'is_public': True,\n 'name': 'channel0',\n 'owner_members': [{'email': 'example0@hotmail.com',\n                    'handle_str': 'first_name0last_name',\n                    'name_first': 'first_name0',\n                    'name_last': 'last_name0',\n                    'u_id': 147}]}
E         Common items:
E         {'is_public': True, 'name': 'channel0'}
E         Differing items:
E         {'all_members': [{'email': 'example4@hotmail.com', 'handle_str': 'first_name4last_name', 'name_first': 'first_name4', ...hotmail.com', 'handle_str': 'first_name9last_name', 'name_first': 'first_name9', 'name_last': 'last_name9', ...}, ...]} != {'all_members': [{'email': 'example0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_name0', ...hotmail.com', 'handle_str': 'first_name5last_name', 'name_first': 'first_name5', 'name_last': 'last_name5', ...}, ...]}
E         {'owner_members': [{'email': 'example0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_name0', 'name_last': 'last_name0', ...}]} != {'owner_members': [{'email': 'example0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_name0', 'name_last': 'last_name0', ...}]}
E         Full diff:
E           {
E         -  'all_members': [{'email': 'example0@hotmail.com',
E         ?                                    ^
E         +  'all_members': [{'email': 'example4@hotmail.com',
E         ?                                    ^
E         -                   'handle_str': 'first_name0last_name',
E         ?                                            ^
E         +                   'handle_str': 'first_name4last_name',
E         ?                                            ^
E         -                   'name_first': 'first_name0',
E         ?                                            ^
E         +                   'name_first': 'first_name4',
E         ?                                            ^
E         -                   'name_last': 'last_name0',
E         ?                                          ^
E         +                   'name_last': 'last_name4',
E         ?                                          ^
E         +                   'profile_img_url': '',
E         +                   'u_id': 151},
E         +                  {'email': 'example3@hotmail.com',
E         +                   'handle_str': 'first_name3last_name',
E         +                   'name_first': 'first_name3',
E         +                   'name_last': 'last_name3',
E         +                   'profile_img_url': '',
E         +                   'u_id': 150},
E         +                  {'email': 'example2@hotmail.com',
E         +                   'handle_str': 'first_name2last_name',
E         +                   'name_first': 'first_name2',
E         +                   'name_last': 'last_name2',
E         +                   'profile_img_url': '',
E         -                   'u_id': 147},
E         ?                             ^
E         +                   'u_id': 149},
E         ?                             ^
E         +                  {'email': 'example7@hotmail.com',
E         +                   'handle_str': 'first_name7last_name',
E         +                   'name_first': 'first_name7',
E         +                   'name_last': 'last_name7',
E         +                   'profile_img_url': '',
E         +                   'u_id': 154},
E         +                  {'email': 'example8@hotmail.com',
E         +                   'handle_str': 'first_name8last_name',
E         +                   'name_first': 'first_name8',
E         +                   'name_last': 'last_name8',
E         +                   'profile_img_url': '',
E         +                   'u_id': 155},
E         +                  {'email': 'example9@hotmail.com',
E         +                   'handle_str': 'first_name9last_name',
E         +                   'name_first': 'first_name9',
E         +                   'name_last': 'last_name9',
E         +                   'profile_img_url': '',
E         +                   'u_id': 156},
E                            {'email': 'example1@hotmail.com',
E                             'handle_str': 'first_name1last_name',
E                             'name_first': 'first_name1',
E                             'name_last': 'last_name1',
E         +                   'profile_img_url': '',
E                             'u_id': 148},
E         -                  {'email': 'example2@hotmail.com',
E         ?                                    ^
E         +                  {'email': 'example0@hotmail.com',
E         ?                                    ^
E         -                   'handle_str': 'first_name2last_name',
E         ?                                            ^
E         +                   'handle_str': 'first_name0last_name',
E         ?                                            ^
E         -                   'name_first': 'first_name2',
E         ?                                            ^
E         +                   'name_first': 'first_name0',
E         ?                                            ^
E         -                   'name_last': 'last_name2',
E         ?                                          ^
E         +                   'name_last': 'last_name0',
E         ?                                          ^
E         +                   'profile_img_url': '',
E         -                   'u_id': 149},
E         ?                             ^
E         +                   'u_id': 147},
E         ?                             ^
E         -                  {'email': 'example3@hotmail.com',
E         -                   'handle_str': 'first_name3last_name',
E         -                   'name_first': 'first_name3',
E         -                   'name_last': 'last_name3',
E         -                   'u_id': 150},
E         -                  {'email': 'example4@hotmail.com',
E         -                   'handle_str': 'first_name4last_name',
E         -                   'name_first': 'first_name4',
E         -                   'name_last': 'last_name4',
E         -                   'u_id': 151},
E                            {'email': 'example5@hotmail.com',
E                             'handle_str': 'first_name5last_name',
E                             'name_first': 'first_name5',
E                             'name_last': 'last_name5',
E         +                   'profile_img_url': '',
E                             'u_id': 152},
E                            {'email': 'example6@hotmail.com',
E                             'handle_str': 'first_name6last_name',
E                             'name_first': 'first_name6',
E                             'name_last': 'last_name6',
E         +                   'profile_img_url': '',
E         -                   'u_id': 153},
E         +                   'u_id': 153}],
E         ?                               +
E         -                  {'email': 'example7@hotmail.com',
E         -                   'handle_str': 'first_name7last_name',
E         -                   'name_first': 'first_name7',
E         -                   'name_last': 'last_name7',
E         -                   'u_id': 154},
E         -                  {'email': 'example8@hotmail.com',
E         -                   'handle_str': 'first_name8last_name',
E         -                   'name_first': 'first_name8',
E         -                   'name_last': 'last_name8',
E         -                   'u_id': 155},
E         -                  {'email': 'example9@hotmail.com',
E         -                   'handle_str': 'first_name9last_name',
E         -                   'name_first': 'first_name9',
E         -                   'name_last': 'last_name9',
E         -                   'u_id': 156}],
E            'is_public': True,
E            'name': 'channel0',
E            'owner_members': [{'email': 'example0@hotmail.com',
E                               'handle_str': 'first_name0last_name',
E                               'name_first': 'first_name0',
E                               'name_last': 'last_name0',
E         +                     'profile_img_url': '',
E                               'u_id': 147}],
E           }

http_tests/channel_details_v2_http_test.py:106: AssertionError
____________________________ test_multiple_channels ____________________________

    def test_multiple_channels():
        requests.delete(f"{url}clear/v1")
    
        users = []
        for i in range(10):
            a_u_id = requests.post(f"{url}auth/register/v2", json=user_body(i))
            users.append(a_u_id.json())
    
        ch_id0 = requests.post(f"{url}channels/create/v2", json=channel_create_body(users[0], 0, True))
        channel0 = ch_id0.json()
    
        ch_id1 = requests.post(f"{url}channels/create/v2", json=channel_create_body(users[5], 1, True))
        channel1 = ch_id1.json()
    
        for i in range(1,5):
            requests.post(f"{url}channel/invite/v2", json=channel_invite_body(users[0], channel0, users[i]))
    
        for i in range(6,10):
            requests.post(f"{url}channel/invite/v2", json=channel_invite_body(users[5], channel1, users[i]))
    
        payload0 = requests.get(f"{url}channel/details/v2", params=channel_details_body(users[2], channel0))
        channel_details0 = payload0.json()
    
>       assert channel_details0 == {
            'name': 'channel0',
            'is_public': True,
            'owner_members': [
                {
                    'u_id': users[0]['auth_user_id'],
                    'email': 'example0@hotmail.com',
                    'name_first': 'first_name0',
                    'name_last': 'last_name0',
                    'handle_str': 'first_name0last_name'
                }
            ],
            'all_members': [
                {
                    'u_id': users[0]['auth_user_id'],
                    'email': 'example0@hotmail.com',
                    'name_first': 'first_name0',
                    'name_last': 'last_name0',
                    'handle_str': 'first_name0last_name'
                },
                {
                    'u_id': users[1]['auth_user_id'],
                    'email': 'example1@hotmail.com',
                    'name_first': 'first_name1',
                    'name_last': 'last_name1',
                    'handle_str': 'first_name1last_name'
                },
                {
                    'u_id': users[2]['auth_user_id'],
                    'email': 'example2@hotmail.com',
                    'name_first': 'first_name2',
                    'name_last': 'last_name2',
                    'handle_str': 'first_name2last_name'
                },
                {
                    'u_id': users[3]['auth_user_id'],
                    'email': 'example3@hotmail.com',
                    'name_first': 'first_name3',
                    'name_last': 'last_name3',
                    'handle_str': 'first_name3last_name'
                },
                {
                    'u_id': users[4]['auth_user_id'],
                    'email': 'example4@hotmail.com',
                    'name_first': 'first_name4',
                    'name_last': 'last_name4',
                    'handle_str': 'first_name4last_name'
                },
            ],
        }
E       AssertionError: assert {'all_members': [{'email': 'example1@hotmail.com',\n                  'handle_str': 'first_name1last_name',\n                  'name_first': 'first_name1',\n                  'name_last': 'last_name1',\n                  'profile_img_url': '',\n                  'u_id': 159},\n                 {'email': 'example2@hotmail.com',\n                  'handle_str': 'first_name2last_name',\n                  'name_first': 'first_name2',\n                  'name_last': 'last_name2',\n                  'profile_img_url': '',\n                  'u_id': 160},\n                 {'email': 'example4@hotmail.com',\n                  'handle_str': 'first_name4last_name',\n                  'name_first': 'first_name4',\n                  'name_last': 'last_name4',\n                  'profile_img_url': '',\n                  'u_id': 162},\n                 {'email': 'example3@hotmail.com',\n                  'handle_str': 'first_name3last_name',\n                  'name_first': 'first_name3',\n                  'name_last': 'last_name3',\n                  'profile_img_url': '',\n                  'u_id': 161},\n                 {'email': 'example0@hotmail.com',\n                  'handle_str': 'first_name0last_name',\n                  'name_first': 'first_name0',\n                  'name_last': 'last_name0',\n                  'profile_img_url': '',\n                  'u_id': 158}],\n 'is_public': True,\n 'name': 'channel0',\n 'owner_members': [{'email': 'example0@hotmail.com',\n                    'handle_str': 'first_name0last_name',\n                    'name_first': 'first_name0',\n                    'name_last': 'last_name0',\n                    'profile_img_url': '',\n                    'u_id': 158}]} == {'all_members': [{'email': 'example0@hotmail.com',\n                  'handle_str': 'first_name0last_name',\n                  'name_first': 'first_name0',\n                  'name_last': 'last_name0',\n                  'u_id': 158},\n                 {'email': 'example1@hotmail.com',\n                  'handle_str': 'first_name1last_name',\n                  'name_first': 'first_name1',\n                  'name_last': 'last_name1',\n                  'u_id': 159},\n                 {'email': 'example2@hotmail.com',\n                  'handle_str': 'first_name2last_name',\n                  'name_first': 'first_name2',\n                  'name_last': 'last_name2',\n                  'u_id': 160},\n                 {'email': 'example3@hotmail.com',\n                  'handle_str': 'first_name3last_name',\n                  'name_first': 'first_name3',\n                  'name_last': 'last_name3',\n                  'u_id': 161},\n                 {'email': 'example4@hotmail.com',\n                  'handle_str': 'first_name4last_name',\n                  'name_first': 'first_name4',\n                  'name_last': 'last_name4',\n                  'u_id': 162}],\n 'is_public': True,\n 'name': 'channel0',\n 'owner_members': [{'email': 'example0@hotmail.com',\n                    'handle_str': 'first_name0last_name',\n                    'name_first': 'first_name0',\n                    'name_last': 'last_name0',\n                    'u_id': 158}]}
E         Common items:
E         {'is_public': True, 'name': 'channel0'}
E         Differing items:
E         {'all_members': [{'email': 'example1@hotmail.com', 'handle_str': 'first_name1last_name', 'name_first': 'first_name1', ...ple0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_name0', 'name_last': 'last_name0', ...}]} != {'all_members': [{'email': 'example0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_name0', ...ple4@hotmail.com', 'handle_str': 'first_name4last_name', 'name_first': 'first_name4', 'name_last': 'last_name4', ...}]}
E         {'owner_members': [{'email': 'example0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_name0', 'name_last': 'last_name0', ...}]} != {'owner_members': [{'email': 'example0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_name0', 'name_last': 'last_name0', ...}]}
E         Full diff:
E           {
E         -  'all_members': [{'email': 'example0@hotmail.com',
E         ?                                    ^
E         +  'all_members': [{'email': 'example1@hotmail.com',
E         ?                                    ^
E         -                   'handle_str': 'first_name0last_name',
E         -                   'name_first': 'first_name0',
E         -                   'name_last': 'last_name0',
E         -                   'u_id': 158},
E         -                  {'email': 'example1@hotmail.com',
E                             'handle_str': 'first_name1last_name',
E                             'name_first': 'first_name1',
E                             'name_last': 'last_name1',
E         +                   'profile_img_url': '',
E                             'u_id': 159},
E                            {'email': 'example2@hotmail.com',
E                             'handle_str': 'first_name2last_name',
E                             'name_first': 'first_name2',
E                             'name_last': 'last_name2',
E         +                   'profile_img_url': '',
E                             'u_id': 160},
E         +                  {'email': 'example4@hotmail.com',
E         +                   'handle_str': 'first_name4last_name',
E         +                   'name_first': 'first_name4',
E         +                   'name_last': 'last_name4',
E         +                   'profile_img_url': '',
E         +                   'u_id': 162},
E                            {'email': 'example3@hotmail.com',
E                             'handle_str': 'first_name3last_name',
E                             'name_first': 'first_name3',
E                             'name_last': 'last_name3',
E         +                   'profile_img_url': '',
E                             'u_id': 161},
E         -                  {'email': 'example4@hotmail.com',
E         ?                                    ^
E         +                  {'email': 'example0@hotmail.com',
E         ?                                    ^
E         -                   'handle_str': 'first_name4last_name',
E         ?                                            ^
E         +                   'handle_str': 'first_name0last_name',
E         ?                                            ^
E         -                   'name_first': 'first_name4',
E         ?                                            ^
E         +                   'name_first': 'first_name0',
E         ?                                            ^
E         -                   'name_last': 'last_name4',
E         ?                                          ^
E         +                   'name_last': 'last_name0',
E         ?                                          ^
E         +                   'profile_img_url': '',
E         -                   'u_id': 162}],
E         ?                            ^^
E         +                   'u_id': 158}],
E         ?                            ^^
E            'is_public': True,
E            'name': 'channel0',
E            'owner_members': [{'email': 'example0@hotmail.com',
E                               'handle_str': 'first_name0last_name',
E                               'name_first': 'first_name0',
E                               'name_last': 'last_name0',
E         +                     'profile_img_url': '',
E                               'u_id': 158}],
E           }

http_tests/channel_details_v2_http_test.py:215: AssertionError
___________________________ test_invalid_channel_id ____________________________

    def test_invalid_channel_id():
        requests.delete(f"{url}clear/v1")
    
        a_u_id0 = requests.post(f"{url}auth/register/v2", json=user_body(0))
        user0 = a_u_id0.json()
    
        payload = requests.get(f"{url}channel/details/v2", params=channel_details_body(user0, {"channel_id": 126347542124}))
>       channel_details = payload.json()

http_tests/channel_details_v2_http_test.py:327: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>400 Bad Request</title>\n<h1>Bad Request</h1>\n<p>126347542124 is not a valid ID</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
____________________________ test_unauthorized_user ____________________________

    def test_unauthorized_user():
        requests.delete(f"{url}clear/v1")
    
        a_u_id0 = requests.post(f"{url}auth/register/v2", json=user_body(0))
        user0 = a_u_id0.json()
    
        a_u_id1 = requests.post(f"{url}auth/register/v2", json=user_body(1))
        user1 = a_u_id1.json()
    
        ch_id0 = requests.post(f"{url}channels/create/v2", json=channel_create_body(user0, 0, True))
        channel0 = ch_id0.json()
    
        payload = requests.get(f"{url}channel/details/v2", params=channel_details_body(user1, channel0))
>       channel_details = payload.json()

http_tests/channel_details_v2_http_test.py:346: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Only members can view details about this channel</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
______________________________ test_invalid_token ______________________________

    def test_invalid_token():
        requests.delete(f"{url}clear/v1")
    
        a_u_id0 = requests.post(f"{url}auth/register/v2", json=user_body(0))
        user0 = a_u_id0.json()
    
        ch_id0 = requests.post(f"{url}channels/create/v2", json=channel_create_body(user0, 0, True))
        channel0 = ch_id0.json()
    
        payload = requests.get(f"{url}channel/details/v2", params=channel_details_body({"token": 18936087134}, channel0))
>       channel_details = payload.json()

http_tests/channel_details_v2_http_test.py:362: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Invalid token</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
________________________________ test_function _________________________________

    def test_function():
        requests.delete(f"{url}clear/v1")
    
        a_u_id0 = requests.post(f"{url}auth/register/v2", json=user_body(0))
        user0 = a_u_id0.json()
    
        a_u_id1 = requests.post(f"{url}auth/register/v2", json=user_body(1))
        user1 = a_u_id1.json()
    
        ch_id0 = requests.post(f"{url}channels/create/v2", json=channel_create_body(user0, 0, True))
        channel0 = ch_id0.json()
    
        requests.post(f"{url}channel/invite/v2", json=channel_invite_body(user0, channel0, user1))
    
        payload = requests.get(f"{url}channel/details/v2", params=channel_details_body(user0, channel0))
        channel_details = payload.json()
    
>       assert channel_details == {
            'name': 'channel0',
            'is_public': True,
            'owner_members': [
                {
                    'u_id': user0['auth_user_id'],
                    'email': 'example0@hotmail.com',
                    'name_first': 'first_name0',
                    'name_last': 'last_name0',
                    'handle_str': 'first_name0last_name'
                }
            ],
            'all_members': [
                {
                    'u_id': user0['auth_user_id'],
                    'email': 'example0@hotmail.com',
                    'name_first': 'first_name0',
                    'name_last': 'last_name0',
                    'handle_str': 'first_name0last_name'
                },
                {
                    'u_id': user1['auth_user_id'],
                    'email': 'example1@hotmail.com',
                    'name_first': 'first_name1',
                    'name_last': 'last_name1',
                    'handle_str': 'first_name1last_name'
                }
            ],
        }
E       AssertionError: assert {'all_members': [{'email': 'example1@hotmail.com',\n                  'handle_str': 'first_name1last_name',\n                  'name_first': 'first_name1',\n                  'name_last': 'last_name1',\n                  'profile_img_url': '',\n                  'u_id': 177},\n                 {'email': 'example0@hotmail.com',\n                  'handle_str': 'first_name0last_name',\n                  'name_first': 'first_name0',\n                  'name_last': 'last_name0',\n                  'profile_img_url': '',\n                  'u_id': 176}],\n 'is_public': True,\n 'name': 'channel0',\n 'owner_members': [{'email': 'example0@hotmail.com',\n                    'handle_str': 'first_name0last_name',\n                    'name_first': 'first_name0',\n                    'name_last': 'last_name0',\n                    'profile_img_url': '',\n                    'u_id': 176}]} == {'all_members': [{'email': 'example0@hotmail.com',\n                  'handle_str': 'first_name0last_name',\n                  'name_first': 'first_name0',\n                  'name_last': 'last_name0',\n                  'u_id': 176},\n                 {'email': 'example1@hotmail.com',\n                  'handle_str': 'first_name1last_name',\n                  'name_first': 'first_name1',\n                  'name_last': 'last_name1',\n                  'u_id': 177}],\n 'is_public': True,\n 'name': 'channel0',\n 'owner_members': [{'email': 'example0@hotmail.com',\n                    'handle_str': 'first_name0last_name',\n                    'name_first': 'first_name0',\n                    'name_last': 'last_name0',\n                    'u_id': 176}]}
E         Common items:
E         {'is_public': True, 'name': 'channel0'}
E         Differing items:
E         {'all_members': [{'email': 'example1@hotmail.com', 'handle_str': 'first_name1last_name', 'name_first': 'first_name1', ...ple0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_name0', 'name_last': 'last_name0', ...}]} != {'all_members': [{'email': 'example0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_name0', ...ple1@hotmail.com', 'handle_str': 'first_name1last_name', 'name_first': 'first_name1', 'name_last': 'last_name1', ...}]}
E         {'owner_members': [{'email': 'example0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_name0', 'name_last': 'last_name0', ...}]} != {'owner_members': [{'email': 'example0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_name0', 'name_last': 'last_name0', ...}]}
E         Full diff:
E           {
E         -  'all_members': [{'email': 'example0@hotmail.com',
E         ?                                    ^
E         +  'all_members': [{'email': 'example1@hotmail.com',
E         ?                                    ^
E         +                   'handle_str': 'first_name1last_name',
E         +                   'name_first': 'first_name1',
E         +                   'name_last': 'last_name1',
E         +                   'profile_img_url': '',
E         +                   'u_id': 177},
E         +                  {'email': 'example0@hotmail.com',
E                             'handle_str': 'first_name0last_name',
E                             'name_first': 'first_name0',
E                             'name_last': 'last_name0',
E         +                   'profile_img_url': '',
E         -                   'u_id': 176},
E         +                   'u_id': 176}],
E         ?                               +
E         -                  {'email': 'example1@hotmail.com',
E         -                   'handle_str': 'first_name1last_name',
E         -                   'name_first': 'first_name1',
E         -                   'name_last': 'last_name1',
E         -                   'u_id': 177}],
E            'is_public': True,
E            'name': 'channel0',
E            'owner_members': [{'email': 'example0@hotmail.com',
E                               'handle_str': 'first_name0last_name',
E                               'name_first': 'first_name0',
E                               'name_last': 'last_name0',
E         +                     'profile_img_url': '',
E                               'u_id': 176}],
E           }

http_tests/channel_invite_v2_http_test.py:59: AssertionError
________________________________ test_multiple _________________________________

    def test_multiple():
        requests.delete(f"{url}clear/v1")
    
        users = []
        for i in range(5):
            a_u_id = requests.post(f"{url}auth/register/v2", json=user_body(i))
            users.append(a_u_id.json())
    
        ch_id0 = requests.post(f"{url}channels/create/v2", json=channel_create_body(users[0], 0, True))
        channel0 = ch_id0.json()
    
        for i in range(1,5):
            requests.post(f"{url}channel/invite/v2", json=channel_invite_body(users[0], channel0, users[i]))
    
        payload = requests.get(f"{url}channel/details/v2", params=channel_details_body(users[0], channel0))
        channel_details = payload.json()
    
>       assert channel_details == {
            'name': 'channel0',
            'is_public': True,
            'owner_members': [
                {
                    'u_id': users[0]['auth_user_id'],
                    'email': 'example0@hotmail.com',
                    'name_first': 'first_name0',
                    'name_last': 'last_name0',
                    'handle_str': 'first_name0last_name'
                }
            ],
            'all_members': [
                {
                    'u_id': users[0]['auth_user_id'],
                    'email': 'example0@hotmail.com',
                    'name_first': 'first_name0',
                    'name_last': 'last_name0',
                    'handle_str': 'first_name0last_name'
                },
                {
                    'u_id': users[1]['auth_user_id'],
                    'email': 'example1@hotmail.com',
                    'name_first': 'first_name1',
                    'name_last': 'last_name1',
                    'handle_str': 'first_name1last_name'
                },
                {
                    'u_id': users[2]['auth_user_id'],
                    'email': 'example2@hotmail.com',
                    'name_first': 'first_name2',
                    'name_last': 'last_name2',
                    'handle_str': 'first_name2last_name'
                },
                {
                    'u_id': users[3]['auth_user_id'],
                    'email': 'example3@hotmail.com',
                    'name_first': 'first_name3',
                    'name_last': 'last_name3',
                    'handle_str': 'first_name3last_name'
                },
                {
                    'u_id': users[4]['auth_user_id'],
                    'email': 'example4@hotmail.com',
                    'name_first': 'first_name4',
                    'name_last': 'last_name4',
                    'handle_str': 'first_name4last_name'
                },
            ],
        }
E       AssertionError: assert {'all_members': [{'email': 'example4@hotmail.com',\n                  'handle_str': 'first_name4last_name',\n                  'name_first': 'first_name4',\n                  'name_last': 'last_name4',\n                  'profile_img_url': '',\n                  'u_id': 183},\n                 {'email': 'example0@hotmail.com',\n                  'handle_str': 'first_name0last_name',\n                  'name_first': 'first_name0',\n                  'name_last': 'last_name0',\n                  'profile_img_url': '',\n                  'u_id': 179},\n                 {'email': 'example2@hotmail.com',\n                  'handle_str': 'first_name2last_name',\n                  'name_first': 'first_name2',\n                  'name_last': 'last_name2',\n                  'profile_img_url': '',\n                  'u_id': 181},\n                 {'email': 'example3@hotmail.com',\n                  'handle_str': 'first_name3last_name',\n                  'name_first': 'first_name3',\n                  'name_last': 'last_name3',\n                  'profile_img_url': '',\n                  'u_id': 182},\n                 {'email': 'example1@hotmail.com',\n                  'handle_str': 'first_name1last_name',\n                  'name_first': 'first_name1',\n                  'name_last': 'last_name1',\n                  'profile_img_url': '',\n                  'u_id': 180}],\n 'is_public': True,\n 'name': 'channel0',\n 'owner_members': [{'email': 'example0@hotmail.com',\n                    'handle_str': 'first_name0last_name',\n                    'name_first': 'first_name0',\n                    'name_last': 'last_name0',\n                    'profile_img_url': '',\n                    'u_id': 179}]} == {'all_members': [{'email': 'example0@hotmail.com',\n                  'handle_str': 'first_name0last_name',\n                  'name_first': 'first_name0',\n                  'name_last': 'last_name0',\n                  'u_id': 179},\n                 {'email': 'example1@hotmail.com',\n                  'handle_str': 'first_name1last_name',\n                  'name_first': 'first_name1',\n                  'name_last': 'last_name1',\n                  'u_id': 180},\n                 {'email': 'example2@hotmail.com',\n                  'handle_str': 'first_name2last_name',\n                  'name_first': 'first_name2',\n                  'name_last': 'last_name2',\n                  'u_id': 181},\n                 {'email': 'example3@hotmail.com',\n                  'handle_str': 'first_name3last_name',\n                  'name_first': 'first_name3',\n                  'name_last': 'last_name3',\n                  'u_id': 182},\n                 {'email': 'example4@hotmail.com',\n                  'handle_str': 'first_name4last_name',\n                  'name_first': 'first_name4',\n                  'name_last': 'last_name4',\n                  'u_id': 183}],\n 'is_public': True,\n 'name': 'channel0',\n 'owner_members': [{'email': 'example0@hotmail.com',\n                    'handle_str': 'first_name0last_name',\n                    'name_first': 'first_name0',\n                    'name_last': 'last_name0',\n                    'u_id': 179}]}
E         Common items:
E         {'is_public': True, 'name': 'channel0'}
E         Differing items:
E         {'all_members': [{'email': 'example4@hotmail.com', 'handle_str': 'first_name4last_name', 'name_first': 'first_name4', ...ple1@hotmail.com', 'handle_str': 'first_name1last_name', 'name_first': 'first_name1', 'name_last': 'last_name1', ...}]} != {'all_members': [{'email': 'example0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_name0', ...ple4@hotmail.com', 'handle_str': 'first_name4last_name', 'name_first': 'first_name4', 'name_last': 'last_name4', ...}]}
E         {'owner_members': [{'email': 'example0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_name0', 'name_last': 'last_name0', ...}]} != {'owner_members': [{'email': 'example0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_name0', 'name_last': 'last_name0', ...}]}
E         Full diff:
E           {
E         -  'all_members': [{'email': 'example0@hotmail.com',
E         ?                                    ^
E         +  'all_members': [{'email': 'example4@hotmail.com',
E         ?                                    ^
E         +                   'handle_str': 'first_name4last_name',
E         +                   'name_first': 'first_name4',
E         +                   'name_last': 'last_name4',
E         +                   'profile_img_url': '',
E         +                   'u_id': 183},
E         +                  {'email': 'example0@hotmail.com',
E                             'handle_str': 'first_name0last_name',
E                             'name_first': 'first_name0',
E                             'name_last': 'last_name0',
E         +                   'profile_img_url': '',
E                             'u_id': 179},
E         -                  {'email': 'example1@hotmail.com',
E         -                   'handle_str': 'first_name1last_name',
E         -                   'name_first': 'first_name1',
E         -                   'name_last': 'last_name1',
E         -                   'u_id': 180},
E                            {'email': 'example2@hotmail.com',
E                             'handle_str': 'first_name2last_name',
E                             'name_first': 'first_name2',
E                             'name_last': 'last_name2',
E         +                   'profile_img_url': '',
E                             'u_id': 181},
E                            {'email': 'example3@hotmail.com',
E                             'handle_str': 'first_name3last_name',
E                             'name_first': 'first_name3',
E                             'name_last': 'last_name3',
E         +                   'profile_img_url': '',
E                             'u_id': 182},
E         -                  {'email': 'example4@hotmail.com',
E         ?                                    ^
E         +                  {'email': 'example1@hotmail.com',
E         ?                                    ^
E         -                   'handle_str': 'first_name4last_name',
E         ?                                            ^
E         +                   'handle_str': 'first_name1last_name',
E         ?                                            ^
E         -                   'name_first': 'first_name4',
E         ?                                            ^
E         +                   'name_first': 'first_name1',
E         ?                                            ^
E         -                   'name_last': 'last_name4',
E         ?                                          ^
E         +                   'name_last': 'last_name1',
E         ?                                          ^
E         +                   'profile_img_url': '',
E         -                   'u_id': 183}],
E         ?                             ^
E         +                   'u_id': 180}],
E         ?                             ^
E            'is_public': True,
E            'name': 'channel0',
E            'owner_members': [{'email': 'example0@hotmail.com',
E                               'handle_str': 'first_name0last_name',
E                               'name_first': 'first_name0',
E                               'name_last': 'last_name0',
E         +                     'profile_img_url': '',
E                               'u_id': 179}],
E           }

http_tests/channel_invite_v2_http_test.py:106: AssertionError
__________________________ test_multiple_users_invite __________________________

    def test_multiple_users_invite():
        requests.delete(f"{url}clear/v1")
    
        users = []
        for i in range(5):
            a_u_id = requests.post(f"{url}auth/register/v2", json=user_body(i))
            users.append(a_u_id.json())
    
        ch_id0 = requests.post(f"{url}channels/create/v2", json=channel_create_body(users[0], 0, True))
        channel0 = ch_id0.json()
    
        for i in range(4):
            requests.post(f"{url}channel/invite/v2", json=channel_invite_body(users[i], channel0, users[i + 1]))
    
        payload = requests.get(f"{url}channel/details/v2", params=channel_details_body(users[0], channel0))
        channel_details = payload.json()
    
>       assert channel_details == {
            'name': 'channel0',
            'is_public': True,
            'owner_members': [
                {
                    'u_id': users[0]['auth_user_id'],
                    'email': 'example0@hotmail.com',
                    'name_first': 'first_name0',
                    'name_last': 'last_name0',
                    'handle_str': 'first_name0last_name'
                }
            ],
            'all_members': [
                {
                    'u_id': users[0]['auth_user_id'],
                    'email': 'example0@hotmail.com',
                    'name_first': 'first_name0',
                    'name_last': 'last_name0',
                    'handle_str': 'first_name0last_name'
                },
                {
                    'u_id': users[1]['auth_user_id'],
                    'email': 'example1@hotmail.com',
                    'name_first': 'first_name1',
                    'name_last': 'last_name1',
                    'handle_str': 'first_name1last_name'
                },
                {
                    'u_id': users[2]['auth_user_id'],
                    'email': 'example2@hotmail.com',
                    'name_first': 'first_name2',
                    'name_last': 'last_name2',
                    'handle_str': 'first_name2last_name'
                },
                {
                    'u_id': users[3]['auth_user_id'],
                    'email': 'example3@hotmail.com',
                    'name_first': 'first_name3',
                    'name_last': 'last_name3',
                    'handle_str': 'first_name3last_name'
                },
                {
                    'u_id': users[4]['auth_user_id'],
                    'email': 'example4@hotmail.com',
                    'name_first': 'first_name4',
                    'name_last': 'last_name4',
                    'handle_str': 'first_name4last_name'
                },
            ],
        }
E       AssertionError: assert {'all_members': [{'email': 'example2@hotmail.com',\n                  'handle_str': 'first_name2last_name',\n                  'name_first': 'first_name2',\n                  'name_last': 'last_name2',\n                  'profile_img_url': '',\n                  'u_id': 187},\n                 {'email': 'example1@hotmail.com',\n                  'handle_str': 'first_name1last_name',\n                  'name_first': 'first_name1',\n                  'name_last': 'last_name1',\n                  'profile_img_url': '',\n                  'u_id': 186},\n                 {'email': 'example3@hotmail.com',\n                  'handle_str': 'first_name3last_name',\n                  'name_first': 'first_name3',\n                  'name_last': 'last_name3',\n                  'profile_img_url': '',\n                  'u_id': 188},\n                 {'email': 'example0@hotmail.com',\n                  'handle_str': 'first_name0last_name',\n                  'name_first': 'first_name0',\n                  'name_last': 'last_name0',\n                  'profile_img_url': '',\n                  'u_id': 185},\n                 {'email': 'example4@hotmail.com',\n                  'handle_str': 'first_name4last_name',\n                  'name_first': 'first_name4',\n                  'name_last': 'last_name4',\n                  'profile_img_url': '',\n                  'u_id': 189}],\n 'is_public': True,\n 'name': 'channel0',\n 'owner_members': [{'email': 'example0@hotmail.com',\n                    'handle_str': 'first_name0last_name',\n                    'name_first': 'first_name0',\n                    'name_last': 'last_name0',\n                    'profile_img_url': '',\n                    'u_id': 185}]} == {'all_members': [{'email': 'example0@hotmail.com',\n                  'handle_str': 'first_name0last_name',\n                  'name_first': 'first_name0',\n                  'name_last': 'last_name0',\n                  'u_id': 185},\n                 {'email': 'example1@hotmail.com',\n                  'handle_str': 'first_name1last_name',\n                  'name_first': 'first_name1',\n                  'name_last': 'last_name1',\n                  'u_id': 186},\n                 {'email': 'example2@hotmail.com',\n                  'handle_str': 'first_name2last_name',\n                  'name_first': 'first_name2',\n                  'name_last': 'last_name2',\n                  'u_id': 187},\n                 {'email': 'example3@hotmail.com',\n                  'handle_str': 'first_name3last_name',\n                  'name_first': 'first_name3',\n                  'name_last': 'last_name3',\n                  'u_id': 188},\n                 {'email': 'example4@hotmail.com',\n                  'handle_str': 'first_name4last_name',\n                  'name_first': 'first_name4',\n                  'name_last': 'last_name4',\n                  'u_id': 189}],\n 'is_public': True,\n 'name': 'channel0',\n 'owner_members': [{'email': 'example0@hotmail.com',\n                    'handle_str': 'first_name0last_name',\n                    'name_first': 'first_name0',\n                    'name_last': 'last_name0',\n                    'u_id': 185}]}
E         Common items:
E         {'is_public': True, 'name': 'channel0'}
E         Differing items:
E         {'all_members': [{'email': 'example2@hotmail.com', 'handle_str': 'first_name2last_name', 'name_first': 'first_name2', ...ple4@hotmail.com', 'handle_str': 'first_name4last_name', 'name_first': 'first_name4', 'name_last': 'last_name4', ...}]} != {'all_members': [{'email': 'example0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_name0', ...ple4@hotmail.com', 'handle_str': 'first_name4last_name', 'name_first': 'first_name4', 'name_last': 'last_name4', ...}]}
E         {'owner_members': [{'email': 'example0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_name0', 'name_last': 'last_name0', ...}]} != {'owner_members': [{'email': 'example0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_name0', 'name_last': 'last_name0', ...}]}
E         Full diff:
E           {
E         -  'all_members': [{'email': 'example0@hotmail.com',
E         ?                                    ^
E         +  'all_members': [{'email': 'example2@hotmail.com',
E         ?                                    ^
E         -                   'handle_str': 'first_name0last_name',
E         ?                                            ^
E         +                   'handle_str': 'first_name2last_name',
E         ?                                            ^
E         -                   'name_first': 'first_name0',
E         ?                                            ^
E         +                   'name_first': 'first_name2',
E         ?                                            ^
E         -                   'name_last': 'last_name0',
E         ?                                          ^
E         +                   'name_last': 'last_name2',
E         ?                                          ^
E         +                   'profile_img_url': '',
E         -                   'u_id': 185},
E         ?                             ^
E         +                   'u_id': 187},
E         ?                             ^
E                            {'email': 'example1@hotmail.com',
E                             'handle_str': 'first_name1last_name',
E                             'name_first': 'first_name1',
E                             'name_last': 'last_name1',
E         +                   'profile_img_url': '',
E                             'u_id': 186},
E         -                  {'email': 'example2@hotmail.com',
E         -                   'handle_str': 'first_name2last_name',
E         -                   'name_first': 'first_name2',
E         -                   'name_last': 'last_name2',
E         -                   'u_id': 187},
E                            {'email': 'example3@hotmail.com',
E                             'handle_str': 'first_name3last_name',
E                             'name_first': 'first_name3',
E                             'name_last': 'last_name3',
E         +                   'profile_img_url': '',
E                             'u_id': 188},
E         +                  {'email': 'example0@hotmail.com',
E         +                   'handle_str': 'first_name0last_name',
E         +                   'name_first': 'first_name0',
E         +                   'name_last': 'last_name0',
E         +                   'profile_img_url': '',
E         +                   'u_id': 185},
E                            {'email': 'example4@hotmail.com',
E                             'handle_str': 'first_name4last_name',
E                             'name_first': 'first_name4',
E                             'name_last': 'last_name4',
E         +                   'profile_img_url': '',
E                             'u_id': 189}],
E            'is_public': True,
E            'name': 'channel0',
E            'owner_members': [{'email': 'example0@hotmail.com',
E                               'handle_str': 'first_name0last_name',
E                               'name_first': 'first_name0',
E                               'name_last': 'last_name0',
E         +                     'profile_img_url': '',
E                               'u_id': 185}],
E           }

http_tests/channel_invite_v2_http_test.py:174: AssertionError
___________________________ test_invalid_channel_id ____________________________

    def test_invalid_channel_id():
        r = requests.delete(f"{url}clear/v1")
    
        a_u_id0 = requests.post(f"{url}auth/register/v2", json=user_body(0))
        user0 = a_u_id0.json()
    
        ch_id0 = requests.post(f"{url}channels/create/v2", json=channel_create_body(user0, 0, True))
        channel0 = ch_id0.json()
    
        r = requests.post(f"{url}channel/invite/v2", json=channel_invite_body(user0, channel0, {"auth_user_id": 1216374684571}))
    
>       assert r.json()["code"] == 400

http_tests/channel_invite_v2_http_test.py:236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>400 Bad Request</title>\n<h1>Bad Request</h1>\n<p>1216374684571 is not a valid ID</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
__________________________ test_invalid_invited_user ___________________________

    def test_invalid_invited_user():
        r = requests.delete(f"{url}clear/v1")
    
        a_u_id0 = requests.post(f"{url}auth/register/v2", json=user_body(0))
        user0 = a_u_id0.json()
    
        a_u_id1 = requests.post(f"{url}auth/register/v2", json=user_body(1))
        user1 = a_u_id1.json()
    
        r = requests.post(f"{url}channel/invite/v2", json=channel_invite_body(user0, {"channel_id": 319245780425}, user1))
        print(r)
    
>       assert r.json()["code"] == 400

http_tests/channel_invite_v2_http_test.py:252: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>400 Bad Request</title>\n<h1>Bad Request</h1>\n<p>319245780425 is not a valid ID</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
----------------------------- Captured stdout call -----------------------------
<Response [400]>
____________________________ test_unauthorized_user ____________________________

    def test_unauthorized_user():
        r = requests.delete(f"{url}clear/v1")
    
        users = []
        for i in range(3):
            a_u_id = requests.post(f"{url}auth/register/v2", json=user_body(i))
            users.append(a_u_id.json())
    
        ch_id0 = requests.post(f"{url}channels/create/v2", json=channel_create_body(users[0], 0, True))
        channel0 = ch_id0.json()
    
        r = requests.post(f"{url}channel/invite/v2", json=channel_invite_body(users[1], channel0, users[2]))
    
>       assert r.json()["code"] == 403

http_tests/channel_invite_v2_http_test.py:269: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Only members can add members</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
______________________________ test_invalid_token ______________________________

    def test_invalid_token():
        r = requests.delete(f"{url}clear/v1")
    
        a_u_id0 = requests.post(f"{url}auth/register/v2", json=user_body(0))
        user0 = a_u_id0.json()
    
        ch_id0 = requests.post(f"{url}channels/create/v2", json=channel_create_body(user0, 0, True))
        channel0 = ch_id0.json()
    
        r = requests.post(f"{url}channel/invite/v2", json=channel_invite_body({"token": 18936087134}, channel0, {"auth_user_id": 1216374684571}))
    
>       assert r.json()["code"] == 403

http_tests/channel_invite_v2_http_test.py:284: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Invalid token</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
_____________________ test_channel_removeowner_owner_error _____________________

setup_user_data = {'user1': {'auth_user_id': 875, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjg3NSwibG9naW5fdGltZSI6MTYxODk...DUzMCwic2FsdCI6IjBkNTM3OTllLTFkMmQtNGM4YS1hMmY4LWYxMTUxYmE1OGEwNSJ9.Y0WUSz4kVWP733179n4K_igyU-iUq8JXQ_cKAcAS_D4'}, ...}

    def test_channel_removeowner_owner_error(setup_user_data):
        users = setup_user_data
    
        # Creating a public channel
        channel_id = requests.post(config.url + 'channels/create/v2', json={
            'token': users['user1']['token'],
            'name': 'Public',
            'is_public': True,
        }).json()
    
        # Join user2
        requests.post(config.url + 'channel/join/v2', json={
            'token': users['user2']['token'],
            'channel_id': channel_id['channel_id'],
        }).json()
    
        # Ensure InputError as user1 is currently the only owner of the channel
>       assert requests.post(config.url + 'channel/removeowner/v1', json={
            'token': users['user2']['token'],
            'channel_id': channel_id['channel_id'],
            'u_id': users['user1']['auth_user_id'],
        }).status_code == 400
E       assert 403 == 400
E         +403
E         -400

http_tests/channel_removeowner_v1_http_test.py:42: AssertionError
________________________ test_channel_removeowner_basic ________________________

setup_user_data = {'user1': {'auth_user_id': 893, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjg5MywibG9naW5fdGltZSI6MTYxODk...DUzMCwic2FsdCI6IjIwYTUwYWY1LWU1MmYtNDJiNi04NzRiLTQ5NTI0NDI2NzA1MiJ9.l6mlVt3At4zvIvJ1gv-8V2Xynh4Ay4YWc_ScppvUbtg'}, ...}

    def test_channel_removeowner_basic(setup_user_data):
        users = setup_user_data
    
        # Creating a public channel
        channel_id = requests.post(config.url + 'channels/create/v2', json={
            'token': users['user1']['token'],
            'name': 'Public',
            'is_public': True,
        }).json()
    
        # Join user2
        requests.post(config.url + 'channel/join/v2', json={
            'token': users['user2']['token'],
            'channel_id': channel_id['channel_id'],
        }).json()
    
        # Add user2 to onwer pool
        requests.post(config.url + 'channel/addowner/v1', json={
            'token': users['user1']['token'],
            'channel_id': channel_id['channel_id'],
            'u_id': users['user2']['auth_user_id'],
        }).json()
    
        # Get details
        channel_details = requests.get(config.url + 'channel/details/v2', params={
            'token': users['user1']['token'],
            'channel_id': channel_id['channel_id'],
        }).json()
    
>       assert channel_details == {
            'name': 'Public',
            'is_public': True,
            'owner_members': [
                {
                    'u_id': users['user1']['auth_user_id'],
                    'email': 'user1@email.com',
                    'name_first': 'user1_first',
                    'name_last': 'user1_last',
                    'handle_str': 'user1_firstuser1_las'
                },
                {
                    'u_id': users['user2']['auth_user_id'],
                    'email': 'user2@email.com',
                    'name_first': 'user2_first',
                    'name_last': 'user2_last',
                    'handle_str': 'user2_firstuser2_las'
                }
            ],
            'all_members': [
                {
                    'u_id': users['user1']['auth_user_id'],
                    'email': 'user1@email.com',
                    'name_first': 'user1_first',
                    'name_last': 'user1_last',
                    'handle_str': 'user1_firstuser1_las'
                },
                {
                    'u_id': users['user2']['auth_user_id'],
                    'email': 'user2@email.com',
                    'name_first': 'user2_first',
                    'name_last': 'user2_last',
                    'handle_str': 'user2_firstuser2_las'
                }
            ],
        }
E       AssertionError: assert {'all_members': [{'email': 'user2@email.com',\n                  'handle_str': 'user2_firstuser2_las',\n                  'name_first': 'user2_first',\n                  'name_last': 'user2_last',\n                  'profile_img_url': '',\n                  'u_id': 894},\n                 {'email': 'user1@email.com',\n                  'handle_str': 'user1_firstuser1_las',\n                  'name_first': 'user1_first',\n                  'name_last': 'user1_last',\n                  'profile_img_url': '',\n                  'u_id': 893}],\n 'is_public': True,\n 'name': 'Public',\n 'owner_members': [{'email': 'user2@email.com',\n                    'handle_str': 'user2_firstuser2_las',\n                    'name_first': 'user2_first',\n                    'name_last': 'user2_last',\n                    'profile_img_url': '',\n                    'u_id': 894},\n                   {'email': 'user1@email.com',\n                    'handle_str': 'user1_firstuser1_las',\n                    'name_first': 'user1_first',\n                    'name_last': 'user1_last',\n                    'profile_img_url': '',\n                    'u_id': 893}]} == {'all_members': [{'email': 'user1@email.com',\n                  'handle_str': 'user1_firstuser1_las',\n                  'name_first': 'user1_first',\n                  'name_last': 'user1_last',\n                  'u_id': 893},\n                 {'email': 'user2@email.com',\n                  'handle_str': 'user2_firstuser2_las',\n                  'name_first': 'user2_first',\n                  'name_last': 'user2_last',\n                  'u_id': 894}],\n 'is_public': True,\n 'name': 'Public',\n 'owner_members': [{'email': 'user1@email.com',\n                    'handle_str': 'user1_firstuser1_las',\n                    'name_first': 'user1_first',\n                    'name_last': 'user1_last',\n                    'u_id': 893},\n                   {'email': 'user2@email.com',\n                    'handle_str': 'user2_firstuser2_las',\n                    'name_first': 'user2_first',\n                    'name_last': 'user2_last',\n                    'u_id': 894}]}
E         Common items:
E         {'is_public': True, 'name': 'Public'}
E         Differing items:
E         {'all_members': [{'email': 'user2@email.com', 'handle_str': 'user2_firstuser2_las', 'name_first': 'user2_first', 'name...'user1@email.com', 'handle_str': 'user1_firstuser1_las', 'name_first': 'user1_first', 'name_last': 'user1_last', ...}]} != {'all_members': [{'email': 'user1@email.com', 'handle_str': 'user1_firstuser1_las', 'name_first': 'user1_first', 'name...'user2@email.com', 'handle_str': 'user2_firstuser2_las', 'name_first': 'user2_first', 'name_last': 'user2_last', ...}]}
E         {'owner_members': [{'email': 'user2@email.com', 'handle_str': 'user2_firstuser2_las', 'name_first': 'user2_first', 'na...'user1@email.com', 'handle_str': 'user1_firstuser1_las', 'name_first': 'user1_first', 'name_last': 'user1_last', ...}]} != {'owner_members': [{'email': 'user1@email.com', 'handle_str': 'user1_firstuser1_las', 'name_first': 'user1_first', 'na...'user2@email.com', 'handle_str': 'user2_firstuser2_las', 'name_first': 'user2_first', 'name_last': 'user2_last', ...}]}
E         Full diff:
E           {
E         -  'all_members': [{'email': 'user1@email.com',
E         ?                                 ^
E         +  'all_members': [{'email': 'user2@email.com',
E         ?                                 ^
E         +                   'handle_str': 'user2_firstuser2_las',
E         +                   'name_first': 'user2_first',
E         +                   'name_last': 'user2_last',
E         +                   'profile_img_url': '',
E         +                   'u_id': 894},
E         +                  {'email': 'user1@email.com',
E                             'handle_str': 'user1_firstuser1_las',
E                             'name_first': 'user1_first',
E                             'name_last': 'user1_last',
E         +                   'profile_img_url': '',
E         -                   'u_id': 893},
E         +                   'u_id': 893}],
E         ?                               +
E         -                  {'email': 'user2@email.com',
E         -                   'handle_str': 'user2_firstuser2_las',
E         -                   'name_first': 'user2_first',
E         -                   'name_last': 'user2_last',
E         -                   'u_id': 894}],
E            'is_public': True,
E            'name': 'Public',
E         -  'owner_members': [{'email': 'user1@email.com',
E         ?                                   ^
E         +  'owner_members': [{'email': 'user2@email.com',
E         ?                                   ^
E         +                     'handle_str': 'user2_firstuser2_las',
E         +                     'name_first': 'user2_first',
E         +                     'name_last': 'user2_last',
E         +                     'profile_img_url': '',
E         +                     'u_id': 894},
E         +                    {'email': 'user1@email.com',
E                               'handle_str': 'user1_firstuser1_las',
E                               'name_first': 'user1_first',
E                               'name_last': 'user1_last',
E         +                     'profile_img_url': '',
E         -                     'u_id': 893},
E         +                     'u_id': 893}],
E         ?                                 +
E         -                    {'email': 'user2@email.com',
E         -                     'handle_str': 'user2_firstuser2_las',
E         -                     'name_first': 'user2_first',
E         -                     'name_last': 'user2_last',
E         -                     'u_id': 894}],
E           }

http_tests/channel_removeowner_v1_http_test.py:127: AssertionError
___________________________ test_removeowner_dreams ____________________________

setup_user_data = {'user1': {'auth_user_id': 899, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjg5OSwibG9naW5fdGltZSI6MTYxODk...DUzMCwic2FsdCI6IjY0MDM2ODZiLTIzMWYtNDJhZC1iMDk4LTJlYzVmMDY2MzY3NSJ9.QIClW23-Rt9h3frKzdD2K-8Q-IMt7Y8x79YSx4f_mGw'}, ...}

    def test_removeowner_dreams(setup_user_data):
        users = setup_user_data
    
        # Creating a public channel as user2
        channel_id = requests.post(config.url + 'channels/create/v2', json={
            'token': users['user2']['token'],
            'name': 'Public',
            'is_public': True,
        }).json()
    
        # Join user3
        requests.post(config.url + 'channel/join/v2', json={
            'token': users['user3']['token'],
            'channel_id': channel_id['channel_id'],
        }).json()
    
        # Add user3 to onwer pool
        requests.post(config.url + 'channel/addowner/v1', json={
            'token': users['user2']['token'],
            'channel_id': channel_id['channel_id'],
            'u_id': users['user3']['auth_user_id'],
        }).json()
    
        # Get details
        channel_details = requests.get(config.url + 'channel/details/v2', params={
            'token': users['user2']['token'],
            'channel_id': channel_id['channel_id'],
        }).json()
    
>       assert channel_details == {
            'name': 'Public',
            'is_public': True,
            'owner_members': [
                {
                    'u_id': users['user2']['auth_user_id'],
                    'email': 'user2@email.com',
                    'name_first': 'user2_first',
                    'name_last': 'user2_last',
                    'handle_str': 'user2_firstuser2_las'
                },
                {
                    'u_id': users['user3']['auth_user_id'],
                    'email': 'user3@email.com',
                    'name_first': 'user3_first',
                    'name_last': 'user3_last',
                    'handle_str': 'user3_firstuser3_las'
                }
            ],
            'all_members': [
                {
                    'u_id': users['user2']['auth_user_id'],
                    'email': 'user2@email.com',
                    'name_first': 'user2_first',
                    'name_last': 'user2_last',
                    'handle_str': 'user2_firstuser2_las'
                },
                {
                    'u_id': users['user3']['auth_user_id'],
                    'email': 'user3@email.com',
                    'name_first': 'user3_first',
                    'name_last': 'user3_last',
                    'handle_str': 'user3_firstuser3_las'
                }
            ],
        }
E       AssertionError: assert {'all_members': [{'email': 'user2@email.com',\n                  'handle_str': 'user2_firstuser2_las',\n                  'name_first': 'user2_first',\n                  'name_last': 'user2_last',\n                  'profile_img_url': '',\n                  'u_id': 900},\n                 {'email': 'user3@email.com',\n                  'handle_str': 'user3_firstuser3_las',\n                  'name_first': 'user3_first',\n                  'name_last': 'user3_last',\n                  'profile_img_url': '',\n                  'u_id': 901}],\n 'is_public': True,\n 'name': 'Public',\n 'owner_members': [{'email': 'user2@email.com',\n                    'handle_str': 'user2_firstuser2_las',\n                    'name_first': 'user2_first',\n                    'name_last': 'user2_last',\n                    'profile_img_url': '',\n                    'u_id': 900},\n                   {'email': 'user3@email.com',\n                    'handle_str': 'user3_firstuser3_las',\n                    'name_first': 'user3_first',\n                    'name_last': 'user3_last',\n                    'profile_img_url': '',\n                    'u_id': 901}]} == {'all_members': [{'email': 'user2@email.com',\n                  'handle_str': 'user2_firstuser2_las',\n                  'name_first': 'user2_first',\n                  'name_last': 'user2_last',\n                  'u_id': 900},\n                 {'email': 'user3@email.com',\n                  'handle_str': 'user3_firstuser3_las',\n                  'name_first': 'user3_first',\n                  'name_last': 'user3_last',\n                  'u_id': 901}],\n 'is_public': True,\n 'name': 'Public',\n 'owner_members': [{'email': 'user2@email.com',\n                    'handle_str': 'user2_firstuser2_las',\n                    'name_first': 'user2_first',\n                    'name_last': 'user2_last',\n                    'u_id': 900},\n                   {'email': 'user3@email.com',\n                    'handle_str': 'user3_firstuser3_las',\n                    'name_first': 'user3_first',\n                    'name_last': 'user3_last',\n                    'u_id': 901}]}
E         Common items:
E         {'is_public': True, 'name': 'Public'}
E         Differing items:
E         {'all_members': [{'email': 'user2@email.com', 'handle_str': 'user2_firstuser2_las', 'name_first': 'user2_first', 'name...'user3@email.com', 'handle_str': 'user3_firstuser3_las', 'name_first': 'user3_first', 'name_last': 'user3_last', ...}]} != {'all_members': [{'email': 'user2@email.com', 'handle_str': 'user2_firstuser2_las', 'name_first': 'user2_first', 'name...'user3@email.com', 'handle_str': 'user3_firstuser3_las', 'name_first': 'user3_first', 'name_last': 'user3_last', ...}]}
E         {'owner_members': [{'email': 'user2@email.com', 'handle_str': 'user2_firstuser2_las', 'name_first': 'user2_first', 'na...'user3@email.com', 'handle_str': 'user3_firstuser3_las', 'name_first': 'user3_first', 'name_last': 'user3_last', ...}]} != {'owner_members': [{'email': 'user2@email.com', 'handle_str': 'user2_firstuser2_las', 'name_first': 'user2_first', 'na...'user3@email.com', 'handle_str': 'user3_firstuser3_las', 'name_first': 'user3_first', 'name_last': 'user3_last', ...}]}
E         Full diff:
E           {
E            'all_members': [{'email': 'user2@email.com',
E                             'handle_str': 'user2_firstuser2_las',
E                             'name_first': 'user2_first',
E                             'name_last': 'user2_last',
E         +                   'profile_img_url': '',
E                             'u_id': 900},
E                            {'email': 'user3@email.com',
E                             'handle_str': 'user3_firstuser3_las',
E                             'name_first': 'user3_first',
E                             'name_last': 'user3_last',
E         +                   'profile_img_url': '',
E                             'u_id': 901}],
E            'is_public': True,
E            'name': 'Public',
E            'owner_members': [{'email': 'user2@email.com',
E                               'handle_str': 'user2_firstuser2_las',
E                               'name_first': 'user2_first',
E                               'name_last': 'user2_last',
E         +                     'profile_img_url': '',
E                               'u_id': 900},
E                              {'email': 'user3@email.com',
E                               'handle_str': 'user3_firstuser3_las',
E                               'name_first': 'user3_first',
E                               'name_last': 'user3_last',
E         +                     'profile_img_url': '',
E                               'u_id': 901}],
E           }

http_tests/channel_removeowner_v1_http_test.py:236: AssertionError
_________________________ test_channels_list_multiple __________________________

setup_user_data = {'user1': {'auth_user_id': 944, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjk0NCwibG9naW5fdGltZSI6MTYxODk...DUzMSwic2FsdCI6IjZmODYzYzQxLWJmYmYtNDg1Ni1iZTI5LTZiNTcwMjg0MTIwNCJ9.0rQdcT0GZ9PSgCSy_UV1KL2Zsu699HTSwYeJb9pB-lY'}, ...}

    def test_channels_list_multiple(setup_user_data):
        users = setup_user_data
    
        channel_id3 = requests.post(config.url + 'channels/create/v2', json={
            'token': users['user2']['token'],
            'name': 'Public3',
            'is_public': True,
        }).json()
    
        channel_id4 = requests.post(config.url + 'channels/create/v2', json={
            'token': users['user2']['token'],
            'name': 'Private4',
            'is_public': False,
        }).json()
    
        channel_id5 = requests.post(config.url + 'channels/create/v2', json={
            'token': users['user2']['token'],
            'name': 'Public5',
            'is_public': True,
        }).json()
    
        # ensure channels_list returns correct values
        channel_list = requests.get(config.url + 'channels/list/v2', params={
            'token': users['user2']['token'],
        }).json()
    
>       assert channel_list['channels'][0]['channel_id'] == channel_id3['channel_id']
E       assert 950 == 949
E         +950
E         -949

http_tests/channels_list_v2_http_test.py:83: AssertionError
________________________________ test_function _________________________________

    def test_function():
        requests.delete(f"{url}clear/v1")
    
        a_u_id0 = requests.post(f"{url}auth/register/v2", json=user_body(0))
        user0 = a_u_id0.json()
    
        a_u_id1 = requests.post(f"{url}auth/register/v2", json=user_body(1))
        user1 = a_u_id1.json()
    
        dm_id0 = requests.post(f"{url}dm/create/v1", json=dm_create_body(user0, [user1]))
        dm0 = dm_id0.json()
    
        payload = requests.get(f"{url}dm/details/v1", params=dm_details_body(user0, dm0))
        dm_details = payload.json()
    
>       assert dm_details == {
            'name': 'first_name0last_name, first_name1last_name',
            'members': [
                {
                    'u_id': user0['auth_user_id'],
                    'email': "example0@hotmail.com",
                    'name_first': 'first_name0',
                    'name_last': 'last_name0',
                    'handle_str': 'first_name0last_name',
                },
                {
                    'u_id': user1['auth_user_id'],
                    'email': "example1@hotmail.com",
                    'name_first': 'first_name1',
                    'name_last': 'last_name1',
                    'handle_str': 'first_name1last_name',
                },
            ],
        }
E       AssertionError: assert {'members': [{'email': 'example0@hotmail.com',\n              'handle_str': 'first_name0last_name',\n              'name_first': 'first_name0',\n              'name_last': 'last_name0',\n              'profile_img_url': '',\n              'u_id': 976},\n             {'email': 'example1@hotmail.com',\n              'handle_str': 'first_name1last_name',\n              'name_first': 'first_name1',\n              'name_last': 'last_name1',\n              'profile_img_url': '',\n              'u_id': 977}],\n 'name': 'first_name0last_name, first_name1last_name'} == {'members': [{'email': 'example0@hotmail.com',\n              'handle_str': 'first_name0last_name',\n              'name_first': 'first_name0',\n              'name_last': 'last_name0',\n              'u_id': 976},\n             {'email': 'example1@hotmail.com',\n              'handle_str': 'first_name1last_name',\n              'name_first': 'first_name1',\n              'name_last': 'last_name1',\n              'u_id': 977}],\n 'name': 'first_name0last_name, first_name1last_name'}
E         Common items:
E         {'name': 'first_name0last_name, first_name1last_name'}
E         Differing items:
E         {'members': [{'email': 'example0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_name0', 'nam...ple1@hotmail.com', 'handle_str': 'first_name1last_name', 'name_first': 'first_name1', 'name_last': 'last_name1', ...}]} != {'members': [{'email': 'example0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_name0', 'nam...ple1@hotmail.com', 'handle_str': 'first_name1last_name', 'name_first': 'first_name1', 'name_last': 'last_name1', ...}]}
E         Full diff:
E           {
E            'members': [{'email': 'example0@hotmail.com',
E                         'handle_str': 'first_name0last_name',
E                         'name_first': 'first_name0',
E                         'name_last': 'last_name0',
E         +               'profile_img_url': '',
E                         'u_id': 976},
E                        {'email': 'example1@hotmail.com',
E                         'handle_str': 'first_name1last_name',
E                         'name_first': 'first_name1',
E                         'name_last': 'last_name1',
E         +               'profile_img_url': '',
E                         'u_id': 977}],
E            'name': 'first_name0last_name, first_name1last_name',
E           }

http_tests/dm_create_v1_http_test.py:50: AssertionError
________________________________ test_multiple _________________________________

    def test_multiple():
        requests.delete(f"{url}clear/v1")
    
        users = []
        for i in range(5):
            a_u_id = requests.post(f"{url}auth/register/v2", json=user_body(i))
            users.append(a_u_id.json())
    
        dm_id0 = requests.post(f"{url}dm/create/v1", json=dm_create_body(users[0], [users[1], users[2], users[3], users[4]]))
        dm0 = dm_id0.json()
    
        payload = requests.get(f"{url}dm/details/v1", params=dm_details_body(users[0], dm0))
        dm_details = payload.json()
    
>       assert dm_details == {
            'name': 'first_name0last_name, first_name1last_name, first_name2last_name, first_name3last_name, first_name4last_name',
            'members': [
                {
                    'u_id': users[0]['auth_user_id'],
                    'email': "example0@hotmail.com",
                    'name_first': 'first_name0',
                    'name_last': 'last_name0',
                    'handle_str': 'first_name0last_name',
                },
                {
                    'u_id': users[1]['auth_user_id'],
                    'email': "example1@hotmail.com",
                    'name_first': 'first_name1',
                    'name_last': 'last_name1',
                    'handle_str': 'first_name1last_name',
                },
                {
                    'u_id': users[2]['auth_user_id'],
                    'email': "example2@hotmail.com",
                    'name_first': 'first_name2',
                    'name_last': 'last_name2',
                    'handle_str': 'first_name2last_name',
                },
                {
                    'u_id': users[3]['auth_user_id'],
                    'email': "example3@hotmail.com",
                    'name_first': 'first_name3',
                    'name_last': 'last_name3',
                    'handle_str': 'first_name3last_name',
                },
                {
                    'u_id': users[4]['auth_user_id'],
                    'email': "example4@hotmail.com",
                    'name_first': 'first_name4',
                    'name_last': 'last_name4',
                    'handle_str': 'first_name4last_name',
                },
            ]
        }
E       AssertionError: assert {'members': [{'email': 'example1@hotmail.com',\n              'handle_str': 'first_name1last_name',\n              'name_first': 'first_name1',\n              'name_last': 'last_name1',\n              'profile_img_url': '',\n              'u_id': 980},\n             {'email': 'example0@hotmail.com',\n              'handle_str': 'first_name0last_name',\n              'name_first': 'first_name0',\n              'name_last': 'last_name0',\n              'profile_img_url': '',\n              'u_id': 979},\n             {'email': 'example3@hotmail.com',\n              'handle_str': 'first_name3last_name',\n              'name_first': 'first_name3',\n              'name_last': 'last_name3',\n              'profile_img_url': '',\n              'u_id': 982},\n             {'email': 'example4@hotmail.com',\n              'handle_str': 'first_name4last_name',\n              'name_first': 'first_name4',\n              'name_last': 'last_name4',\n              'profile_img_url': '',\n              'u_id': 983},\n             {'email': 'example2@hotmail.com',\n              'handle_str': 'first_name2last_name',\n              'name_first': 'first_name2',\n              'name_last': 'last_name2',\n              'profile_img_url': '',\n              'u_id': 981}],\n 'name': 'first_name0last_name, first_name1last_name, first_name2last_name, '\n         'first_name3last_name, first_name4last_name'} == {'members': [{'email': 'example0@hotmail.com',\n              'handle_str': 'first_name0last_name',\n              'name_first': 'first_name0',\n              'name_last': 'last_name0',\n              'u_id': 979},\n             {'email': 'example1@hotmail.com',\n              'handle_str': 'first_name1last_name',\n              'name_first': 'first_name1',\n              'name_last': 'last_name1',\n              'u_id': 980},\n             {'email': 'example2@hotmail.com',\n              'handle_str': 'first_name2last_name',\n              'name_first': 'first_name2',\n              'name_last': 'last_name2',\n              'u_id': 981},\n             {'email': 'example3@hotmail.com',\n              'handle_str': 'first_name3last_name',\n              'name_first': 'first_name3',\n              'name_last': 'last_name3',\n              'u_id': 982},\n             {'email': 'example4@hotmail.com',\n              'handle_str': 'first_name4last_name',\n              'name_first': 'first_name4',\n              'name_last': 'last_name4',\n              'u_id': 983}],\n 'name': 'first_name0last_name, first_name1last_name, first_name2last_name, '\n         'first_name3last_name, first_name4last_name'}
E         Common items:
E         {'name': 'first_name0last_name, first_name1last_name, first_name2last_name, '
E                  'first_name3last_name, first_name4last_name'}
E         Differing items:
E         {'members': [{'email': 'example1@hotmail.com', 'handle_str': 'first_name1last_name', 'name_first': 'first_name1', 'nam...ple2@hotmail.com', 'handle_str': 'first_name2last_name', 'name_first': 'first_name2', 'name_last': 'last_name2', ...}]} != {'members': [{'email': 'example0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_name0', 'nam...ple4@hotmail.com', 'handle_str': 'first_name4last_name', 'name_first': 'first_name4', 'name_last': 'last_name4', ...}]}
E         Full diff:
E           {
E         -  'members': [{'email': 'example0@hotmail.com',
E         ?                                ^
E         +  'members': [{'email': 'example1@hotmail.com',
E         ?                                ^
E         +               'handle_str': 'first_name1last_name',
E         +               'name_first': 'first_name1',
E         +               'name_last': 'last_name1',
E         +               'profile_img_url': '',
E         +               'u_id': 980},
E         +              {'email': 'example0@hotmail.com',
E                         'handle_str': 'first_name0last_name',
E                         'name_first': 'first_name0',
E                         'name_last': 'last_name0',
E         +               'profile_img_url': '',
E                         'u_id': 979},
E         -              {'email': 'example1@hotmail.com',
E         -               'handle_str': 'first_name1last_name',
E         -               'name_first': 'first_name1',
E         -               'name_last': 'last_name1',
E         -               'u_id': 980},
E         -              {'email': 'example2@hotmail.com',
E         -               'handle_str': 'first_name2last_name',
E         -               'name_first': 'first_name2',
E         -               'name_last': 'last_name2',
E         -               'u_id': 981},
E                        {'email': 'example3@hotmail.com',
E                         'handle_str': 'first_name3last_name',
E                         'name_first': 'first_name3',
E                         'name_last': 'last_name3',
E         +               'profile_img_url': '',
E                         'u_id': 982},
E                        {'email': 'example4@hotmail.com',
E                         'handle_str': 'first_name4last_name',
E                         'name_first': 'first_name4',
E                         'name_last': 'last_name4',
E         +               'profile_img_url': '',
E         -               'u_id': 983}],
E         ?                           -
E         +               'u_id': 983},
E         +              {'email': 'example2@hotmail.com',
E         +               'handle_str': 'first_name2last_name',
E         +               'name_first': 'first_name2',
E         +               'name_last': 'last_name2',
E         +               'profile_img_url': '',
E         +               'u_id': 981}],
E            'name': 'first_name0last_name, first_name1last_name, first_name2last_name, '
E                    'first_name3last_name, first_name4last_name',
E           }

http_tests/dm_create_v1_http_test.py:84: AssertionError
____________________________ test_empty_u_ids_list _____________________________

    def test_empty_u_ids_list():
        requests.delete(f"{url}clear/v1")
    
        a_u_id0 = requests.post(f"{url}auth/register/v2", json=user_body(0))
        user0 = a_u_id0.json()
    
        dm_id0 = requests.post(f"{url}dm/create/v1", json=dm_create_body(user0, []))
        dm0 = dm_id0.json()
    
        payload = requests.get(f"{url}dm/details/v1", params=dm_details_body(user0, dm0))
        dm_details = payload.json()
    
>       assert dm_details == {
            'name': 'first_name0last_name',
            'members': [
                {
                    'u_id': user0['auth_user_id'],
                    'email': "example0@hotmail.com",
                    'name_first': 'first_name0',
                    'name_last': 'last_name0',
                    'handle_str': 'first_name0last_name',
                },
            ],
        }
E       AssertionError: assert {'members': [{'email': 'example0@hotmail.com',\n              'handle_str': 'first_name0last_name',\n              'name_first': 'first_name0',\n              'name_last': 'last_name0',\n              'profile_img_url': '',\n              'u_id': 985}],\n 'name': 'first_name0last_name'} == {'members': [{'email': 'example0@hotmail.com',\n              'handle_str': 'first_name0last_name',\n              'name_first': 'first_name0',\n              'name_last': 'last_name0',\n              'u_id': 985}],\n 'name': 'first_name0last_name'}
E         Common items:
E         {'name': 'first_name0last_name'}
E         Differing items:
E         {'members': [{'email': 'example0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_name0', 'name_last': 'last_name0', ...}]} != {'members': [{'email': 'example0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_name0', 'name_last': 'last_name0', ...}]}
E         Full diff:
E           {
E            'members': [{'email': 'example0@hotmail.com',
E                         'handle_str': 'first_name0last_name',
E                         'name_first': 'first_name0',
E                         'name_last': 'last_name0',
E         +               'profile_img_url': '',
E                         'u_id': 985}],
E            'name': 'first_name0last_name',
E           }

http_tests/dm_create_v1_http_test.py:137: AssertionError
______________________________ test_invalid_token ______________________________

    def test_invalid_token():
        requests.delete(f"{url}clear/v1")
    
        a_u_id0 = requests.post(f"{url}auth/register/v2", json=user_body(0))
        user0 = a_u_id0.json()
    
        dm_id0 = requests.post(f"{url}dm/create/v1", json=dm_create_body({"token": 18936087134}, [user0]))
>       dm0 = dm_id0.json()

http_tests/dm_create_v1_http_test.py:157: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Invalid token</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
______________________________ test_invalid_user _______________________________

    def test_invalid_user():
        requests.delete(f"{url}clear/v1")
    
        a_u_id0 = requests.post(f"{url}auth/register/v2", json=user_body(0))
        user0 = a_u_id0.json()
    
        dm_id0 = requests.post(f"{url}dm/create/v1", json=dm_create_body(user0, [{"auth_user_id": 3295791357}]))
>       dm0 = dm_id0.json()

http_tests/dm_create_v1_http_test.py:170: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>400 Bad Request</title>\n<h1>Bad Request</h1>\n<p>3295791357 is not a valid ID</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
______________________________ test_invalid_dm_id ______________________________

    def test_invalid_dm_id():
        requests.delete(f"{url}clear/v1")
    
        a_u_id0 = requests.post(f"{url}auth/register/v2", json=user_body(0))
        user0 = a_u_id0.json()
    
        payload = requests.get(f"{url}dm/details/v1", params=dm_details_body(user0, {"dm_id": 5031705713}))
>       dm_details = payload.json()

http_tests/dm_details_v1_http_test.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>400 Bad Request</title>\n<h1>Bad Request</h1>\n<p>5031705713 is not a valid ID</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
______________________________ test_invalid_user _______________________________

    def test_invalid_user():
        requests.delete(f"{url}clear/v1")
    
        users = []
        for i in range(3):
            a_u_id = requests.post(f"{url}auth/register/v2", json=user_body(i))
            users.append(a_u_id.json())
    
        dm_id0 = requests.post(f"{url}dm/create/v1", json=dm_create_body(users[0], [users[1]]))
        dm0 = dm_id0.json()
    
        payload = requests.get(f"{url}dm/details/v1", params=dm_details_body(users[2], dm0))
>       dm_details = payload.json()

http_tests/dm_details_v1_http_test.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Only members can view details about this channel</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
______________________________ test_invalid_token ______________________________

    def test_invalid_token():
        requests.delete(f"{url}clear/v1")
    
        a_u_id0 = requests.post(f"{url}auth/register/v2", json=user_body(0))
        user0 = a_u_id0.json()
    
        a_u_id1 = requests.post(f"{url}auth/register/v2", json=user_body(1))
        user1 = a_u_id1.json()
    
        dm_id0 = requests.post(f"{url}dm/create/v1", json=dm_create_body(user0, [user1]))
        dm0 = dm_id0.json()
    
        payload = requests.get(f"{url}dm/details/v1", params=dm_details_body({"token": 501730570}, dm0))
>       dm_details = payload.json()

http_tests/dm_details_v1_http_test.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Invalid token</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
________________________________ test_function _________________________________

    def test_function():
        requests.delete(f"{url}clear/v1")
    
        users = []
        for i in range(3):
            a_u_id = requests.post(f"{url}auth/register/v2", json=user_body(i))
            users.append(a_u_id.json())
    
        dm_id0 = requests.post(f"{url}dm/create/v1", json=dm_create_body(users[0], [users[1]]))
        dm0 = dm_id0.json()
    
        requests.post(f"{url}dm/invite/v1", json=dm_invite_body(users[0], dm0, users[2]))
    
        payload = requests.get(f"{url}dm/details/v1", params=dm_details_body(users[0], dm0))
        dm_details = payload.json()
    
>       assert dm_details == {
            'name': 'first_name0last_name, first_name1last_name',
            'members': [
                {
                    'u_id': users[0]['auth_user_id'],
                    'email': "example0@hotmail.com",
                    'name_first': 'first_name0',
                    'name_last': 'last_name0',
                    'handle_str': 'first_name0last_name',
                },
                {
                    'u_id': users[1]['auth_user_id'],
                    'email': "example1@hotmail.com",
                    'name_first': 'first_name1',
                    'name_last': 'last_name1',
                    'handle_str': 'first_name1last_name',
                },
                {
                    'u_id': users[2]['auth_user_id'],
                    'email': "example2@hotmail.com",
                    'name_first': 'first_name2',
                    'name_last': 'last_name2',
                    'handle_str': 'first_name2last_name',
                },
            ],
        }
E       AssertionError: assert {'members': [{'email': 'example1@hotmail.com',\n              'handle_str': 'first_name1last_name',\n              'name_first': 'first_name1',\n              'name_last': 'last_name1',\n              'profile_img_url': '',\n              'u_id': 998},\n             {'email': 'example0@hotmail.com',\n              'handle_str': 'first_name0last_name',\n              'name_first': 'first_name0',\n              'name_last': 'last_name0',\n              'profile_img_url': '',\n              'u_id': 997},\n             {'email': 'example2@hotmail.com',\n              'handle_str': 'first_name2last_name',\n              'name_first': 'first_name2',\n              'name_last': 'last_name2',\n              'profile_img_url': '',\n              'u_id': 999}],\n 'name': 'first_name0last_name, first_name1last_name'} == {'members': [{'email': 'example0@hotmail.com',\n              'handle_str': 'first_name0last_name',\n              'name_first': 'first_name0',\n              'name_last': 'last_name0',\n              'u_id': 997},\n             {'email': 'example1@hotmail.com',\n              'handle_str': 'first_name1last_name',\n              'name_first': 'first_name1',\n              'name_last': 'last_name1',\n              'u_id': 998},\n             {'email': 'example2@hotmail.com',\n              'handle_str': 'first_name2last_name',\n              'name_first': 'first_name2',\n              'name_last': 'last_name2',\n              'u_id': 999}],\n 'name': 'first_name0last_name, first_name1last_name'}
E         Common items:
E         {'name': 'first_name0last_name, first_name1last_name'}
E         Differing items:
E         {'members': [{'email': 'example1@hotmail.com', 'handle_str': 'first_name1last_name', 'name_first': 'first_name1', 'nam...ple2@hotmail.com', 'handle_str': 'first_name2last_name', 'name_first': 'first_name2', 'name_last': 'last_name2', ...}]} != {'members': [{'email': 'example0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_name0', 'nam...ple2@hotmail.com', 'handle_str': 'first_name2last_name', 'name_first': 'first_name2', 'name_last': 'last_name2', ...}]}
E         Full diff:
E           {
E         -  'members': [{'email': 'example0@hotmail.com',
E         ?                                ^
E         +  'members': [{'email': 'example1@hotmail.com',
E         ?                                ^
E         +               'handle_str': 'first_name1last_name',
E         +               'name_first': 'first_name1',
E         +               'name_last': 'last_name1',
E         +               'profile_img_url': '',
E         +               'u_id': 998},
E         +              {'email': 'example0@hotmail.com',
E                         'handle_str': 'first_name0last_name',
E                         'name_first': 'first_name0',
E                         'name_last': 'last_name0',
E         +               'profile_img_url': '',
E                         'u_id': 997},
E         -              {'email': 'example1@hotmail.com',
E         -               'handle_str': 'first_name1last_name',
E         -               'name_first': 'first_name1',
E         -               'name_last': 'last_name1',
E         -               'u_id': 998},
E                        {'email': 'example2@hotmail.com',
E                         'handle_str': 'first_name2last_name',
E                         'name_first': 'first_name2',
E                         'name_last': 'last_name2',
E         +               'profile_img_url': '',
E                         'u_id': 999}],
E            'name': 'first_name0last_name, first_name1last_name',
E           }

http_tests/dm_invite_v1_http_test.py:58: AssertionError
________________________________ test_multiple _________________________________

    def test_multiple():
        requests.delete(f"{url}clear/v1")
    
        users = []
        for i in range(5):
            a_u_id = requests.post(f"{url}auth/register/v2", json=user_body(i))
            users.append(a_u_id.json())
    
        dm_id0 = requests.post(f"{url}dm/create/v1", json=dm_create_body(users[0], [users[1]]))
        dm0 = dm_id0.json()
    
        for i in range(3):
            requests.post(f"{url}dm/invite/v1", json=dm_invite_body(users[0], dm0, users[i + 2]))
    
        payload = requests.get(f"{url}dm/details/v1", params=dm_details_body(users[0], dm0))
        dm_details = payload.json()
    
>       assert dm_details == {
            'name': 'first_name0last_name, first_name1last_name',
            'members': [
                {
                    'u_id': users[0]['auth_user_id'],
                    'email': "example0@hotmail.com",
                    'name_first': 'first_name0',
                    'name_last': 'last_name0',
                    'handle_str': 'first_name0last_name',
                },
                {
                    'u_id': users[1]['auth_user_id'],
                    'email': "example1@hotmail.com",
                    'name_first': 'first_name1',
                    'name_last': 'last_name1',
                    'handle_str': 'first_name1last_name',
                },
                {
                    'u_id': users[2]['auth_user_id'],
                    'email': "example2@hotmail.com",
                    'name_first': 'first_name2',
                    'name_last': 'last_name2',
                    'handle_str': 'first_name2last_name',
                },
                {
                    'u_id': users[3]['auth_user_id'],
                    'email': "example3@hotmail.com",
                    'name_first': 'first_name3',
                    'name_last': 'last_name3',
                    'handle_str': 'first_name3last_name',
                },
                {
                    'u_id': users[4]['auth_user_id'],
                    'email': "example4@hotmail.com",
                    'name_first': 'first_name4',
                    'name_last': 'last_name4',
                    'handle_str': 'first_name4last_name',
                },
            ],
        }
E       AssertionError: assert {'members': [{'email': 'example0@hotmail.com',\n              'handle_str': 'first_name0last_name',\n              'name_first': 'first_name0',\n              'name_last': 'last_name0',\n              'profile_img_url': '',\n              'u_id': 1001},\n             {'email': 'example3@hotmail.com',\n              'handle_str': 'first_name3last_name',\n              'name_first': 'first_name3',\n              'name_last': 'last_name3',\n              'profile_img_url': '',\n              'u_id': 1004},\n             {'email': 'example2@hotmail.com',\n              'handle_str': 'first_name2last_name',\n              'name_first': 'first_name2',\n              'name_last': 'last_name2',\n              'profile_img_url': '',\n              'u_id': 1003},\n             {'email': 'example4@hotmail.com',\n              'handle_str': 'first_name4last_name',\n              'name_first': 'first_name4',\n              'name_last': 'last_name4',\n              'profile_img_url': '',\n              'u_id': 1005},\n             {'email': 'example1@hotmail.com',\n              'handle_str': 'first_name1last_name',\n              'name_first': 'first_name1',\n              'name_last': 'last_name1',\n              'profile_img_url': '',\n              'u_id': 1002}],\n 'name': 'first_name0last_name, first_name1last_name'} == {'members': [{'email': 'example0@hotmail.com',\n              'handle_str': 'first_name0last_name',\n              'name_first': 'first_name0',\n              'name_last': 'last_name0',\n              'u_id': 1001},\n             {'email': 'example1@hotmail.com',\n              'handle_str': 'first_name1last_name',\n              'name_first': 'first_name1',\n              'name_last': 'last_name1',\n              'u_id': 1002},\n             {'email': 'example2@hotmail.com',\n              'handle_str': 'first_name2last_name',\n              'name_first': 'first_name2',\n              'name_last': 'last_name2',\n              'u_id': 1003},\n             {'email': 'example3@hotmail.com',\n              'handle_str': 'first_name3last_name',\n              'name_first': 'first_name3',\n              'name_last': 'last_name3',\n              'u_id': 1004},\n             {'email': 'example4@hotmail.com',\n              'handle_str': 'first_name4last_name',\n              'name_first': 'first_name4',\n              'name_last': 'last_name4',\n              'u_id': 1005}],\n 'name': 'first_name0last_name, first_name1last_name'}
E         Common items:
E         {'name': 'first_name0last_name, first_name1last_name'}
E         Differing items:
E         {'members': [{'email': 'example0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_name0', 'nam...ple1@hotmail.com', 'handle_str': 'first_name1last_name', 'name_first': 'first_name1', 'name_last': 'last_name1', ...}]} != {'members': [{'email': 'example0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_name0', 'nam...ple4@hotmail.com', 'handle_str': 'first_name4last_name', 'name_first': 'first_name4', 'name_last': 'last_name4', ...}]}
E         Full diff:
E           {
E            'members': [{'email': 'example0@hotmail.com',
E                         'handle_str': 'first_name0last_name',
E                         'name_first': 'first_name0',
E                         'name_last': 'last_name0',
E         +               'profile_img_url': '',
E                         'u_id': 1001},
E         +              {'email': 'example3@hotmail.com',
E         +               'handle_str': 'first_name3last_name',
E         +               'name_first': 'first_name3',
E         +               'name_last': 'last_name3',
E         +               'profile_img_url': '',
E         +               'u_id': 1004},
E         +              {'email': 'example2@hotmail.com',
E         +               'handle_str': 'first_name2last_name',
E         +               'name_first': 'first_name2',
E         +               'name_last': 'last_name2',
E         +               'profile_img_url': '',
E         +               'u_id': 1003},
E         +              {'email': 'example4@hotmail.com',
E         +               'handle_str': 'first_name4last_name',
E         +               'name_first': 'first_name4',
E         +               'name_last': 'last_name4',
E         +               'profile_img_url': '',
E         +               'u_id': 1005},
E                        {'email': 'example1@hotmail.com',
E                         'handle_str': 'first_name1last_name',
E                         'name_first': 'first_name1',
E                         'name_last': 'last_name1',
E         +               'profile_img_url': '',
E         -               'u_id': 1002},
E         +               'u_id': 1002}],
E         ?                            +
E         -              {'email': 'example2@hotmail.com',
E         -               'handle_str': 'first_name2last_name',
E         -               'name_first': 'first_name2',
E         -               'name_last': 'last_name2',
E         -               'u_id': 1003},
E         -              {'email': 'example3@hotmail.com',
E         -               'handle_str': 'first_name3last_name',
E         -               'name_first': 'first_name3',
E         -               'name_last': 'last_name3',
E         -               'u_id': 1004},
E         -              {'email': 'example4@hotmail.com',
E         -               'handle_str': 'first_name4last_name',
E         -               'name_first': 'first_name4',
E         -               'name_last': 'last_name4',
E         -               'u_id': 1005}],
E            'name': 'first_name0last_name, first_name1last_name',
E           }

http_tests/dm_invite_v1_http_test.py:102: AssertionError
______________________________ test_invalid_token ______________________________

    def test_invalid_token():
        requests.delete(f"{url}clear/v1")
    
        users = []
        for i in range(3):
            a_u_id = requests.post(f"{url}auth/register/v2", json=user_body(i))
            users.append(a_u_id.json())
    
        dm_id0 = requests.post(f"{url}dm/create/v1", json=dm_create_body(users[0], [users[1]]))
        dm0 = dm_id0.json()
    
        r = requests.post(f"{url}dm/invite/v1", json=dm_invite_body({"token": 3165801385}, dm0, users[2]))
    
>       assert r.json()["code"] == 403

http_tests/dm_invite_v1_http_test.py:156: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Invalid token</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
______________________________ test_invalid_dm_id ______________________________

    def test_invalid_dm_id():
        requests.delete(f"{url}clear/v1")
    
        a_u_id0 = requests.post(f"{url}auth/register/v2", json=user_body(0))
        user0 = a_u_id0.json()
    
        a_u_id1 = requests.post(f"{url}auth/register/v2", json=user_body(1))
        user1 = a_u_id1.json()
    
        r = requests.post(f"{url}dm/invite/v1", json=dm_invite_body(user0, {"dm_id": 427602476}, user1))
    
>       assert r.json()["code"] == 400

http_tests/dm_invite_v1_http_test.py:171: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>400 Bad Request</title>\n<h1>Bad Request</h1>\n<p>427602476 is not a valid ID</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
______________________________ test_invalid_user _______________________________

    def test_invalid_user():
        requests.delete(f"{url}clear/v1")
    
        a_u_id0 = requests.post(f"{url}auth/register/v2", json=user_body(0))
        user0 = a_u_id0.json()
    
        a_u_id1 = requests.post(f"{url}auth/register/v2", json=user_body(1))
        user1 = a_u_id1.json()
    
        dm_id0 = requests.post(f"{url}dm/create/v1", json=dm_create_body(user0, [user1]))
        dm0 = dm_id0.json()
    
        r = requests.post(f"{url}dm/invite/v1", json=dm_invite_body(user0, dm0, {"auth_user_id": 671836071683}))
    
>       assert r.json()["code"] == 400

http_tests/dm_invite_v1_http_test.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>400 Bad Request</title>\n<h1>Bad Request</h1>\n<p>671836071683 is not a valid ID</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
____________________________ test_unauthorised_user ____________________________

    def test_unauthorised_user():
        requests.delete(f"{url}clear/v1")
    
        users = []
        for i in range(4):
            a_u_id = requests.post(f"{url}auth/register/v2", json=user_body(i))
            users.append(a_u_id.json())
    
        dm_id0 = requests.post(f"{url}dm/create/v1", json=dm_create_body(users[0], [users[1]]))
        dm0 = dm_id0.json()
    
        r = requests.post(f"{url}dm/invite/v1", json=dm_invite_body(users[2], dm0, users[3]))
    
>       assert r.json()["code"] == 403

http_tests/dm_invite_v1_http_test.py:206: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Only members can add members</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
________________________________ test_function _________________________________

    def test_function():
        requests.delete(f"{url}clear/v1")
    
        users = []
        for i in range(3):
            a_u_id = requests.post(f"{url}auth/register/v2", json=user_body(i))
            users.append(a_u_id.json())
    
        dm_id0 = requests.post(f"{url}dm/create/v1", json=dm_create_body(users[0], [users[1], users[2]]))
        dm0 = dm_id0.json()
    
        requests.post(f"{url}dm/leave/v1", json=dm_leave_body(users[1], dm0))
    
        payload = requests.get(f"{url}dm/details/v1", params=dm_details_body(users[0], dm0))
        dm_details = payload.json()
    
>       assert dm_details == {
            'name': 'first_name0last_name, first_name1last_name, first_name2last_name',
            'members': [
                {
                    'u_id': users[0]['auth_user_id'],
                    'email': "example0@hotmail.com",
                    'name_first': 'first_name0',
                    'name_last': 'last_name0',
                    'handle_str': 'first_name0last_name',
                },
                {
                    'u_id': users[2]['auth_user_id'],
                    'email': "example2@hotmail.com",
                    'name_first': 'first_name2',
                    'name_last': 'last_name2',
                    'handle_str': 'first_name2last_name',
                },
            ],
        }
E       AssertionError: assert {'members': [{'email': 'example2@hotmail.com',\n              'handle_str': 'first_name2last_name',\n              'name_first': 'first_name2',\n              'name_last': 'last_name2',\n              'profile_img_url': '',\n              'u_id': 1023},\n             {'email': 'example0@hotmail.com',\n              'handle_str': 'first_name0last_name',\n              'name_first': 'first_name0',\n              'name_last': 'last_name0',\n              'profile_img_url': '',\n              'u_id': 1021}],\n 'name': 'first_name0last_name, first_name1last_name, first_name2last_name'} == {'members': [{'email': 'example0@hotmail.com',\n              'handle_str': 'first_name0last_name',\n              'name_first': 'first_name0',\n              'name_last': 'last_name0',\n              'u_id': 1021},\n             {'email': 'example2@hotmail.com',\n              'handle_str': 'first_name2last_name',\n              'name_first': 'first_name2',\n              'name_last': 'last_name2',\n              'u_id': 1023}],\n 'name': 'first_name0last_name, first_name1last_name, first_name2last_name'}
E         Common items:
E         {'name': 'first_name0last_name, first_name1last_name, first_name2last_name'}
E         Differing items:
E         {'members': [{'email': 'example2@hotmail.com', 'handle_str': 'first_name2last_name', 'name_first': 'first_name2', 'nam...ple0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_name0', 'name_last': 'last_name0', ...}]} != {'members': [{'email': 'example0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_name0', 'nam...ple2@hotmail.com', 'handle_str': 'first_name2last_name', 'name_first': 'first_name2', 'name_last': 'last_name2', ...}]}
E         Full diff:
E           {
E         -  'members': [{'email': 'example0@hotmail.com',
E         ?                                ^
E         +  'members': [{'email': 'example2@hotmail.com',
E         ?                                ^
E         +               'handle_str': 'first_name2last_name',
E         +               'name_first': 'first_name2',
E         +               'name_last': 'last_name2',
E         +               'profile_img_url': '',
E         +               'u_id': 1023},
E         +              {'email': 'example0@hotmail.com',
E                         'handle_str': 'first_name0last_name',
E                         'name_first': 'first_name0',
E                         'name_last': 'last_name0',
E         +               'profile_img_url': '',
E         -               'u_id': 1021},
E         +               'u_id': 1021}],
E         ?                            +
E         -              {'email': 'example2@hotmail.com',
E         -               'handle_str': 'first_name2last_name',
E         -               'name_first': 'first_name2',
E         -               'name_last': 'last_name2',
E         -               'u_id': 1023}],
E            'name': 'first_name0last_name, first_name1last_name, first_name2last_name',
E           }

http_tests/dm_leave_v1_http_test.py:57: AssertionError
________________________________ test_multiple _________________________________

    def test_multiple():
        requests.delete(f"{url}clear/v1")
    
        users = []
        for i in range(5):
            a_u_id = requests.post(f"{url}auth/register/v2", json=user_body(i))
            users.append(a_u_id.json())
    
        dm_id0 = requests.post(f"{url}dm/create/v1", json=dm_create_body(users[0], [users[1], users[2], users[3], users[4]]))
        dm0 = dm_id0.json()
    
        for i in range(4):
            requests.post(f"{url}dm/leave/v1", json=dm_leave_body(users[i + 1], dm0))
    
        payload = requests.get(f"{url}dm/details/v1", params=dm_details_body(users[0], dm0))
        dm_details = payload.json()
    
>       assert dm_details == {
            'name': 'first_name0last_name, first_name1last_name, first_name2last_name, first_name3last_name, first_name4last_name',
            'members': [
                {
                    'u_id': users[0]['auth_user_id'],
                    'email': "example0@hotmail.com",
                    'name_first': 'first_name0',
                    'name_last': 'last_name0',
                    'handle_str': 'first_name0last_name',
                },
            ],
        }
E       AssertionError: assert {'members': [{'email': 'example0@hotmail.com',\n              'handle_str': 'first_name0last_name',\n              'name_first': 'first_name0',\n              'name_last': 'last_name0',\n              'profile_img_url': '',\n              'u_id': 1025}],\n 'name': 'first_name0last_name, first_name1last_name, first_name2last_name, '\n         'first_name3last_name, first_name4last_name'} == {'members': [{'email': 'example0@hotmail.com',\n              'handle_str': 'first_name0last_name',\n              'name_first': 'first_name0',\n              'name_last': 'last_name0',\n              'u_id': 1025}],\n 'name': 'first_name0last_name, first_name1last_name, first_name2last_name, '\n         'first_name3last_name, first_name4last_name'}
E         Common items:
E         {'name': 'first_name0last_name, first_name1last_name, first_name2last_name, '
E                  'first_name3last_name, first_name4last_name'}
E         Differing items:
E         {'members': [{'email': 'example0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_name0', 'name_last': 'last_name0', ...}]} != {'members': [{'email': 'example0@hotmail.com', 'handle_str': 'first_name0last_name', 'name_first': 'first_name0', 'name_last': 'last_name0', ...}]}
E         Full diff:
E           {
E            'members': [{'email': 'example0@hotmail.com',
E                         'handle_str': 'first_name0last_name',
E                         'name_first': 'first_name0',
E                         'name_last': 'last_name0',
E         +               'profile_img_url': '',
E                         'u_id': 1025}],
E            'name': 'first_name0last_name, first_name1last_name, first_name2last_name, '
E                    'first_name3last_name, first_name4last_name',
E           }

http_tests/dm_leave_v1_http_test.py:94: AssertionError
______________________________ test_invalid_token ______________________________

    def test_invalid_token():
        requests.delete(f"{url}clear/v1")
    
        a_u_id0 = requests.post(f"{url}auth/register/v2", json=user_body(0))
        user0 = a_u_id0.json()
    
        a_u_id1 = requests.post(f"{url}auth/register/v2", json=user_body(1))
        user1 = a_u_id1.json()
    
        dm_id0 = requests.post(f"{url}dm/create/v1", json=dm_create_body(user0, [user1]))
        dm0 = dm_id0.json()
    
        r = requests.post(f"{url}dm/leave/v1", json=dm_leave_body({"token": 573105791532}, dm0))
>       response = r.json()

http_tests/dm_leave_v1_http_test.py:120: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Invalid token</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
______________________________ test_invalid_dm_id ______________________________

    def test_invalid_dm_id():
        requests.delete(f"{url}clear/v1")
    
        a_u_id0 = requests.post(f"{url}auth/register/v2", json=user_body(0))
        user0 = a_u_id0.json()
    
        r = requests.post(f"{url}dm/leave/v1", json=dm_leave_body(user0, {"dm_id": 53120246942}))
>       response = r.json()

http_tests/dm_leave_v1_http_test.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>400 Bad Request</title>\n<h1>Bad Request</h1>\n<p>53120246942 is not a valid ID</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
____________________________ test_unauthorised_user ____________________________

    def test_unauthorised_user():
        requests.delete(f"{url}clear/v1")
    
        users = []
        for i in range(3):
            a_u_id = requests.post(f"{url}auth/register/v2", json=user_body(i))
            users.append(a_u_id.json())
    
        dm_id0 = requests.post(f"{url}dm/create/v1", json=dm_create_body(users[0], [users[1]]))
        dm0 = dm_id0.json()
    
        r = requests.post(f"{url}dm/leave/v1", json=dm_leave_body(users[2], dm0))
>       response = r.json()

http_tests/dm_leave_v1_http_test.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Not a member of first_name0last_name, first_name1last_name</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
________________________________ test_multiple _________________________________

    def test_multiple():
        requests.delete(f"{url}clear/v1")
    
        users = []
        for i in range(5):
            a_u_id = requests.post(f"{url}auth/register/v2", json=user_body(i))
            users.append(a_u_id.json())
    
        dms = []
        for i in range(4):
            dm_id = requests.post(f"{url}dm/create/v1", json=dm_create_body(users[0], [users[i + 1]]))
            dms.append(dm_id.json())
    
        r = requests.get(f"{url}dm/list/v1", params=dm_list_body(users[0]))
        dm_list = r.json()
    
>       assert dm_list == {
            'dms': [
                {
                    'dm_id': dms[0]['dm_id'],
                    'name': dms[0]['dm_name']
                },
                {
                    'dm_id': dms[1]['dm_id'],
                    'name': dms[1]['dm_name']
                },
                {
                    'dm_id': dms[2]['dm_id'],
                    'name': dms[2]['dm_name']
                },
                {
                    'dm_id': dms[3]['dm_id'],
                    'name': dms[3]['dm_name']
                }
            ]
        }
E       AssertionError: assert {'dms': [{'dm_id': 1049, 'name': 'first_name0last_name, first_name3last_name'},\n         {'dm_id': 1047, 'name': 'first_name0last_name, first_name1last_name'},\n         {'dm_id': 1050, 'name': 'first_name0last_name, first_name4last_name'},\n         {'dm_id': 1048, 'name': 'first_name0last_name, first_name2last_name'}]} == {'dms': [{'dm_id': 1047, 'name': 'first_name0last_name, first_name1last_name'},\n         {'dm_id': 1048, 'name': 'first_name0last_name, first_name2last_name'},\n         {'dm_id': 1049, 'name': 'first_name0last_name, first_name3last_name'},\n         {'dm_id': 1050, 'name': 'first_name0last_name, first_name4last_name'}]}
E         Differing items:
E         {'dms': [{'dm_id': 1049, 'name': 'first_name0last_name, first_name3last_name'}, {'dm_id': 1047, 'name': 'first_name0la... 'first_name0last_name, first_name4last_name'}, {'dm_id': 1048, 'name': 'first_name0last_name, first_name2last_name'}]} != {'dms': [{'dm_id': 1047, 'name': 'first_name0last_name, first_name1last_name'}, {'dm_id': 1048, 'name': 'first_name0la... 'first_name0last_name, first_name3last_name'}, {'dm_id': 1050, 'name': 'first_name0last_name, first_name4last_name'}]}
E         Full diff:
E           {
E         -  'dms': [{'dm_id': 1047, 'name': 'first_name0last_name, first_name1last_name'},
E         ?                       ^                                           ^
E         +  'dms': [{'dm_id': 1049, 'name': 'first_name0last_name, first_name3last_name'},
E         ?                       ^                                           ^
E         -          {'dm_id': 1048, 'name': 'first_name0last_name, first_name2last_name'},
E         ?                       ^                                           ^
E         +          {'dm_id': 1047, 'name': 'first_name0last_name, first_name1last_name'},
E         ?                       ^                                           ^
E         -          {'dm_id': 1049, 'name': 'first_name0last_name, first_name3last_name'},
E         -          {'dm_id': 1050, 'name': 'first_name0last_name, first_name4last_name'}],
E         ?                                                                               -
E         +          {'dm_id': 1050, 'name': 'first_name0last_name, first_name4last_name'},
E         +          {'dm_id': 1048, 'name': 'first_name0last_name, first_name2last_name'}],
E           }

http_tests/dm_list_v1_http_test.py:74: AssertionError
______________________________ test_invalid_token ______________________________

    def test_invalid_token():
        requests.delete(f"{url}clear/v1")
    
        r = requests.get(f"{url}dm/list/v1", params=dm_list_body({"token": 513875017835}))
>       dm_list = r.json()

http_tests/dm_list_v1_http_test.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Invalid token</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
_______________________ test_dm_messages_v1_AccessError ________________________

    def test_dm_messages_v1_AccessError():
        setup = set_up_data()
        user0, dm0 = setup['user0'], setup['dm0']
        a_u_id2 = requests.post(f"{url}auth/register/v2", json=user_body(2))
        user2 = a_u_id2.json()
    
        # Add 1 message to dm0
        send_x_message(user0, dm0, 1)
    
        # user2 is not part of dm0 - should raise an access error
        r = requests.get(f"{url}dm/messages/v1", params=dm_messages_body(user2, dm0, 0))
>       dm_messages = r.json()

http_tests/dm_messages_v1_http_test.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Only members can view messages</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
__________________ test_dm_messages_v1_InputError_invalid_dm ___________________

    def test_dm_messages_v1_InputError_invalid_dm():
        setup = set_up_data()
        user0, dm0 = setup['user0'], setup['dm0']
    
        # Add 1 message to dm0
        send_x_message(user0, dm0, 1)
    
        # 2 is an invalid dm_id in this case
        r = requests.get(f"{url}dm/messages/v1", params=dm_messages_body(user0, {"dm_id": 2}, 0))
>       dm_messages = r.json()

http_tests/dm_messages_v1_http_test.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>400 Bad Request</title>\n<h1>Bad Request</h1>\n<p>2 is not a valid ID</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
_________________ test_dm_messages_v1_InputError_invalid_start _________________

    def test_dm_messages_v1_InputError_invalid_start():
        setup = set_up_data()
        user0, dm0 = setup['user0'], setup['dm0']
    
        # Add 1 message to dm1
        send_x_message(user0, dm0, 1)
    
        r = requests.get(f"{url}dm/messages/v1", params=dm_messages_body(user0, dm0, 2))
>       dm_messages = r.json()

http_tests/dm_messages_v1_http_test.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>400 Bad Request</title>\n<h1>Bad Request</h1>\n<p>Incorrect pagination start (2 &gt; 1)</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
________________________________ test_multiple _________________________________

    def test_multiple():
        requests.delete(f"{url}clear/v1")
    
        users = []
        for i in range(5):
            a_u_id = requests.post(f"{url}auth/register/v2", json=user_body(i))
            users.append(a_u_id.json())
    
        dms = []
        for i in range(4):
            dm_id = requests.post(f"{url}dm/create/v1", json=dm_create_body(users[0], [users[i + 1]]))
            dms.append(dm_id.json())
    
        r = requests.get(f"{url}dm/list/v1", params=dm_list_body(users[0]))
        dm_list = r.json()
    
>       assert dm_list == {
            'dms': [
                {
                    'dm_id': dms[0]['dm_id'],
                    'name': dms[0]['dm_name']
                },
                {
                    'dm_id': dms[1]['dm_id'],
                    'name': dms[1]['dm_name']
                },
                {
                    'dm_id': dms[2]['dm_id'],
                    'name': dms[2]['dm_name']
                },
                {
                    'dm_id': dms[3]['dm_id'],
                    'name': dms[3]['dm_name']
                }
            ]
        }
E       AssertionError: assert {'dms': [{'dm_id': 1651, 'name': 'first_name0last_name, first_name4last_name'},\n         {'dm_id': 1650, 'name': 'first_name0last_name, first_name3last_name'},\n         {'dm_id': 1648, 'name': 'first_name0last_name, first_name1last_name'},\n         {'dm_id': 1649, 'name': 'first_name0last_name, first_name2last_name'}]} == {'dms': [{'dm_id': 1648, 'name': 'first_name0last_name, first_name1last_name'},\n         {'dm_id': 1649, 'name': 'first_name0last_name, first_name2last_name'},\n         {'dm_id': 1650, 'name': 'first_name0last_name, first_name3last_name'},\n         {'dm_id': 1651, 'name': 'first_name0last_name, first_name4last_name'}]}
E         Differing items:
E         {'dms': [{'dm_id': 1651, 'name': 'first_name0last_name, first_name4last_name'}, {'dm_id': 1650, 'name': 'first_name0la... 'first_name0last_name, first_name1last_name'}, {'dm_id': 1649, 'name': 'first_name0last_name, first_name2last_name'}]} != {'dms': [{'dm_id': 1648, 'name': 'first_name0last_name, first_name1last_name'}, {'dm_id': 1649, 'name': 'first_name0la... 'first_name0last_name, first_name3last_name'}, {'dm_id': 1651, 'name': 'first_name0last_name, first_name4last_name'}]}
E         Full diff:
E           {
E         -  'dms': [{'dm_id': 1648, 'name': 'first_name0last_name, first_name1last_name'},
E         ?                      ^^                                           ^
E         +  'dms': [{'dm_id': 1651, 'name': 'first_name0last_name, first_name4last_name'},
E         ?                      ^^                                           ^
E         -          {'dm_id': 1649, 'name': 'first_name0last_name, first_name2last_name'},
E                    {'dm_id': 1650, 'name': 'first_name0last_name, first_name3last_name'},
E         +          {'dm_id': 1648, 'name': 'first_name0last_name, first_name1last_name'},
E         -          {'dm_id': 1651, 'name': 'first_name0last_name, first_name4last_name'}],
E         ?                      ^^                                           ^
E         +          {'dm_id': 1649, 'name': 'first_name0last_name, first_name2last_name'}],
E         ?                      ^^                                           ^
E           }

http_tests/dm_remove_v1_http_test.py:87: AssertionError
______________________________ test_invalid_dm_id ______________________________

    def test_invalid_dm_id():
        requests.delete(f"{url}clear/v1")
    
        a_u_id0 = requests.post(f"{url}auth/register/v2", json=user_body(0))
        user0 = a_u_id0.json()
    
        r = requests.delete(f"{url}dm/remove/v1", json=dm_remove_body(user0, {"dm_id": 13601738017}))
>       response = r.json()

http_tests/dm_remove_v1_http_test.py:134: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>400 Bad Request</title>\n<h1>Bad Request</h1>\n<p>13601738017 is not a valid ID</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
____________________________ test_unauthorized_user ____________________________

    def test_unauthorized_user():
        requests.delete(f"{url}clear/v1")
    
        a_u_id0 = requests.post(f"{url}auth/register/v2", json=user_body(0))
        user0 = a_u_id0.json()
    
        a_u_id1 = requests.post(f"{url}auth/register/v2", json=user_body(1))
        user1 = a_u_id1.json()
    
        dm_id0 = requests.post(f"{url}dm/create/v1", json=dm_create_body(user0, [user1]))
        dm0 = dm_id0.json()
    
        r = requests.delete(f"{url}dm/remove/v1", json=dm_remove_body(user1, dm0))
>       response = r.json()

http_tests/dm_remove_v1_http_test.py:153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>You don\'t have permission to remove this DM</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
______________________________ test_invalid_token ______________________________

    def test_invalid_token():
        requests.delete(f"{url}clear/v1")
    
        a_u_id0 = requests.post(f"{url}auth/register/v2", json=user_body(0))
        user0 = a_u_id0.json()
    
        a_u_id1 = requests.post(f"{url}auth/register/v2", json=user_body(1))
        user1 = a_u_id1.json()
    
        dm_id0 = requests.post(f"{url}dm/create/v1", json=dm_create_body(user0, [user1]))
        dm0 = dm_id0.json()
    
        r = requests.delete(f"{url}dm/remove/v1", json=dm_remove_body({"token": 521580128575}, dm0))
>       response = r.json()

http_tests/dm_remove_v1_http_test.py:172: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Invalid token</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
______________________ test_http_message_edit_v2_edit_one ______________________

set_up_message_data = {'channel1': 1689, 'channel2': 1690, 'dm1': 1691, 'dm2': 1692, ...}

    def test_http_message_edit_v2_edit_one(set_up_message_data):
        setup = set_up_message_data
        user1, user2, channel1 = setup['user1'], setup['user2'], setup['channel1']
    
        # Send 3 messages and edit the very first message sent
        send_x_messages(user2, channel1, 3)
    
        channel_messages = requests.get(f"{url}channel/messages/v2", params= {
            "token": user2["token"],
            "channel_id": channel1,
            "start": 0
        }).json()
    
        m_id = channel_messages["messages"][2]["message_id"]
    
        messages_info = channel_messages["messages"][2]
    
        requests.put(f"{url}message/edit/v2", json={
            "token": user2["token"],
            "message_id": m_id,
            "message": "Hi"
        }).json()
    
        m_dict0 = {
            'message_id': messages_info['message_id'],
            'u_id': messages_info['u_id'],
            'message': 'Hi',
            'time_created': messages_info['time_created'],
            'reacts': [],
            'is_pinned': False,
        }
        m_dict1 = channel_messages["messages"][1]
        m_dict2 = channel_messages["messages"][0]
    
        answer = {
            'messages': [m_dict2, m_dict1, m_dict0],
            'start': 0,
            'end': -1
        }
    
        channel_messages_answer = requests.get(f"{url}channel/messages/v2", params= {
            "token": user1["token"],
            "channel_id": channel1,
            "start": 0
        }).json()
    
>       assert channel_messages_answer == answer
E       AssertionError: assert {'end': -1,\n 'messages': [{'is_pinned': False,\n               'message': '3',\n               'message_id': 1695,\n               'reacts': [{'is_this_user_reacted': False,\n                           'react_id': 1,\n                           'u_ids': []}],\n               'time_created': 1618938535,\n               'u_id': 1688},\n              {'is_pinned': False,\n               'message': '2',\n               'message_id': 1694,\n               'reacts': [{'is_this_user_reacted': False,\n                           'react_id': 1,\n                           'u_ids': []}],\n               'time_created': 1618938535,\n               'u_id': 1688},\n              {'is_pinned': False,\n               'message': 'Hi',\n               'message_id': 1693,\n               'reacts': [{'is_this_user_reacted': False,\n                           'react_id': 1,\n                           'u_ids': []}],\n               'time_created': 1618938535,\n               'u_id': 1688}],\n 'start': 0} == {'end': -1,\n 'messages': [{'is_pinned': False,\n               'message': '3',\n               'message_id': 1695,\n               'reacts': [{'is_this_user_reacted': False,\n                           'react_id': 1,\n                           'u_ids': []}],\n               'time_created': 1618938535,\n               'u_id': 1688},\n              {'is_pinned': False,\n               'message': '2',\n               'message_id': 1694,\n               'reacts': [{'is_this_user_reacted': False,\n                           'react_id': 1,\n                           'u_ids': []}],\n               'time_created': 1618938535,\n               'u_id': 1688},\n              {'is_pinned': False,\n               'message': 'Hi',\n               'message_id': 1693,\n               'reacts': [],\n               'time_created': 1618938535,\n               'u_id': 1688}],\n 'start': 0}
E         Common items:
E         {'end': -1, 'start': 0}
E         Differing items:
E         {'messages': [{'is_pinned': False, 'message': '3', 'message_id': 1695, 'reacts': [{'is_this_user_reacted': False, 'rea...e, 'message': 'Hi', 'message_id': 1693, 'reacts': [{'is_this_user_reacted': False, 'react_id': 1, 'u_ids': []}], ...}]} != {'messages': [{'is_pinned': False, 'message': '3', 'message_id': 1695, 'reacts': [{'is_this_user_reacted': False, 'rea...lse, 'react_id': 1, 'u_ids': []}], ...}, {'is_pinned': False, 'message': 'Hi', 'message_id': 1693, 'reacts': [], ...}]}
E         Full diff:
E           {
E            'end': -1,
E            'messages': [{'is_pinned': False,
E                          'message': '3',
E                          'message_id': 1695,
E                          'reacts': [{'is_this_user_reacted': False,
E                                      'react_id': 1,
E                                      'u_ids': []}],
E                          'time_created': 1618938535,
E                          'u_id': 1688},
E                         {'is_pinned': False,
E                          'message': '2',
E                          'message_id': 1694,
E                          'reacts': [{'is_this_user_reacted': False,
E                                      'react_id': 1,
E                                      'u_ids': []}],
E                          'time_created': 1618938535,
E                          'u_id': 1688},
E                         {'is_pinned': False,
E                          'message': 'Hi',
E                          'message_id': 1693,
E         -                'reacts': [],
E         +                'reacts': [{'is_this_user_reacted': False,
E         +                            'react_id': 1,
E         +                            'u_ids': []}],
E                          'time_created': 1618938535,
E                          'u_id': 1688}],
E            'start': 0,
E           }

http_tests/message_edit_v2_http_test.py:166: AssertionError
___________________ test_http_message_edit_v2_edit_multiple ____________________

set_up_message_data = {'channel1': 1698, 'channel2': 1699, 'dm1': 1700, 'dm2': 1701, ...}

    def test_http_message_edit_v2_edit_multiple(set_up_message_data):
        setup = set_up_message_data
        user2, channel1 = setup['user2'], setup['channel1']
    
        # Send 5 messages and edit messages with index 0, 2, 3
        send_x_messages(user2, channel1, 5)
    
        channel_msgs = requests.get(f"{url}channel/messages/v2", params= {
            "token": user2["token"],
            "channel_id": channel1,
            "start": 0
        }).json()
    
        m_id0 = channel_msgs["messages"][4]
        m_id2 = channel_msgs["messages"][2]
        m_id3 = channel_msgs["messages"][1]
    
        requests.put(f"{url}message/edit/v2", json={
            "token": user2["token"],
            "message_id": m_id0["message_id"],
            "message": "Hi"
        }).json()
    
        requests.put(f"{url}message/edit/v2", json={
            "token": user2["token"],
            "message_id": m_id2["message_id"],
            "message": "Hello"
        }).json()
    
        requests.put(f"{url}message/edit/v2", json={
            "token": user2["token"],
            "message_id": m_id3["message_id"],
            "message": "Hey"
        }).json()
    
        m_dict0 = {
            'message_id': m_id0['message_id'],
            'u_id': m_id0['u_id'],
            'message': 'Hi',
            'time_created': m_id0['time_created'],
            'reacts': [],
            'is_pinned': False,
        }
        m_dict2 = {
            'message_id': m_id2['message_id'],
            'u_id': m_id2['u_id'],
            'message': 'Hello',
            'time_created': m_id2['time_created'],
            'reacts': [],
            'is_pinned': False,
        }
        m_dict3 = {
            'message_id': m_id3['message_id'],
            'u_id': m_id3['u_id'],
            'message': 'Hey',
            'time_created': m_id3['time_created'],
            'reacts': [],
            'is_pinned': False,
        }
    
        m_dict1 = channel_msgs["messages"][3]
        m_dict4 = channel_msgs["messages"][0]
    
        answer = {
            'messages': [m_dict4, m_dict3, m_dict2, m_dict1, m_dict0],
            'start': 0,
            'end': -1
        }
        channel_messages_answer = requests.get(f"{url}channel/messages/v2", params= {
            "token": user2["token"],
            "channel_id": channel1,
            "start": 0
        }).json()
    
>       assert channel_messages_answer == answer
E       AssertionError: assert {'end': -1,\n 'messages': [{'is_pinned': False,\n               'message': '5',\n               'message_id': 1706,\n               'reacts': [{'is_this_user_reacted': False,\n                           'react_id': 1,\n                           'u_ids': []}],\n               'time_created': 1618938535,\n               'u_id': 1697},\n              {'is_pinned': False,\n               'message': 'Hey',\n               'message_id': 1705,\n               'reacts': [{'is_this_user_reacted': False,\n                           'react_id': 1,\n                           'u_ids': []}],\n               'time_created': 1618938535,\n               'u_id': 1697},\n              {'is_pinned': False,\n               'message': 'Hello',\n               'message_id': 1704,\n               'reacts': [{'is_this_user_reacted': False,\n                           'react_id': 1,\n                           'u_ids': []}],\n               'time_created': 1618938535,\n               'u_id': 1697},\n              {'is_pinned': False,\n               'message': '2',\n               'message_id': 1703,\n               'reacts': [{'is_this_user_reacted': False,\n                           'react_id': 1,\n                           'u_ids': []}],\n               'time_created': 1618938535,\n               'u_id': 1697},\n              {'is_pinned': False,\n               'message': 'Hi',\n               'message_id': 1702,\n               'reacts': [{'is_this_user_reacted': False,\n                           'react_id': 1,\n                           'u_ids': []}],\n               'time_created': 1618938535,\n               'u_id': 1697}],\n 'start': 0} == {'end': -1,\n 'messages': [{'is_pinned': False,\n               'message': '5',\n               'message_id': 1706,\n               'reacts': [{'is_this_user_reacted': False,\n                           'react_id': 1,\n                           'u_ids': []}],\n               'time_created': 1618938535,\n               'u_id': 1697},\n              {'is_pinned': False,\n               'message': 'Hey',\n               'message_id': 1705,\n               'reacts': [],\n               'time_created': 1618938535,\n               'u_id': 1697},\n              {'is_pinned': False,\n               'message': 'Hello',\n               'message_id': 1704,\n               'reacts': [],\n               'time_created': 1618938535,\n               'u_id': 1697},\n              {'is_pinned': False,\n               'message': '2',\n               'message_id': 1703,\n               'reacts': [{'is_this_user_reacted': False,\n                           'react_id': 1,\n                           'u_ids': []}],\n               'time_created': 1618938535,\n               'u_id': 1697},\n              {'is_pinned': False,\n               'message': 'Hi',\n               'message_id': 1702,\n               'reacts': [],\n               'time_created': 1618938535,\n               'u_id': 1697}],\n 'start': 0}
E         Common items:
E         {'end': -1, 'start': 0}
E         Differing items:
E         {'messages': [{'is_pinned': False, 'message': '5', 'message_id': 1706, 'reacts': [{'is_this_user_reacted': False, 'rea...e, 'message': 'Hi', 'message_id': 1702, 'reacts': [{'is_this_user_reacted': False, 'react_id': 1, 'u_ids': []}], ...}]} != {'messages': [{'is_pinned': False, 'message': '5', 'message_id': 1706, 'reacts': [{'is_this_user_reacted': False, 'rea...lse, 'react_id': 1, 'u_ids': []}], ...}, {'is_pinned': False, 'message': 'Hi', 'message_id': 1702, 'reacts': [], ...}]}
E         Full diff:
E           {
E            'end': -1,
E            'messages': [{'is_pinned': False,
E                          'message': '5',
E                          'message_id': 1706,
E                          'reacts': [{'is_this_user_reacted': False,
E                                      'react_id': 1,
E                                      'u_ids': []}],
E                          'time_created': 1618938535,
E                          'u_id': 1697},
E                         {'is_pinned': False,
E                          'message': 'Hey',
E                          'message_id': 1705,
E         -                'reacts': [],
E         +                'reacts': [{'is_this_user_reacted': False,
E         +                            'react_id': 1,
E         +                            'u_ids': []}],
E                          'time_created': 1618938535,
E                          'u_id': 1697},
E                         {'is_pinned': False,
E                          'message': 'Hello',
E                          'message_id': 1704,
E         -                'reacts': [],
E         +                'reacts': [{'is_this_user_reacted': False,
E         +                            'react_id': 1,
E         +                            'u_ids': []}],
E                          'time_created': 1618938535,
E                          'u_id': 1697},
E                         {'is_pinned': False,
E                          'message': '2',
E                          'message_id': 1703,
E                          'reacts': [{'is_this_user_reacted': False,
E                                      'react_id': 1,
E                                      'u_ids': []}],
E                          'time_created': 1618938535,
E                          'u_id': 1697},
E                         {'is_pinned': False,
E                          'message': 'Hi',
E                          'message_id': 1702,
E         -                'reacts': [],
E         +                'reacts': [{'is_this_user_reacted': False,
E         +                            'react_id': 1,
E         +                            'u_ids': []}],
E                          'time_created': 1618938535,
E                          'u_id': 1697}],
E            'start': 0,
E           }

http_tests/message_edit_v2_http_test.py:244: AssertionError
_________________ test_http_message_edit_v2_edit_all_messages __________________

set_up_message_data = {'channel1': 1709, 'channel2': 1710, 'dm1': 1711, 'dm2': 1712, ...}

    def test_http_message_edit_v2_edit_all_messages(set_up_message_data):
        setup = set_up_message_data
        user2, channel1 = setup['user2'], setup['channel1']
    
        # Send 5 messages and edit messages with index 0, 2, 3
        send_x_messages(user2, channel1, 5)
    
        channel_msgs = requests.get(f"{url}channel/messages/v2", params= {
            "token": user2["token"],
            "channel_id": channel1,
            "start": 0
        }).json()
    
        m_id0 = channel_msgs["messages"][4]
        m_id1 = channel_msgs["messages"][3]
        m_id2 = channel_msgs["messages"][2]
        m_id3 = channel_msgs["messages"][1]
        m_id4 = channel_msgs["messages"][0]
    
        requests.put(f"{url}message/edit/v2", json={
            "token": user2["token"],
            "message_id": m_id0["message_id"],
            "message": "Hi"
        }).json()
    
        requests.put(f"{url}message/edit/v2", json={
            "token": user2["token"],
            "message_id": m_id1["message_id"],
            "message": "Hello"
        }).json()
    
        requests.put(f"{url}message/edit/v2", json={
            "token": user2["token"],
            "message_id": m_id2["message_id"],
            "message": "Hey"
        }).json()
    
        requests.put(f"{url}message/edit/v2", json={
            "token": user2["token"],
            "message_id": m_id3["message_id"],
            "message": "Goodbye"
        }).json()
    
        requests.put(f"{url}message/edit/v2", json={
            "token": user2["token"],
            "message_id": m_id4["message_id"],
            "message": "Bye"
        }).json()
    
    
        m_dict0 = {
            'message_id': m_id0['message_id'],
            'u_id': m_id0['u_id'],
            'message': 'Hi',
            'time_created': m_id0['time_created'],
            'reacts': [],
            'is_pinned': False,
        }
    
        m_dict1 = {
            'message_id': m_id1['message_id'],
            'u_id': m_id1['u_id'],
            'message': 'Hello',
            'time_created': m_id1['time_created'],
            'reacts': [],
            'is_pinned': False,
        }
    
        m_dict2 = {
            'message_id': m_id2['message_id'],
            'u_id': m_id2['u_id'],
            'message': 'Hey',
            'time_created': m_id2['time_created'],
            'reacts': [],
            'is_pinned': False,
        }
    
        m_dict3 = {
            'message_id': m_id3['message_id'],
            'u_id': m_id3['u_id'],
            'message': 'Goodbye',
            'time_created': m_id3['time_created'],
            'reacts': [],
            'is_pinned': False,
        }
    
        m_dict4 = {
            'message_id': m_id4['message_id'],
            'u_id': m_id4['u_id'],
            'message': 'Bye',
            'time_created': m_id4['time_created'],
            'reacts': [],
            'is_pinned': False,
        }
    
        answer = {
            'messages': [m_dict4, m_dict3, m_dict2, m_dict1, m_dict0],
            'start': 0,
            'end': -1
        }
    
        channel_messages_answer = requests.get(f"{url}channel/messages/v2", params= {
            "token": user2["token"],
            "channel_id": channel1,
            "start": 0
        }).json()
    
>       assert channel_messages_answer == answer
E       AssertionError: assert {'end': -1,\n 'messages': [{'is_pinned': False,\n               'message': 'Bye',\n               'message_id': 1717,\n               'reacts': [{'is_this_user_reacted': False,\n                           'react_id': 1,\n                           'u_ids': []}],\n               'time_created': 1618938535,\n               'u_id': 1708},\n              {'is_pinned': False,\n               'message': 'Goodbye',\n               'message_id': 1716,\n               'reacts': [{'is_this_user_reacted': False,\n                           'react_id': 1,\n                           'u_ids': []}],\n               'time_created': 1618938535,\n               'u_id': 1708},\n              {'is_pinned': False,\n               'message': 'Hey',\n               'message_id': 1715,\n               'reacts': [{'is_this_user_reacted': False,\n                           'react_id': 1,\n                           'u_ids': []}],\n               'time_created': 1618938535,\n               'u_id': 1708},\n              {'is_pinned': False,\n               'message': 'Hello',\n               'message_id': 1714,\n               'reacts': [{'is_this_user_reacted': False,\n                           'react_id': 1,\n                           'u_ids': []}],\n               'time_created': 1618938535,\n               'u_id': 1708},\n              {'is_pinned': False,\n               'message': 'Hi',\n               'message_id': 1713,\n               'reacts': [{'is_this_user_reacted': False,\n                           'react_id': 1,\n                           'u_ids': []}],\n               'time_created': 1618938535,\n               'u_id': 1708}],\n 'start': 0} == {'end': -1,\n 'messages': [{'is_pinned': False,\n               'message': 'Bye',\n               'message_id': 1717,\n               'reacts': [],\n               'time_created': 1618938535,\n               'u_id': 1708},\n              {'is_pinned': False,\n               'message': 'Goodbye',\n               'message_id': 1716,\n               'reacts': [],\n               'time_created': 1618938535,\n               'u_id': 1708},\n              {'is_pinned': False,\n               'message': 'Hey',\n               'message_id': 1715,\n               'reacts': [],\n               'time_created': 1618938535,\n               'u_id': 1708},\n              {'is_pinned': False,\n               'message': 'Hello',\n               'message_id': 1714,\n               'reacts': [],\n               'time_created': 1618938535,\n               'u_id': 1708},\n              {'is_pinned': False,\n               'message': 'Hi',\n               'message_id': 1713,\n               'reacts': [],\n               'time_created': 1618938535,\n               'u_id': 1708}],\n 'start': 0}
E         Common items:
E         {'end': -1, 'start': 0}
E         Differing items:
E         {'messages': [{'is_pinned': False, 'message': 'Bye', 'message_id': 1717, 'reacts': [{'is_this_user_reacted': False, 'r...e, 'message': 'Hi', 'message_id': 1713, 'reacts': [{'is_this_user_reacted': False, 'react_id': 1, 'u_ids': []}], ...}]} != {'messages': [{'is_pinned': False, 'message': 'Bye', 'message_id': 1717, 'reacts': [], ...}, {'is_pinned': False, 'mes... 'message_id': 1714, 'reacts': [], ...}, {'is_pinned': False, 'message': 'Hi', 'message_id': 1713, 'reacts': [], ...}]}
E         Full diff:
E           {
E            'end': -1,
E            'messages': [{'is_pinned': False,
E                          'message': 'Bye',
E                          'message_id': 1717,
E         -                'reacts': [],
E         +                'reacts': [{'is_this_user_reacted': False,
E         +                            'react_id': 1,
E         +                            'u_ids': []}],
E                          'time_created': 1618938535,
E                          'u_id': 1708},
E                         {'is_pinned': False,
E                          'message': 'Goodbye',
E                          'message_id': 1716,
E         -                'reacts': [],
E         +                'reacts': [{'is_this_user_reacted': False,
E         +                            'react_id': 1,
E         +                            'u_ids': []}],
E                          'time_created': 1618938535,
E                          'u_id': 1708},
E                         {'is_pinned': False,
E                          'message': 'Hey',
E                          'message_id': 1715,
E         -                'reacts': [],
E         +                'reacts': [{'is_this_user_reacted': False,
E         +                            'react_id': 1,
E         +                            'u_ids': []}],
E                          'time_created': 1618938535,
E                          'u_id': 1708},
E                         {'is_pinned': False,
E                          'message': 'Hello',
E                          'message_id': 1714,
E         -                'reacts': [],
E         +                'reacts': [{'is_this_user_reacted': False,
E         +                            'react_id': 1,
E         +                            'u_ids': []}],
E                          'time_created': 1618938535,
E                          'u_id': 1708},
E                         {'is_pinned': False,
E                          'message': 'Hi',
E                          'message_id': 1713,
E         -                'reacts': [],
E         +                'reacts': [{'is_this_user_reacted': False,
E         +                            'react_id': 1,
E         +                            'u_ids': []}],
E                          'time_created': 1618938535,
E                          'u_id': 1708}],
E            'start': 0,
E           }

http_tests/message_edit_v2_http_test.py:355: AssertionError
________________ test_http_message_edit_v2_owner_edits_message _________________

    def test_http_message_edit_v2_owner_edits_message():
        requests.delete(f"{url}clear/v1")
    
        user1 = requests.post(f"{url}auth/register/v2", json = { # Dreams owner
            "email": "bob.builder@email.com",
            "password": "badpassword1",
            "name_first": "Bob",
            "name_last": "Builder"
        }).json()
    
        user2 = requests.post(f"{url}auth/register/v2", json = {
            "email": "shaun.sheep@email.com",
            "password": "password123",
            "name_first": "Shaun",
            "name_last": "Sheep"
        }).json()
    
        user3 = requests.post(f"{url}auth/register/v2", json = {
            "email": "thomas.tankengine@email.com",
            "password": "password123",
            "name_first": "Thomas",
            "name_last": "Tankengine"
        }).json()
    
        # User2 makes channel1 and invites user3
        channel1 = requests.post(f"{url}channels/create/v2", json = {
            "token": user2["token"],
            "name": "Channel1",
            "is_public": True
        }).json()
    
        requests.post(f"{url}channel/invite/v2", json = {
            "token": user2["token"],
            "channel_id": channel1["channel_id"],
            "u_id": user3["auth_user_id"]
        }).json()
    
        requests.post(f"{url}channel/invite/v2", json = {
            "token": user2["token"],
            "channel_id": channel1["channel_id"],
            "u_id": user1["auth_user_id"]
        }).json()
    
        # user3 sends 3 messages and user2 edits the very first message sent
        send_x_messages(user3, channel1["channel_id"], 3)
    
        channel_msgs = requests.get(f"{url}channel/messages/v2", params= {
            "token": user2["token"],
            "channel_id": channel1["channel_id"],
            "start": 0
        }).json()
    
        msg1 = channel_msgs['messages'][1]
    
        requests.put(f"{url}message/edit/v2", json={
            "token": user2["token"],
            "message_id": msg1["message_id"],
            "message": "Bao"
        }).json()
    
        m_dict1 = {
            'message_id': msg1['message_id'],
            'u_id': msg1['u_id'],
            'message': 'Bao',
            'time_created': msg1['time_created'],
            'reacts': [],
            'is_pinned': False,
        }
        m_dict0 = channel_msgs['messages'][2]
        m_dict2 = channel_msgs['messages'][0]
    
        answer = {
            'messages': [m_dict2, m_dict1, m_dict0],
            'start': 0,
            'end': -1
        }
        channel_messages_answer = requests.get(f"{url}channel/messages/v2", params= {
            "token": user2["token"],
            "channel_id": channel1["channel_id"],
            "start": 0
        }).json()
    
>       assert channel_messages_answer == answer
E       AssertionError: assert {'end': -1,\n 'messages': [{'is_pinned': False,\n               'message': '3',\n               'message_id': 1724,\n               'reacts': [{'is_this_user_reacted': False,\n                           'react_id': 1,\n                           'u_ids': []}],\n               'time_created': 1618938535,\n               'u_id': 1720},\n              {'is_pinned': False,\n               'message': 'Bao',\n               'message_id': 1723,\n               'reacts': [{'is_this_user_reacted': False,\n                           'react_id': 1,\n                           'u_ids': []}],\n               'time_created': 1618938535,\n               'u_id': 1720},\n              {'is_pinned': False,\n               'message': '1',\n               'message_id': 1722,\n               'reacts': [{'is_this_user_reacted': False,\n                           'react_id': 1,\n                           'u_ids': []}],\n               'time_created': 1618938535,\n               'u_id': 1720}],\n 'start': 0} == {'end': -1,\n 'messages': [{'is_pinned': False,\n               'message': '3',\n               'message_id': 1724,\n               'reacts': [{'is_this_user_reacted': False,\n                           'react_id': 1,\n                           'u_ids': []}],\n               'time_created': 1618938535,\n               'u_id': 1720},\n              {'is_pinned': False,\n               'message': 'Bao',\n               'message_id': 1723,\n               'reacts': [],\n               'time_created': 1618938535,\n               'u_id': 1720},\n              {'is_pinned': False,\n               'message': '1',\n               'message_id': 1722,\n               'reacts': [{'is_this_user_reacted': False,\n                           'react_id': 1,\n                           'u_ids': []}],\n               'time_created': 1618938535,\n               'u_id': 1720}],\n 'start': 0}
E         Common items:
E         {'end': -1, 'start': 0}
E         Differing items:
E         {'messages': [{'is_pinned': False, 'message': '3', 'message_id': 1724, 'reacts': [{'is_this_user_reacted': False, 'rea...se, 'message': '1', 'message_id': 1722, 'reacts': [{'is_this_user_reacted': False, 'react_id': 1, 'u_ids': []}], ...}]} != {'messages': [{'is_pinned': False, 'message': '3', 'message_id': 1724, 'reacts': [{'is_this_user_reacted': False, 'rea...se, 'message': '1', 'message_id': 1722, 'reacts': [{'is_this_user_reacted': False, 'react_id': 1, 'u_ids': []}], ...}]}
E         Full diff:
E           {
E            'end': -1,
E            'messages': [{'is_pinned': False,
E                          'message': '3',
E                          'message_id': 1724,
E                          'reacts': [{'is_this_user_reacted': False,
E                                      'react_id': 1,
E                                      'u_ids': []}],
E                          'time_created': 1618938535,
E                          'u_id': 1720},
E                         {'is_pinned': False,
E                          'message': 'Bao',
E                          'message_id': 1723,
E         -                'reacts': [],
E         +                'reacts': [{'is_this_user_reacted': False,
E         +                            'react_id': 1,
E         +                            'u_ids': []}],
E                          'time_created': 1618938535,
E                          'u_id': 1720},
E                         {'is_pinned': False,
E                          'message': '1',
E                          'message_id': 1722,
E                          'reacts': [{'is_this_user_reacted': False,
E                                      'react_id': 1,
E                                      'u_ids': []}],
E                          'time_created': 1618938535,
E                          'u_id': 1720}],
E            'start': 0,
E           }

http_tests/message_edit_v2_http_test.py:441: AssertionError
_____________ test_http_message_edit_v2_dream_owner_edits_message ______________

    def test_http_message_edit_v2_dream_owner_edits_message():
        requests.delete(f"{url}clear/v1")
    
        user1 = requests.post(f"{url}auth/register/v2", json = { # Dreams owner
            "email": "bob.builder@email.com",
            "password": "badpassword1",
            "name_first": "Bob",
            "name_last": "Builder"
        }).json()
    
        user2 = requests.post(f"{url}auth/register/v2", json = {
            "email": "shaun.sheep@email.com",
            "password": "password123",
            "name_first": "Shaun",
            "name_last": "Sheep"
        }).json()
    
        user3 = requests.post(f"{url}auth/register/v2", json = {
            "email": "thomas.tankengine@email.com",
            "password": "password123",
            "name_first": "Thomas",
            "name_last": "Tankengine"
        }).json()
    
        # User2 makes channel1 and invites user3
        channel1 = requests.post(f"{url}channels/create/v2", json = {
            "token": user2["token"],
            "name": "Channel1",
            "is_public": True
        }).json()
    
        requests.post(f"{url}channel/invite/v2", json = {
            "token": user2["token"],
            "channel_id": channel1["channel_id"],
            "u_id": user3["auth_user_id"]
        }).json()
    
        # user3 sends 3 messages and user1 (dreams owner) who is not in the channel
        # removes the very first message sent
        send_x_messages(user3, channel1["channel_id"], 3)
    
        channel_msgs = requests.get(f"{url}channel/messages/v2", params= {
            "token": user2["token"],
            "channel_id": channel1["channel_id"],
            "start": 0
        }).json()
    
        msg1 = channel_msgs['messages'][1]
    
        requests.put(f"{url}message/edit/v2", json={
            "token": user1["token"],
            "message_id": msg1["message_id"],
            "message": "HELLO!"
        }).json()
    
    
        m_dict1 = {
            'message_id': msg1['message_id'],
            'u_id': msg1['u_id'],
            'message': 'HELLO!',
            'time_created': msg1['time_created'],
            'reacts': [],
            'is_pinned': False,
        }
        m_dict0 = channel_msgs['messages'][2]
        m_dict2 = channel_msgs['messages'][0]
    
        answer = {
            'messages': [m_dict2, m_dict1, m_dict0],
            'start': 0,
            'end': -1
        }
    
        channel_messages_answer = requests.get(f"{url}channel/messages/v2", params= {
            "token": user2["token"],
            "channel_id": channel1["channel_id"],
            "start": 0
        }).json()
    
>       assert channel_messages_answer == answer
E       AssertionError: assert {'end': -1,\n 'messages': [{'is_pinned': False,\n               'message': '3',\n               'message_id': 1731,\n               'reacts': [{'is_this_user_reacted': False,\n                           'react_id': 1,\n                           'u_ids': []}],\n               'time_created': 1618938536,\n               'u_id': 1727},\n              {'is_pinned': False,\n               'message': 'HELLO!',\n               'message_id': 1730,\n               'reacts': [{'is_this_user_reacted': False,\n                           'react_id': 1,\n                           'u_ids': []}],\n               'time_created': 1618938536,\n               'u_id': 1727},\n              {'is_pinned': False,\n               'message': '1',\n               'message_id': 1729,\n               'reacts': [{'is_this_user_reacted': False,\n                           'react_id': 1,\n                           'u_ids': []}],\n               'time_created': 1618938536,\n               'u_id': 1727}],\n 'start': 0} == {'end': -1,\n 'messages': [{'is_pinned': False,\n               'message': '3',\n               'message_id': 1731,\n               'reacts': [{'is_this_user_reacted': False,\n                           'react_id': 1,\n                           'u_ids': []}],\n               'time_created': 1618938536,\n               'u_id': 1727},\n              {'is_pinned': False,\n               'message': 'HELLO!',\n               'message_id': 1730,\n               'reacts': [],\n               'time_created': 1618938536,\n               'u_id': 1727},\n              {'is_pinned': False,\n               'message': '1',\n               'message_id': 1729,\n               'reacts': [{'is_this_user_reacted': False,\n                           'react_id': 1,\n                           'u_ids': []}],\n               'time_created': 1618938536,\n               'u_id': 1727}],\n 'start': 0}
E         Common items:
E         {'end': -1, 'start': 0}
E         Differing items:
E         {'messages': [{'is_pinned': False, 'message': '3', 'message_id': 1731, 'reacts': [{'is_this_user_reacted': False, 'rea...se, 'message': '1', 'message_id': 1729, 'reacts': [{'is_this_user_reacted': False, 'react_id': 1, 'u_ids': []}], ...}]} != {'messages': [{'is_pinned': False, 'message': '3', 'message_id': 1731, 'reacts': [{'is_this_user_reacted': False, 'rea...se, 'message': '1', 'message_id': 1729, 'reacts': [{'is_this_user_reacted': False, 'react_id': 1, 'u_ids': []}], ...}]}
E         Full diff:
E           {
E            'end': -1,
E            'messages': [{'is_pinned': False,
E                          'message': '3',
E                          'message_id': 1731,
E                          'reacts': [{'is_this_user_reacted': False,
E                                      'react_id': 1,
E                                      'u_ids': []}],
E                          'time_created': 1618938536,
E                          'u_id': 1727},
E                         {'is_pinned': False,
E                          'message': 'HELLO!',
E                          'message_id': 1730,
E         -                'reacts': [],
E         +                'reacts': [{'is_this_user_reacted': False,
E         +                            'react_id': 1,
E         +                            'u_ids': []}],
E                          'time_created': 1618938536,
E                          'u_id': 1727},
E                         {'is_pinned': False,
E                          'message': '1',
E                          'message_id': 1729,
E                          'reacts': [{'is_this_user_reacted': False,
E                                      'react_id': 1,
E                                      'u_ids': []}],
E                          'time_created': 1618938536,
E                          'u_id': 1727}],
E            'start': 0,
E           }

http_tests/message_edit_v2_http_test.py:525: AssertionError
________ test_http_message_edit_v2_dream_owner_edits_message_in_channel ________

    def test_http_message_edit_v2_dream_owner_edits_message_in_channel():
        requests.delete(f"{url}clear/v1")
    
        user1 = requests.post(f"{url}auth/register/v2", json = { # Dreams owner
            "email": "bob.builder@email.com",
            "password": "badpassword1",
            "name_first": "Bob",
            "name_last": "Builder"
        }).json()
    
        user2 = requests.post(f"{url}auth/register/v2", json = {
            "email": "shaun.sheep@email.com",
            "password": "password123",
            "name_first": "Shaun",
            "name_last": "Sheep"
        }).json()
    
        user3 = requests.post(f"{url}auth/register/v2", json = {
            "email": "thomas.tankengine@email.com",
            "password": "password123",
            "name_first": "Thomas",
            "name_last": "Tankengine"
        }).json()
    
        # User2 makes channel1 and invites user3 and user1
        channel1 = requests.post(f"{url}channels/create/v2", json = {
            "token": user2["token"],
            "name": "Channel1",
            "is_public": True
        }).json()
    
        requests.post(f"{url}channel/invite/v2", json = {
            "token": user2["token"],
            "channel_id": channel1["channel_id"],
            "u_id": user3["auth_user_id"]
        }).json()
    
        requests.post(f"{url}channel/invite/v2", json = {
            "token": user2["token"],
            "channel_id": channel1["channel_id"],
            "u_id": user1["auth_user_id"]
        }).json()
    
    
        # user3 sends 3 messages and user1 (dreams owner) who is in the channel
        # edits the second message sent (which they did not send)
        send_x_messages(user3, channel1["channel_id"], 3)
    
        channel_msgs = requests.get(f"{url}channel/messages/v2", params= {
            "token": user2["token"],
            "channel_id": channel1["channel_id"],
            "start": 0
        }).json()
    
        msg1 = channel_msgs['messages'][1]
    
        requests.put(f"{url}message/edit/v2", json={
            "token": user1["token"],
            "message_id": msg1["message_id"],
            "message": "Testing?"
        }).json()
    
    
        m_dict1 = {
            'message_id': msg1['message_id'],
            'u_id': msg1['u_id'],
            'message': 'Testing?',
            'time_created': msg1['time_created'],
            'reacts': [],
            'is_pinned': False,
        }
        m_dict0 = channel_msgs['messages'][2]
        m_dict2 = channel_msgs['messages'][0]
    
        answer = {
            'messages': [m_dict2, m_dict1, m_dict0],
            'start': 0,
            'end': -1
        }
    
        channel_messages_answer = requests.get(f"{url}channel/messages/v2", params= {
            "token": user2["token"],
            "channel_id": channel1["channel_id"],
            "start": 0
        }).json()
    
>       assert channel_messages_answer == answer
E       AssertionError: assert {'end': -1,\n 'messages': [{'is_pinned': False,\n               'message': '3',\n               'message_id': 1738,\n               'reacts': [{'is_this_user_reacted': False,\n                           'react_id': 1,\n                           'u_ids': []}],\n               'time_created': 1618938536,\n               'u_id': 1734},\n              {'is_pinned': False,\n               'message': 'Testing?',\n               'message_id': 1737,\n               'reacts': [{'is_this_user_reacted': False,\n                           'react_id': 1,\n                           'u_ids': []}],\n               'time_created': 1618938536,\n               'u_id': 1734},\n              {'is_pinned': False,\n               'message': '1',\n               'message_id': 1736,\n               'reacts': [{'is_this_user_reacted': False,\n                           'react_id': 1,\n                           'u_ids': []}],\n               'time_created': 1618938536,\n               'u_id': 1734}],\n 'start': 0} == {'end': -1,\n 'messages': [{'is_pinned': False,\n               'message': '3',\n               'message_id': 1738,\n               'reacts': [{'is_this_user_reacted': False,\n                           'react_id': 1,\n                           'u_ids': []}],\n               'time_created': 1618938536,\n               'u_id': 1734},\n              {'is_pinned': False,\n               'message': 'Testing?',\n               'message_id': 1737,\n               'reacts': [],\n               'time_created': 1618938536,\n               'u_id': 1734},\n              {'is_pinned': False,\n               'message': '1',\n               'message_id': 1736,\n               'reacts': [{'is_this_user_reacted': False,\n                           'react_id': 1,\n                           'u_ids': []}],\n               'time_created': 1618938536,\n               'u_id': 1734}],\n 'start': 0}
E         Common items:
E         {'end': -1, 'start': 0}
E         Differing items:
E         {'messages': [{'is_pinned': False, 'message': '3', 'message_id': 1738, 'reacts': [{'is_this_user_reacted': False, 'rea...se, 'message': '1', 'message_id': 1736, 'reacts': [{'is_this_user_reacted': False, 'react_id': 1, 'u_ids': []}], ...}]} != {'messages': [{'is_pinned': False, 'message': '3', 'message_id': 1738, 'reacts': [{'is_this_user_reacted': False, 'rea...se, 'message': '1', 'message_id': 1736, 'reacts': [{'is_this_user_reacted': False, 'react_id': 1, 'u_ids': []}], ...}]}
E         Full diff:
E           {
E            'end': -1,
E            'messages': [{'is_pinned': False,
E                          'message': '3',
E                          'message_id': 1738,
E                          'reacts': [{'is_this_user_reacted': False,
E                                      'react_id': 1,
E                                      'u_ids': []}],
E                          'time_created': 1618938536,
E                          'u_id': 1734},
E                         {'is_pinned': False,
E                          'message': 'Testing?',
E                          'message_id': 1737,
E         -                'reacts': [],
E         +                'reacts': [{'is_this_user_reacted': False,
E         +                            'react_id': 1,
E         +                            'u_ids': []}],
E                          'time_created': 1618938536,
E                          'u_id': 1734},
E                         {'is_pinned': False,
E                          'message': '1',
E                          'message_id': 1736,
E                          'reacts': [{'is_this_user_reacted': False,
E                                      'react_id': 1,
E                                      'u_ids': []}],
E                          'time_created': 1618938536,
E                          'u_id': 1734}],
E            'start': 0,
E           }

http_tests/message_edit_v2_http_test.py:616: AssertionError
_____________________ test_message_edit_v2_edit_msg_in_dm ______________________

set_up_message_data = {'channel1': 1761, 'channel2': 1762, 'dm1': 1763, 'dm2': 1764, ...}

    def test_message_edit_v2_edit_msg_in_dm(set_up_message_data):
        setup = set_up_message_data
        user1, dm1 = setup['user1'], setup['dm1']
    
        message_count = 0
        while message_count < 5:
            message_num = message_count + 1
            requests.post(f"{url}message/senddm/v1", json= {
                "token": user1["token"],
                "dm_id": dm1,
                "message": str(message_num)
            }).json()
            message_count += 1
    
        dm_msgs = requests.get(f"{url}dm/messages/v1", params= {
            "token": user1["token"],
            "dm_id": dm1,
            "start": 0
        }).json()
    
        msg0 = dm_msgs['messages'][4]
        msg2 = dm_msgs['messages'][2]
        msg3 = dm_msgs['messages'][1]
    
        requests.put(f"{url}message/edit/v2", json={
            "token": user1["token"],
            "message_id": msg0["message_id"],
            "message": "Hey"
        }).json()
    
        requests.put(f"{url}message/edit/v2", json={
            "token": user1["token"],
            "message_id": msg2["message_id"],
            "message": ""
        }).json()
    
        requests.put(f"{url}message/edit/v2", json={
            "token": user1["token"],
            "message_id": msg3["message_id"],
            "message": "Hello"
        }).json()
    
        m_dict1 = dm_msgs['messages'][3]
        m_dict4 = dm_msgs['messages'][0]
    
        m_dict0 = {
            'message_id': msg0['message_id'],
            'u_id': msg0['u_id'],
            'message': 'Hey',
            'time_created': msg0['time_created'],
            'reacts': [],
            'is_pinned': False,
        }
        m_dict3 = {
            'message_id': msg3['message_id'],
            'u_id': msg3['u_id'],
            'message': 'Hello',
            'time_created': msg3['time_created'],
            'reacts': [],
            'is_pinned': False,
        }
    
        answer = {
            'messages': [m_dict4, m_dict3, m_dict1, m_dict0],
            'start': 0,
            'end': -1
        }
    
    
        dm_messages_answer = requests.get(f"{url}dm/messages/v1", params= {
            "token": user1["token"],
            "dm_id": dm1,
            "start": 0
        }).json()
    
>       assert dm_messages_answer == answer
E       AssertionError: assert {'end': -1,\n 'messages': [{'is_pinned': False,\n               'message': '5',\n               'message_id': 1769,\n               'reacts': [{'is_this_user_reacted': False,\n                           'react_id': 1,\n                           'u_ids': []}],\n               'time_created': 1618938536,\n               'u_id': 1759},\n              {'is_pinned': False,\n               'message': 'Hello',\n               'message_id': 1768,\n               'reacts': [{'is_this_user_reacted': False,\n                           'react_id': 1,\n                           'u_ids': []}],\n               'time_created': 1618938536,\n               'u_id': 1759},\n              {'is_pinned': False,\n               'message': '2',\n               'message_id': 1766,\n               'reacts': [{'is_this_user_reacted': False,\n                           'react_id': 1,\n                           'u_ids': []}],\n               'time_created': 1618938536,\n               'u_id': 1759},\n              {'is_pinned': False,\n               'message': 'Hey',\n               'message_id': 1765,\n               'reacts': [{'is_this_user_reacted': False,\n                           'react_id': 1,\n                           'u_ids': []}],\n               'time_created': 1618938536,\n               'u_id': 1759}],\n 'start': 0} == {'end': -1,\n 'messages': [{'is_pinned': False,\n               'message': '5',\n               'message_id': 1769,\n               'reacts': [{'is_this_user_reacted': False,\n                           'react_id': 1,\n                           'u_ids': []}],\n               'time_created': 1618938536,\n               'u_id': 1759},\n              {'is_pinned': False,\n               'message': 'Hello',\n               'message_id': 1768,\n               'reacts': [],\n               'time_created': 1618938536,\n               'u_id': 1759},\n              {'is_pinned': False,\n               'message': '2',\n               'message_id': 1766,\n               'reacts': [{'is_this_user_reacted': False,\n                           'react_id': 1,\n                           'u_ids': []}],\n               'time_created': 1618938536,\n               'u_id': 1759},\n              {'is_pinned': False,\n               'message': 'Hey',\n               'message_id': 1765,\n               'reacts': [],\n               'time_created': 1618938536,\n               'u_id': 1759}],\n 'start': 0}
E         Common items:
E         {'end': -1, 'start': 0}
E         Differing items:
E         {'messages': [{'is_pinned': False, 'message': '5', 'message_id': 1769, 'reacts': [{'is_this_user_reacted': False, 'rea..., 'message': 'Hey', 'message_id': 1765, 'reacts': [{'is_this_user_reacted': False, 'react_id': 1, 'u_ids': []}], ...}]} != {'messages': [{'is_pinned': False, 'message': '5', 'message_id': 1769, 'reacts': [{'is_this_user_reacted': False, 'rea...se, 'react_id': 1, 'u_ids': []}], ...}, {'is_pinned': False, 'message': 'Hey', 'message_id': 1765, 'reacts': [], ...}]}
E         Full diff:
E           {
E            'end': -1,
E            'messages': [{'is_pinned': False,
E                          'message': '5',
E                          'message_id': 1769,
E                          'reacts': [{'is_this_user_reacted': False,
E                                      'react_id': 1,
E                                      'u_ids': []}],
E                          'time_created': 1618938536,
E                          'u_id': 1759},
E                         {'is_pinned': False,
E                          'message': 'Hello',
E                          'message_id': 1768,
E         -                'reacts': [],
E         +                'reacts': [{'is_this_user_reacted': False,
E         +                            'react_id': 1,
E         +                            'u_ids': []}],
E                          'time_created': 1618938536,
E                          'u_id': 1759},
E                         {'is_pinned': False,
E                          'message': '2',
E                          'message_id': 1766,
E                          'reacts': [{'is_this_user_reacted': False,
E                                      'react_id': 1,
E                                      'u_ids': []}],
E                          'time_created': 1618938536,
E                          'u_id': 1759},
E                         {'is_pinned': False,
E                          'message': 'Hey',
E                          'message_id': 1765,
E         -                'reacts': [],
E         +                'reacts': [{'is_this_user_reacted': False,
E         +                            'react_id': 1,
E         +                            'u_ids': []}],
E                          'time_created': 1618938536,
E                          'u_id': 1759}],
E            'start': 0,
E           }

http_tests/message_edit_v2_http_test.py:792: AssertionError
___________________ test_message_react_v1_different_messages ___________________

setup_user_data = {'user1': {'auth_user_id': 1922, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjE5MjIsImxvZ2luX3RpbWUiOjE2MT...1MzcsInNhbHQiOiIxNmU3Y2VkZC0xNmQwLTQ4NmYtYTYxNS1hYmMyYjYyMzUwY2IifQ.fH9Dc15t4m8R_gSkWWceaetMuVntRyLU1PcDP7wP110'}, ...}

    def test_message_react_v1_different_messages(setup_user_data):
        users = setup_user_data
    
        # Creating a basic public channel
        channel_id1 = requests.post(config.url + 'channels/create/v2', json={
            'token': users['user1']['token'],
            'name': 'Basic Stuff',
            'is_public': True,
        }).json()
    
        # Join user2
        requests.post(config.url + 'channel/join/v2', json={
            'token': users['user2']['token'],
            'channel_id': channel_id1['channel_id']
        }).json()
    
        # User 1 sends a message in channel_id1
        message1 = requests.post(config.url + 'message/send/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "Welcome to channel"
        }).json()
    
        # User 2 likes the message
        requests.post(config.url + 'message/react/v1', json={
            'token': users['user2']['token'],
            'message_id': message1["message_id"],
            'react_id': like,
        }).json()
    
        # User 2 sends a message in channel_id1
        message2 = requests.post(config.url + 'message/send/v2', json={
            'token': users['user2']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "hello sir pooh"
        }).json()
    
        # User 1 likes the message
        requests.post(config.url + 'message/react/v1', json={
            'token': users['user1']['token'],
            'message_id': message2["message_id"],
            'react_id': like,
        }).json()
    
        # User 1 sends a message in channel_id1
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "moo me honey"
        }).json()
    
        # Check that channel details have all been set correctly
        channel1_messages = requests.get(config.url + 'channel/messages/v2', params={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'start': 0
        }).json()
    
    
        assert channel1_messages['messages'][2]["reacts"][0]["u_ids"] == [users['user2']["auth_user_id"]]
        assert channel1_messages['messages'][2]["reacts"][0]["react_id"] == 1
    
        assert channel1_messages['messages'][1]["reacts"][0]["u_ids"] == [users['user1']["auth_user_id"]]
        assert channel1_messages['messages'][1]["reacts"][0]["react_id"] == 1
    
>       assert channel1_messages['messages'][0]["reacts"] == []
E       AssertionError: assert [{'is_this_user_reacted': False, 'react_id': 1, 'u_ids': []}] == []
E         Left contains one more item: {'is_this_user_reacted': False, 'react_id': 1, 'u_ids': []}
E         Full diff:
E         - []
E         + [{'is_this_user_reacted': False, 'react_id': 1, 'u_ids': []}]

http_tests/message_react_v1_http_test.py:395: AssertionError
_____________________ test_message_senddm_v1_access_error ______________________

setup_user_data = {'user1': {'auth_user_id': 2196, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjIxOTYsImxvZ2luX3RpbWUiOjE2MT...1MzksInNhbHQiOiJlN2Y1YTJiNi0xNjM0LTQ4ZGItYTRiMy1mNzQzYTg4MGNjNzMifQ.oFszZReVOuiYi807tWQAoxFld8ziyc7COTsNsG5l-UM'}, ...}

    def test_message_senddm_v1_access_error(setup_user_data):
        users = setup_user_data
    
        # Creating a dm
        u_id_list = [users['user2'],users['user3']]
        dm_id1 = requests.post(config.url + 'dm/create/v1', json=dm_create_body(users['user1'],u_id_list)).json()
    
        # Invalidate an existing token to guarantee a token is invalid
        invalid_token = users['user1']['token']
        requests.post(config.url + 'auth/logout/v1', json={
            'token': invalid_token
        })
    
        # Ensure AccessError
>       assert requests.post(config.url + 'message/senddm/v1', json={
            'token': invalid_token,
            'dm_id': dm_id1,
            'message': "Hello",
        }).status_code == 403
E       assert 500 == 403
E         +500
E         -403

http_tests/message_senddm_http_test.py:43: AssertionError
_____________ test_http_message_sendlater_v1_default_Access_Error ______________

    def test_http_message_sendlater_v1_default_Access_Error():
    
        current_time = round(datetime.now().timestamp())
        send_time = current_time + 1
    
        response = requests.post(f"{url}message/sendlater/v1", json={
            "token": "inval",
            "channel_id": "channel",
            "message": "wrong",
            "time_sent": send_time
        })
>       assert response.status_code == 403
E       assert 500 == 403
E         +500
E         -403

http_tests/message_sendlater_v1_http_test.py:90: AssertionError
_____________ test_http_message_send_later_v1_send_multiple_after ______________

set_up_data = {'channel1': 2275, 'dm1': 2276, 'user1': {'auth_user_id': 2272, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQ...1NDAsInNhbHQiOiJmMWY2MTdlMy0yYjZjLTQ4MTAtOWM0Zi1hYzllYjI4MDkyMDgifQ.hGNYKpFlhtNYYONtUnfVKflrP_eK4J6B-oWgcHT6R3A'}, ...}

    def test_http_message_send_later_v1_send_multiple_after(set_up_data):
        setup = set_up_data
        user1, user2, channel1 = setup['user1'], setup['user2'], setup['channel1']
        requests.post(f"{url}channel/invite/v2", json=channel_invite_body(user1, channel1, user2)).json()
    
        # Assert that there are no messages within the channel
        channel_messages = requests.get(f"{url}channel/messages/v2",\
                        params=channel_messages_body(user1, channel1, 0)).json()
        assert len(channel_messages['messages']) == 0
    
        # Delay 1 message by 1 second
        current_time = round(datetime.now().timestamp())
        send_time = current_time + 1
        requests.post(f"{url}message/sendlater/v1", json=message_sendlater_body(user1, channel1, "Hello", send_time)).json()
    
        send_x_messages(user1, user2, channel1, 20)
        # 1 second hasn't passed yet, so the number of messages should just be 20
        channel_msgs = requests.get(f"{url}channel/messages/v2",\
                        params=channel_messages_body(user1, channel1, 0)).json()
        assert len(channel_msgs['messages']) == 20
    
        # Put the current test to sleep for 1.5 seconds, send another message and
        # then check that message send later worked properly
        time.sleep(1.5)
        requests.post(f"{url}message/send/v2", json=message_send_body(user2, channel1, "Bye!")).json()
    
        channel_messages_ans = requests.get(f"{url}channel/messages/v2",\
                                params=channel_messages_body(user1, channel1, 0)).json()
    
>       assert len(channel_messages_ans['messages']) == 22
E       assert 21 == 22
E         +21
E         -22

http_tests/message_sendlater_v1_http_test.py:161: AssertionError
______ test_http_message_send_later_v1_leave_channel_before_message_sent _______

set_up_data = {'channel1': 2302, 'dm1': 2303, 'user1': {'auth_user_id': 2299, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQ...1NDIsInNhbHQiOiI2NmE4ZTNlNS03N2JkLTRlNWYtYjk5Zi0zMGVhZmY3OTMxNjUifQ.aHZORVBrQ_5rhNXmp2XwVH7QuOuPK7rpSVYhP9Pqs3w'}, ...}

    def test_http_message_send_later_v1_leave_channel_before_message_sent(set_up_data):
        setup = set_up_data
        user1, user2, channel1 = setup['user1'], setup['user2'], setup['channel1']
        requests.post(f"{url}channel/invite/v2", json=channel_invite_body(user1, channel1, user2)).json()
    
        current_time = round(datetime.now().timestamp())
        send_time = current_time + 1
    
        requests.post(f"{url}message/send/v2", json=message_send_body(user1, channel1, "Hi!")).json()
    
        requests.post(f"{url}message/sendlater/v1", json=message_sendlater_body(user2, channel1, "I'm leaving.", send_time)).json()
    
        requests.post(f"{url}channel/leave/v1", json=channel_leave_body(user2, channel1)).json()
    
        requests.post(f"{url}message/send/v2", json=message_send_body(user1, channel1, "Nice to meet you")).json()
    
        channel_messages = requests.get(f"{url}channel/messages/v2",\
                                params=channel_messages_body(user1, channel1, 0)).json()
    
        assert len(channel_messages['messages']) == 2
        assert channel_messages['messages'][0]['message'] == "Nice to meet you"
        assert channel_messages['messages'][1]['message'] == "Hi!"
    
        # Put the current test to sleep for 1.5 seconds and then check that the message was
        # correctly sent
        time.sleep(1.5)
    
        channel_messages_ans = requests.get(f"{url}channel/messages/v2",\
                                params=channel_messages_body(user1, channel1, 0)).json()
    
>       assert len(channel_messages_ans['messages']) == 3
E       assert 2 == 3
E         +2
E         -3

http_tests/message_sendlater_v1_http_test.py:200: AssertionError
____________ test_http_message_sendlaterdm_v1_default_Access_Error _____________

    def test_http_message_sendlaterdm_v1_default_Access_Error():
    
        current_time = round(datetime.now().timestamp())
        send_time = current_time + 1
    
        response = requests.post(f"{url}message/sendlaterdm/v1", json={
            "token": "inval",
            "dm_id": "dm",
            "message": "wrong",
            "time_sent": send_time
        })
>       assert response.status_code == 403
E       assert 500 == 403
E         +500
E         -403

http_tests/message_sendlaterdm_v1_http_test.py:90: AssertionError
_____________ test_http_message_sendlaterdm_v1_send_multiple_after _____________

set_up_data = {'channel1': 2336, 'dm1': 2337, 'user1': {'auth_user_id': 2333, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQ...1NDUsInNhbHQiOiI3NzYxYzlmOS1kYTMyLTRkMTQtYmZjZi1iYTlkNGZhYzVlNjgifQ.gwxSzGYZQAkd-dumcqLd2ndHaR6S0Blr3XPNqYHzvKU'}, ...}

    def test_http_message_sendlaterdm_v1_send_multiple_after(set_up_data):
        setup = set_up_data
        user1, user3, dm1 = setup['user1'], setup['user3'], setup['dm1']
        requests.post(f"{url}dm/invite/v1", json=dm_invite_body(user1, dm1, user3)).json()
    
        # Assert that there are no messages within the dm
        dm_messages = requests.get(f"{url}dm/messages/v1",\
                        params=dm_messages_body(user1, dm1, 0)).json()
        assert len(dm_messages['messages']) == 0
    
        # Delay 1 message by 1 second
        current_time = round(datetime.now().timestamp())
        send_time = current_time + 1
        requests.post(f"{url}message/sendlaterdm/v1", json=message_sendlaterdm_body(user1, dm1, "Hello", send_time)).json()
    
        send_x_messages(user1, user3, dm1, 20)
        # 1 second hasn't passed yet, so the number of messages should just be 20
        dm_msgs = requests.get(f"{url}dm/messages/v1",\
                        params=dm_messages_body(user1, dm1, 0)).json()
        assert len(dm_msgs['messages']) == 20
    
        # Put the current test to sleep for 1.5 seconds, send another message and
        # then check that message send later worked properly
        time.sleep(1.5)
        requests.post(f"{url}message/senddm/v1", json=message_senddm_body(user3, dm1, "Bye!")).json()
    
        dm_messages_ans = requests.get(f"{url}dm/messages/v1",\
                                params=dm_messages_body(user1, dm1, 0)).json()
    
>       assert len(dm_messages_ans['messages']) == 22
E       assert 21 == 22
E         +21
E         -22

http_tests/message_sendlaterdm_v1_http_test.py:161: AssertionError
________ test_http_message_sendlaterdm_v1_leave_dm_before_message_sent _________

set_up_data = {'channel1': 2363, 'dm1': 2364, 'user1': {'auth_user_id': 2360, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQ...1NDcsInNhbHQiOiJiMzI2ZmE0Mi05ZGMxLTQxYTUtOGI5OS1jZWVjMGZhMmM1YWYifQ.B0r81u942a5Gl-qVfI1iSpWu4p2RCH-Wcl1KQBMk4ok'}, ...}

    def test_http_message_sendlaterdm_v1_leave_dm_before_message_sent(set_up_data):
        setup = set_up_data
        user1, user3, dm1 = setup['user1'], setup['user3'], setup['dm1']
        requests.post(f"{url}dm/invite/v1", json=dm_invite_body(user1, dm1, user3)).json()
    
        current_time = round(datetime.now().timestamp())
        send_time = current_time + 1
    
        requests.post(f"{url}message/senddm/v1", json=message_senddm_body(user1, dm1, "Hi!")).json()
    
        requests.post(f"{url}message/sendlaterdm/v1", json=message_sendlaterdm_body(user3, dm1, "I'm leaving.", send_time)).json()
    
        requests.post(f"{url}dm/leave/v1", json=dm_leave_body(user3, dm1)).json()
    
        requests.post(f"{url}message/senddm/v1", json=message_senddm_body(user1, dm1, "Nice to meet you")).json()
    
        dm_messages = requests.get(f"{url}dm/messages/v1",\
                                params=dm_messages_body(user1, dm1, 0)).json()
    
        assert len(dm_messages['messages']) == 2
        assert dm_messages['messages'][0]['message'] == "Nice to meet you"
        assert dm_messages['messages'][1]['message'] == "Hi!"
    
        # Put the current test to sleep for 1.5 seconds and then check that the message was
        # correctly sent
        time.sleep(1.5)
    
        dm_messages_ans = requests.get(f"{url}dm/messages/v1",\
                                params=dm_messages_body(user1, dm1, 0)).json()
    
>       assert len(dm_messages_ans['messages']) == 3
E       assert 2 == 3
E         +2
E         -3

http_tests/message_sendlaterdm_v1_http_test.py:200: AssertionError
__________________ test_message_unreact_v1_different_messages __________________

setup_user_data = {'user1': {'auth_user_id': 2604, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI2MDQsImxvZ2luX3RpbWUiOjE2MT...1NTAsInNhbHQiOiIzMTM0NDEwNi1iMTUxLTRlZGQtODI5ZS0xMTA4NmE2NjBkZDgifQ.6Mn5xzSJ6AogG9kZK6wiN2tCwap3A-0KFNoxkAE3d8E'}, ...}

    def test_message_unreact_v1_different_messages(setup_user_data):
        users = setup_user_data
    
        # Creating a basic public channel
        channel_id1 = requests.post(config.url + 'channels/create/v2', json={
            'token': users['user1']['token'],
            'name': 'Basic Stuff',
            'is_public': True,
        }).json()
    
        # Join user2
        requests.post(config.url + 'channel/join/v2', json={
            'token': users['user2']['token'],
            'channel_id': channel_id1['channel_id']
        }).json()
    
        # User 1 sends a message in channel_id1
        message1 = requests.post(config.url + 'message/send/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "Welcome to channel"
        }).json()
    
        # User 2 likes the message
        requests.post(config.url + 'message/react/v1', json={
            'token': users['user2']['token'],
            'message_id': message1["message_id"],
            'react_id': like,
        }).json()
    
        # User 2 sends a message in channel_id1
        message2 = requests.post(config.url + 'message/send/v2', json={
            'token': users['user2']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "hello sir pooh"
        }).json()
    
        # User 1 likes the message
        requests.post(config.url + 'message/react/v1', json={
            'token': users['user1']['token'],
            'message_id': message2["message_id"],
            'react_id': like,
        }).json()
    
        # User 1 sends a message in channel_id1
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "moo me honey"
        }).json()
    
        # Check that channel details have all been set correctly
        channel1_messages = requests.get(config.url + 'channel/messages/v2', params={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'start': 0
        }).json()
    
        print(channel1_messages['messages'][2])
>       assert channel1_messages['messages'][0]["reacts"] == []
E       AssertionError: assert [{'is_this_user_reacted': False, 'react_id': 1, 'u_ids': []}] == []
E         Left contains one more item: {'is_this_user_reacted': False, 'react_id': 1, 'u_ids': []}
E         Full diff:
E         - []
E         + [{'is_this_user_reacted': False, 'react_id': 1, 'u_ids': []}]

http_tests/message_unreact_v1_http_test.py:448: AssertionError
----------------------------- Captured stdout call -----------------------------
{'is_pinned': False, 'message': 'Welcome to channel', 'message_id': 2610, 'reacts': [{'is_this_user_reacted': False, 'react_id': 1, 'u_ids': [2605]}], 'time_created': 1618938550, 'u_id': 2604}
___________________ test_message_unreact_v1_multiple_reacts ____________________

setup_user_data = {'user1': {'auth_user_id': 2613, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI2MTMsImxvZ2luX3RpbWUiOjE2MT...1NTAsInNhbHQiOiJjYjdlOGNmNS1iZjhmLTQ3MWEtOTRhMy0wYjBiZWY3ZGE0MmYifQ.A2FRhM3YSFAt_0B0FqrRbk78Ez_oR4jFkXMD6TogL0o'}, ...}

    def test_message_unreact_v1_multiple_reacts(setup_user_data):
        users = setup_user_data
    
        # Creating a basic public channel
        channel_id1 = requests.post(config.url + 'channels/create/v2', json={
            'token': users['user1']['token'],
            'name': 'Basic Stuff',
            'is_public': True,
        }).json()
    
        # Join user2
        requests.post(config.url + 'channel/join/v2', json={
            'token': users['user2']['token'],
            'channel_id': channel_id1['channel_id']
        }).json()
    
        # Join user3
        requests.post(config.url + 'channel/join/v2', json={
            'token': users['user3']['token'],
            'channel_id': channel_id1['channel_id']
        }).json()
    
        # User 1 sends a message in channel_id1
        message1 = requests.post(config.url + 'message/send/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "3 likes on this message and I die"
        }).json()
    
        # User 1 likes the message
        requests.post(config.url + 'message/react/v1', json={
            'token': users['user1']['token'],
            'message_id': message1["message_id"],
            'react_id': like,
        }).json()
    
        # User 2 likes the message
        requests.post(config.url + 'message/react/v1', json={
            'token': users['user2']['token'],
            'message_id': message1["message_id"],
            'react_id': like,
        }).json()
    
        # User 3 likes the message
        requests.post(config.url + 'message/react/v1', json={
            'token': users['user3']['token'],
            'message_id': message1["message_id"],
            'react_id': like,
        }).json()
    
        # Check that channel details have all been set correctly
        channel1_messages = requests.get(config.url + 'channel/messages/v2', params={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'start': 0
        }).json()
        print(channel1_messages['messages'][0]["reacts"][0])
>       assert channel1_messages['messages'][0]["reacts"][0]["u_ids"][0] == users['user1']["auth_user_id"]
E       assert 2614 == 2613
E         +2614
E         -2613

http_tests/message_unreact_v1_http_test.py:531: AssertionError
----------------------------- Captured stdout call -----------------------------
{'is_this_user_reacted': True, 'react_id': 1, 'u_ids': [2614, 2613, 2615]}
________________________ test_notifications_channel_tag ________________________

setup_user_data = {'user1': {'auth_user_id': 2638, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI2MzgsImxvZ2luX3RpbWUiOjE2MT...1NTAsInNhbHQiOiJhY2I4NzM0My05NmExLTQ1MGItODUwOC05ZmM1NjI0M2VkZTEifQ.uafkHUyvvb66f6D82TKe-kdmzsiY58R07qAZHSCiA5E'}, ...}

    def test_notifications_channel_tag(setup_user_data):
    
        # Create user 1
        user1 = requests.post(config.url + 'auth/register/v2', json={
            'email': 'user1@gmail.com',
            'password': 'password123',
            'name_first': 'first1',
            'name_last': 'last1',
        }).json()
    
        # Create user 2
        user2 = requests.post(config.url + 'auth/register/v2', json={
            'email': 'user2@gmail.com',
            'password': 'password123',
            'name_first': 'first2',
            'name_last': 'last2',
        }).json()
    
        # Creating a public channel
        channel_id = requests.post(config.url + 'channels/create/v2', json={
            'token': user1['token'],
            'name': 'Public',
            'is_public': True,
        }).json()
    
        # Invite user2
        requests.post(config.url + 'channel/invite/v2', json={
            'token': user1['token'],
            'channel_id': channel_id['channel_id'],
            'u_id': user2['auth_user_id'],
        }).json()
    
        # Tag user2
        requests.post(config.url + 'message/send/v2', json={
            'token': user1['token'],
            'channel_id': channel_id['channel_id'],
            'message': '@first2last2 1v1me',
        }).json()
    
        # Get notifications for user2
        notifications = requests.get(config.url + 'notifications/get/v1', params={
            'token': user2['token'],
        }).json()
    
>       assert notifications == {
            'notifications': [
                {
                    'channel_id' : channel_id['channel_id'],
                    'dm_id' : -1,
                    'notification_message' : 'first1last1 added you to Public',
                },
                {
                    'channel_id' : channel_id['channel_id'],
                    'dm_id' : -1,
                    'notification_message' : 'first1last1 tagged you in Public: @first2last2 1v1me',
                },
            ]
        }
E       AssertionError: assert {'notifications': [{'channel_id': 2645,\n                    'dm_id': -1,\n                    'notification_message': 'first1last1 tagged you in Public: '\n                                            '@first2last2 1v1me'},\n                   {'channel_id': 2645,\n                    'dm_id': -1,\n                    'notification_message': 'first1last1 added you to Public'}]} == {'notifications': [{'channel_id': 2645,\n                    'dm_id': -1,\n                    'notification_message': 'first1last1 added you to Public'},\n                   {'channel_id': 2645,\n                    'dm_id': -1,\n                    'notification_message': 'first1last1 tagged you in Public: '\n                                            '@first2last2 1v1me'}]}
E         Differing items:
E         {'notifications': [{'channel_id': 2645, 'dm_id': -1, 'notification_message': 'first1last1 tagged you in Public: @first2last2 1v1me'}, {'channel_id': 2645, 'dm_id': -1, 'notification_message': 'first1last1 added you to Public'}]} != {'notifications': [{'channel_id': 2645, 'dm_id': -1, 'notification_message': 'first1last1 added you to Public'}, {'channel_id': 2645, 'dm_id': -1, 'notification_message': 'first1last1 tagged you in Public: @first2last2 1v1me'}]}
E         Full diff:
E           {
E            'notifications': [{'channel_id': 2645,
E                               'dm_id': -1,
E         -                     'notification_message': 'first1last1 added you to Public'},
E         ?                                                           ^^       ^^        --
E         +                     'notification_message': 'first1last1 tagged you in Public: '
E         ?                                                          + ^^       ^^       ++
E         +                                             '@first2last2 1v1me'},
E                              {'channel_id': 2645,
E                               'dm_id': -1,
E         -                     'notification_message': 'first1last1 tagged you in Public: '
E         ?                                                          - ^^       ^^       --
E         +                     'notification_message': 'first1last1 added you to Public'}],
E         ?                                                           ^^       ^^        +++
E         -                                             '@first2last2 1v1me'}],
E           }

http_tests/notifications_get_v1_http_test.py:145: AssertionError
__________________________ test_notifications_dm_tag ___________________________

setup_user_data = {'user1': {'auth_user_id': 2647, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI2NDcsImxvZ2luX3RpbWUiOjE2MT...1NTAsInNhbHQiOiJmOGQ5YTE3Ny0zNTJmLTRmZTItYWU5ZC0wMjFkNTZjZDc5YWUifQ.MTwztYDPStVtt356Kup3_rGBgAmvtodFBU0tAGQTGTo'}, ...}

    def test_notifications_dm_tag(setup_user_data):
    
        # Create user 1
        user1 = requests.post(config.url + 'auth/register/v2', json={
            'email': 'user1@gmail.com',
            'password': 'password123',
            'name_first': 'first1',
            'name_last': 'last1',
        }).json()
    
        # Create user 2
        user2 = requests.post(config.url + 'auth/register/v2', json={
            'email': 'user2@gmail.com',
            'password': 'password123',
            'name_first': 'first2',
            'name_last': 'last2',
        }).json()
    
        # Creating a dm
        dm_id = requests.post(config.url + 'dm/create/v1', json={
            'token': user1['token'],
            'u_ids': [user2['auth_user_id']],
        }).json()
    
        # Tag user2
        requests.post(config.url + 'message/senddm/v1', json={
            'token': user1['token'],
            'dm_id': dm_id['dm_id'],
            'message': '@first2last2 1v1me',
        }).json()
    
        # Get notifications for user2
        notifications = requests.get(config.url + 'notifications/get/v1', params={
            'token': user2['token'],
        }).json()
    
>       assert notifications == {
            'notifications': [
                {
                    'channel_id' : -1,
                    'dm_id' : dm_id['dm_id'],
                    'notification_message' : 'first1last1 added you to first1last1, first2last2',
                },
                {
                    'channel_id' : -1,
                    'dm_id' : dm_id['dm_id'],
                    'notification_message' : 'first1last1 tagged you in first1last1, first2last2: @first2last2 1v1me',
                },
            ]
        }
E       AssertionError: assert {'notifications': [{'channel_id': -1,\n                    'dm_id': 2654,\n                    'notification_message': 'first1last1 tagged you in '\n                                            'first1last1, first2last2: '\n                                            '@first2last2 1v1me'},\n                   {'channel_id': -1,\n                    'dm_id': 2654,\n                    'notification_message': 'first1last1 added you to '\n                                            'first1last1, first2last2'}]} == {'notifications': [{'channel_id': -1,\n                    'dm_id': 2654,\n                    'notification_message': 'first1last1 added you to '\n                                            'first1last1, first2last2'},\n                   {'channel_id': -1,\n                    'dm_id': 2654,\n                    'notification_message': 'first1last1 tagged you in '\n                                            'first1last1, first2last2: '\n                                            '@first2last2 1v1me'}]}
E         Differing items:
E         {'notifications': [{'channel_id': -1, 'dm_id': 2654, 'notification_message': 'first1last1 tagged you in first1last1, f...1me'}, {'channel_id': -1, 'dm_id': 2654, 'notification_message': 'first1last1 added you to first1last1, first2last2'}]} != {'notifications': [{'channel_id': -1, 'dm_id': 2654, 'notification_message': 'first1last1 added you to first1last1, fi... -1, 'dm_id': 2654, 'notification_message': 'first1last1 tagged you in first1last1, first2last2: @first2last2 1v1me'}]}
E         Full diff:
E           {
E            'notifications': [{'channel_id': -1,
E                               'dm_id': 2654,
E         -                     'notification_message': 'first1last1 added you to '
E         ?                                                           ^^       ^^
E         +                     'notification_message': 'first1last1 tagged you in '
E         ?                                                          + ^^       ^^
E         -                                             'first1last1, first2last2'},
E         ?                                                                       --
E         +                                             'first1last1, first2last2: '
E         ?                                                                      ++
E         +                                             '@first2last2 1v1me'},
E                              {'channel_id': -1,
E                               'dm_id': 2654,
E         -                     'notification_message': 'first1last1 tagged you in '
E         ?                                                          - ^^       ^^
E         +                     'notification_message': 'first1last1 added you to '
E         ?                                                           ^^       ^^
E         -                                             'first1last1, first2last2: '
E         ?                                                                      --
E         +                                             'first1last1, first2last2'}],
E         ?                                                                       +++
E         -                                             '@first2last2 1v1me'}],
E           }

http_tests/notifications_get_v1_http_test.py:196: AssertionError
___________________________ test_invalid_channel_id ____________________________

users = [{'auth_user_id': 2726, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI3MjYsImxvZ2luX3RpbWUiOjE2MTg5Mzg1NjU...g5Mzg1NjUsInNhbHQiOiIxNWIwMjUyNC0zZTBkLTRmZDEtYjQ3MS05MzQyOTg1NmRmZWIifQ.Yb7flnnS9Thfmt6S1kx7ImQ2G_0j-35c40N9HQDhE58'}]

    def test_invalid_channel_id(users):
>       standup_response = requests.get(f"{url}standup/active/v1", params=standup_active_body(users[0], {"channel_id": 12345})).json()

http_tests/standup_active_v1_http_test.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>400 Bad Request</title>\n<h1>Bad Request</h1>\n<p>12345 is not a valid ID</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
______________________________ test_invalid_token ______________________________

users = [{'auth_user_id': 2731, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI3MzEsImxvZ2luX3RpbWUiOjE2MTg5Mzg1NjU...g5Mzg1NjUsInNhbHQiOiJhNmRkMDBlMC1jNWFhLTRmY2QtYTM2Yy0wNTcyZTNjNDg5MmIifQ.oGGNisBJgSB4A4s-JGpkm1XgBdo-xHXzPHHkEncmO9w'}]

    def test_invalid_token(users):
        channel_id0 = requests.post(f"{url}channels/create/v2", json=channels_create_body(users[0], "Channel0", True))
        channel0 = channel_id0.json()
    
>       standup_response = requests.get(f"{url}standup/active/v1", params=standup_active_body({"token" : 12345}, channel0)).json()

http_tests/standup_active_v1_http_test.py:106: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Invalid token</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
___________________________ test_invalid_channel_id ____________________________

users = [{'auth_user_id': 2758, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI3NTgsImxvZ2luX3RpbWUiOjE2MTg5Mzg1NzE...g5Mzg1NzEsInNhbHQiOiJmYjdkMDJjMy0zNjg5LTRlMjItYTM0NC03MWJhYTU3NWM1MGUifQ.dmc2YhpoOx73oFg_g6UFpTSx3dhfIG51R2jJ8OYav-8'}]

    def test_invalid_channel_id(users):
>       standup_response = requests.post(f"{url}standup/send/v1", json=standup_send_body(users[0], {"channel_id" : 12345}, "Test message0")).json()

http_tests/standup_send_v1_http_test.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>400 Bad Request</title>\n<h1>Bad Request</h1>\n<p>12345 is not a valid ID</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
____________________________ test_too_long_message _____________________________

users = [{'auth_user_id': 2763, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI3NjMsImxvZ2luX3RpbWUiOjE2MTg5Mzg1NzE...g5Mzg1NzEsInNhbHQiOiJlMTgzZjljZi05NzQxLTRkMmQtYWQ2ZC1hZjY5MWFjMTE2Y2EifQ.YACAs2FSZaqOCxC92V4nFeMxvs8MwQm_w7QaPSwNLcM'}]

    def test_too_long_message(users):
        channel_id0 = requests.post(f"{url}channels/create/v2", json=channels_create_body(users[0], "Channel0", True))
        channel0 = channel_id0.json()
    
        requests.post(f"{url}standup/start/v1", json=standup_start_body(users[0], channel0, 1))
    
        long_message = ""
        while len(long_message) < 1001:
            long_message += "a"
    
>       standup_response = requests.post(f"{url}standup/send/v1", json=standup_send_body(users[0], channel0, long_message)).json()

http_tests/standup_send_v1_http_test.py:138: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>400 Bad Request</title>\n<h1>Bad Request</h1>\n<p>Messages should be between 0 and 1000 characters long</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
____________________________ test_inactive_standup _____________________________

users = [{'auth_user_id': 2769, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI3NjksImxvZ2luX3RpbWUiOjE2MTg5Mzg1NzE...g5Mzg1NzEsInNhbHQiOiJlNzY2ODdiYS0yMjIyLTQzYzUtODQxOS1jZWE5ZWUyNTg3MDcifQ.2KTnJ0LdZ_Kkao0QmE2yCBEmXQvSNwwuvBe8OiBBcU8'}]

    def test_inactive_standup(users):
        channel_id0 = requests.post(f"{url}channels/create/v2", json=channels_create_body(users[0], "Channel0", True))
        channel0 = channel_id0.json()
    
>       standup_response = requests.post(f"{url}standup/send/v1", json=standup_send_body(users[0], channel0, "Test message")).json()

http_tests/standup_send_v1_http_test.py:150: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>400 Bad Request</title>\n<h1>Bad Request</h1>\n<p>No active standup in Channel0</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
____________________________ test_unauthorized_user ____________________________

users = [{'auth_user_id': 2775, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI3NzUsImxvZ2luX3RpbWUiOjE2MTg5Mzg1NzE...g5Mzg1NzEsInNhbHQiOiJlMWFiODEyZi1kNGQxLTRlYjUtYjVmZi01NDMzNDU4ZmQ1MTAifQ.BcF86aNcH571TWRm9fIqexfsynjF9d-a1whS-CZW6Aw'}]

    def test_unauthorized_user(users):
        channel_id0 = requests.post(f"{url}channels/create/v2", json=channels_create_body(users[0], "Channel0", True))
        channel0 = channel_id0.json()
    
        requests.post(f"{url}standup/start/v1", json=standup_start_body(users[0], channel0, 1))
    
>       standup_response = requests.post(f"{url}standup/send/v1", json=standup_send_body(users[1], channel0, "Test message")).json()

http_tests/standup_send_v1_http_test.py:163: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Only members can post to this standup</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
______________________________ test_invalid_token ______________________________

users = [{'auth_user_id': 2781, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI3ODEsImxvZ2luX3RpbWUiOjE2MTg5Mzg1NzI...g5Mzg1NzIsInNhbHQiOiJiNzU5NTIwMi04ZDY5LTQyZDQtOGEzNy0zZGNhYWY3ZWI3NmEifQ.xzlyjTazWoVk1r1vAhrefpOIPwC13vH3asAI1PxoxYM'}]

    def test_invalid_token(users):
        channel_id0 = requests.post(f"{url}channels/create/v2", json=channels_create_body(users[0], "Channel0", True))
        channel0 = channel_id0.json()
    
        requests.post(f"{url}standup/start/v1", json=standup_start_body(users[0], channel0, 1))
    
>       standup_response = requests.post(f"{url}standup/send/v1", json=standup_send_body({"token" : 12345}, channel0, "Test message")).json()

http_tests/standup_send_v1_http_test.py:177: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Invalid token</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
___________________________ test_invalid_channel_id ____________________________

users = [{'auth_user_id': 2806, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI4MDYsImxvZ2luX3RpbWUiOjE2MTg5Mzg1ODY...g5Mzg1ODYsInNhbHQiOiJkYzhjNTFkMi02ZGM0LTQ5NjUtYmQxOS0xNTc4YzYwYzJjNDEifQ.aGrIfdf-hZWBIJiW9PFiYsb_gI6r-VGFI20iL8W_JEQ'}]

    def test_invalid_channel_id(users):
>       standup_response = requests.post(f"{url}standup/start/v1", json=standup_start_body(users[0], {"channel_id": 12345}, 1)).json()

http_tests/standup_start_v1_http_test.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>400 Bad Request</title>\n<h1>Bad Request</h1>\n<p>12345 is not a valid ID</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
_____________________________ test_active_standup ______________________________

users = [{'auth_user_id': 2811, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI4MTEsImxvZ2luX3RpbWUiOjE2MTg5Mzg1ODY...g5Mzg1ODYsInNhbHQiOiI3ZjgwMjliNy0zODEyLTQ3ODUtOWMzMy0wYTc2NmEzZDUxYTUifQ.-nHpJ94M2jvInYfUZAL5Haon5YpvQgTAydKZ9_hGFrk'}]

    def test_active_standup(users):
        channel_id0 = requests.post(f"{url}channels/create/v2", json=channels_create_body(users[0], "Channel0", True))
        channel0 = channel_id0.json()
    
        requests.post(f"{url}standup/start/v1", json=standup_start_body(users[0], channel0, 1))
    
>       standup_response = requests.post(f"{url}standup/start/v1", json=standup_start_body(users[0], channel0, 1)).json()

http_tests/standup_start_v1_http_test.py:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>400 Bad Request</title>\n<h1>Bad Request</h1>\n<p>Standup already active</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
____________________________ test_unauthorized_user ____________________________

users = [{'auth_user_id': 2817, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI4MTcsImxvZ2luX3RpbWUiOjE2MTg5Mzg1ODY...g5Mzg1ODYsInNhbHQiOiI2MTMwODhjMC1lYzhmLTRmZTYtYTFjNS1jZmI2YzQ4OGExOTEifQ.xyEt9EF5z4uXlixQojzqvKbY9bIh-7-mkhvnJV90euo'}]

    def test_unauthorized_user(users):
        channel_id0 = requests.post(f"{url}channels/create/v2", json=channels_create_body(users[0], "Channel0", True))
        channel0 = channel_id0.json()
    
>       standup_response = requests.post(f"{url}standup/start/v1", json=standup_start_body(users[1], channel0, 1)).json()

http_tests/standup_start_v1_http_test.py:82: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Only members can start standups</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
______________________________ test_invalid_token ______________________________

users = [{'auth_user_id': 2823, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI4MjMsImxvZ2luX3RpbWUiOjE2MTg5Mzg1ODY...g5Mzg1ODYsInNhbHQiOiJiNzZjMzZiZC1kMWM4LTQ2NzgtOGY3My00OGQ4Zjc5YmRmMjMifQ.4YcygZ-CFSmkcmTS0B4iPXXBlM456rnJCjwJW8g5NFw'}]

    def test_invalid_token(users):
        channel_id0 = requests.post(f"{url}channels/create/v2", json=channels_create_body(users[0], "Channel0", True))
        channel0 = channel_id0.json()
    
>       standup_response = requests.post(f"{url}standup/start/v1", json=standup_start_body({"token" : 12345}, channel0, 1)).json()

http_tests/standup_start_v1_http_test.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Invalid token</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
______________________________ test_user_profile _______________________________

    def test_user_profile():
    	resp_register = requests.post(config.url + 'auth/register/v2', json={'email':'exampleUserEmail@email.com', 'password':'ExamplePassword', 'name_first':'FIRSTNAME', 'name_last':'LASTNAME'})
    	json_data_register = json.loads(resp_register.text)
    
    	resp_profile = requests.get(config.url + 'user/profile/v2', params={'token' : json_data_register['token'], 'u_id' : json_data_register['auth_user_id']})
    	json_data_profile = json.loads(resp_profile.text)
    
>   	assert json_data_profile == {'user' :
    				{
    	            'u_id'         : json_data_register['auth_user_id'],
    	            'email'        : 'exampleUserEmail@email.com',
    	            'name_first'   : 'FIRSTNAME',
    	            'name_last'    : 'LASTNAME',
    	            'handle_str'   : 'firstnamelastname'
    	            }
               }
E    AssertionError: assert {'user': {'email': 'exampleUserEmail@email.com',\n          'handle_str': 'firstnamelastname',\n          'name_first': 'FIRSTNAME',\n          'name_last': 'LASTNAME',\n          'profile_img_url': '',\n          'u_id': 2829}} == {'user': {'email': 'exampleUserEmail@email.com',\n          'handle_str': 'firstnamelastname',\n          'name_first': 'FIRSTNAME',\n          'name_last': 'LASTNAME',\n          'u_id': 2829}}
E      Differing items:
E      {'user': {'email': 'exampleUserEmail@email.com', 'handle_str': 'firstnamelastname', 'name_first': 'FIRSTNAME', 'name_last': 'LASTNAME', ...}} != {'user': {'email': 'exampleUserEmail@email.com', 'handle_str': 'firstnamelastname', 'name_first': 'FIRSTNAME', 'name_last': 'LASTNAME', ...}}
E      Full diff:
E        {
E         'user': {'email': 'exampleUserEmail@email.com',
E                  'handle_str': 'firstnamelastname',
E                  'name_first': 'FIRSTNAME',
E                  'name_last': 'LASTNAME',
E      +           'profile_img_url': '',
E                  'u_id': 2829},
E        }

http_tests/user_profile_http_test.py:22: AssertionError
_______________________ test_user_profile_invalid_token ________________________

    def test_user_profile_invalid_token():
    	resp_register = requests.post(config.url + 'auth/register/v2', json={'email':'exampleUserEmail@email.com', 'password':'ExamplePassword', 'name_first':'FIRSTNAME', 'name_last':'LASTNAME'})
    	json_data_register = json.loads(resp_register.text)
    	assert json_data_register
    
    	resp_profile = requests.get(config.url + 'user/profile/v2', params={'token' : 'someRandomToken', 'u_id' : json_data_register['auth_user_id']})
>   	json_data_profile = json.loads(resp_profile.text)

http_tests/user_profile_http_test.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.7/json/__init__.py:348: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.7/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7ff332af75f8>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Invalid token</p>\n'
idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.7/json/decoder.py:355: JSONDecodeError
__________________________ test_user_profile_setname ___________________________

    def test_user_profile_setname():
    	resp_register = requests.post(config.url + 'auth/register/v2', json={'email':'exampleUserEmail@email.com', 'password':'ExamplePassword', 'name_first':'FIRSTNAME', 'name_last':'LASTNAME'})
    	json_data_register = json.loads(resp_register.text)
    	assert json_data_register
    
    	resp_setname = requests.put(config.url + 'user/profile/setname/v2', json={'token' : json_data_register['token'], 'name_first' : 'changedFirstname', 'name_last' : 'changedLastname'})
    	json_data_setname = json.loads(resp_setname.text)
    	assert json_data_setname == {}
    
    	resp_profile = requests.get(config.url + 'user/profile/v2', params={'token' : json_data_register['token'], 'u_id' : json_data_register['auth_user_id']})
    	json_data_profile = json.loads(resp_profile.text)
>   	assert json_data_profile == {'user' :
    				{
    	            'u_id'         : json_data_register['auth_user_id'],
    	            'email'        : 'exampleUserEmail@email.com',
    	            'name_first'   : 'changedFirstname',
    	            'name_last'    : 'changedLastname',
    	            'handle_str'   : 'firstnamelastname'
    	            }
               }
E    AssertionError: assert {'user': {'email': 'exampleUserEmail@email.com',\n          'handle_str': 'firstnamelastname',\n          'name_first': 'changedFirstname',\n          'name_last': 'changedLastname',\n          'profile_img_url': '',\n          'u_id': 2831}} == {'user': {'email': 'exampleUserEmail@email.com',\n          'handle_str': 'firstnamelastname',\n          'name_first': 'changedFirstname',\n          'name_last': 'changedLastname',\n          'u_id': 2831}}
E      Differing items:
E      {'user': {'email': 'exampleUserEmail@email.com', 'handle_str': 'firstnamelastname', 'name_first': 'changedFirstname', 'name_last': 'changedLastname', ...}} != {'user': {'email': 'exampleUserEmail@email.com', 'handle_str': 'firstnamelastname', 'name_first': 'changedFirstname', 'name_last': 'changedLastname', ...}}
E      Full diff:
E        {
E         'user': {'email': 'exampleUserEmail@email.com',
E                  'handle_str': 'firstnamelastname',
E                  'name_first': 'changedFirstname',
E                  'name_last': 'changedLastname',
E      +           'profile_img_url': '',
E                  'u_id': 2831},
E        }

http_tests/user_profile_http_test.py:68: AssertionError
___________________ test_user_profile_setname_invalid_token ____________________

    def test_user_profile_setname_invalid_token():
    	resp_register = requests.post(config.url + 'auth/register/v2', json={'email':'exampleUserEmail@email.com', 'password':'ExamplePassword', 'name_first':'FIRSTNAME', 'name_last':'LASTNAME'})
    	json_data_register = json.loads(resp_register.text)
    	assert json_data_register
    
    	resp_setname = requests.put(config.url + 'user/profile/setname/v2', json={'token' : 'someRandomToken', 'name_first' : 'changedFirstname', 'name_last' : 'changedLastname'})
>   	json_data_setname = json.loads(resp_setname.text)

http_tests/user_profile_http_test.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.7/json/__init__.py:348: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.7/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7ff332af75f8>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Invalid token</p>\n'
idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.7/json/decoder.py:355: JSONDecodeError
________________ test_user_profile_setname_invalid_name_length _________________

    def test_user_profile_setname_invalid_name_length():
    	resp_register = requests.post(config.url + 'auth/register/v2', json={'email':'exampleUserEmail@email.com', 'password':'ExamplePassword', 'name_first':'FIRSTNAME', 'name_last':'LASTNAME'})
    	json_data_register = json.loads(resp_register.text)
    	assert json_data_register
    
    	resp_setname = requests.put(config.url + 'user/profile/setname/v2', json={'token' : json_data_register['token'], 'name_first' : '', 'name_last' : 'changedLastname'})
>   	json_data_setname = json.loads(resp_setname.text)

http_tests/user_profile_http_test.py:97: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.7/json/__init__.py:348: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.7/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7ff332af75f8>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>400 Bad Request</title>\n<h1>Bad Request</h1>\n<p>Name must be between 1 and 50 characters inclusive</p>\n'
idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.7/json/decoder.py:355: JSONDecodeError
__________________________ test_user_profile_setemail __________________________

    def test_user_profile_setemail():
    	resp_register = requests.post(config.url + 'auth/register/v2', json={'email':'exampleUserEmail@email.com', 'password':'ExamplePassword', 'name_first':'FIRSTNAME', 'name_last':'LASTNAME'})
    	json_data_register = json.loads(resp_register.text)
    	assert json_data_register
    
    	resp_setname = requests.put(config.url + 'user/profile/setemail/v2', json={'token' : json_data_register['token'], 'email' : 'changedEmail@outlook.com'})
    	json_data_setemail = json.loads(resp_setname.text)
    	assert json_data_setemail == {}
    
    	resp_profile = requests.get(config.url + 'user/profile/v2', params={'token' : json_data_register['token'], 'u_id' : json_data_register['auth_user_id']})
    	json_data_profile = json.loads(resp_profile.text)
    
>   	assert json_data_profile == {'user' :
    				{
    	            'u_id'         : json_data_register['auth_user_id'],
    	            'email'        : 'changedEmail@outlook.com',
    	            'name_first'   : 'FIRSTNAME',
    	            'name_last'    : 'LASTNAME',
    	            'handle_str'   : 'firstnamelastname'
    	            }
               }
E    AssertionError: assert {'user': {'email': 'changedEmail@outlook.com',\n          'handle_str': 'firstnamelastname',\n          'name_first': 'FIRSTNAME',\n          'name_last': 'LASTNAME',\n          'profile_img_url': '',\n          'u_id': 2834}} == {'user': {'email': 'changedEmail@outlook.com',\n          'handle_str': 'firstnamelastname',\n          'name_first': 'FIRSTNAME',\n          'name_last': 'LASTNAME',\n          'u_id': 2834}}
E      Differing items:
E      {'user': {'email': 'changedEmail@outlook.com', 'handle_str': 'firstnamelastname', 'name_first': 'FIRSTNAME', 'name_last': 'LASTNAME', ...}} != {'user': {'email': 'changedEmail@outlook.com', 'handle_str': 'firstnamelastname', 'name_first': 'FIRSTNAME', 'name_last': 'LASTNAME', ...}}
E      Full diff:
E        {
E         'user': {'email': 'changedEmail@outlook.com',
E                  'handle_str': 'firstnamelastname',
E                  'name_first': 'FIRSTNAME',
E                  'name_last': 'LASTNAME',
E      +           'profile_img_url': '',
E                  'u_id': 2834},
E        }

http_tests/user_profile_http_test.py:115: AssertionError
________________________ test_user_profile_sethandle_v1 ________________________

    def test_user_profile_sethandle_v1():
    	resp_register = requests.post(config.url + 'auth/register/v2', json={'email':'exampleUserEmail@email.com', 'password':'ExamplePassword', 'name_first':'FIRSTNAME', 'name_last':'LASTNAME'})
    	json_data_register = json.loads(resp_register.text)
    	assert json_data_register
    
    	resp_sethandle = requests.put(config.url + 'user/profile/sethandle/v2', json={'token' : json_data_register['token'], 'handle_str' : 'changedHandle'})
>   	json_data_sethandle = json.loads(resp_sethandle.text)

http_tests/user_profile_http_test.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.7/json/__init__.py:348: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.7/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7ff332af75f8>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n'
idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.7/json/decoder.py:355: JSONDecodeError
___________________________ test_user_stats_v1_empty ___________________________

setup_user_data = {'user1': {'auth_user_id': 2837, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI4MzcsImxvZ2luX3RpbWUiOjE2MT...1ODYsInNhbHQiOiJmZDIxZjYyNy1kNzhmLTQ2MjEtYTRhNC04ZDM4OWEwOGZkODcifQ.3Bu6-kwaA_v6W99CLyD-OB_91kZz3F2eA3eeO_-TfEo'}, ...}

    def test_user_stats_v1_empty(setup_user_data):
        users = setup_user_data
    
        user_stats = requests.get(config.url + 'user/stats/v1', params={
            'token': users['user1']['token'],
        }).json()
>       assert user_stats['num_channels_joined'] == 0
E       KeyError: 'num_channels_joined'

http_tests/user_stats_http_test.py:55: KeyError
___________________________ test_user_stats_v1_full ____________________________

setup_user_data = {'user1': {'auth_user_id': 2842, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI4NDIsImxvZ2luX3RpbWUiOjE2MT...1ODYsInNhbHQiOiI4NTA1MGFkMy04MWUzLTQ5ZWYtYTkyNi0xYzZjY2Q5MDgwNzMifQ.gpuSXLi5VTy_3sVT2toEwPizID5O_lCwMaB8nAR7pys'}, ...}

    def test_user_stats_v1_full(setup_user_data):
        users = setup_user_data
    
        # Creating a public channel
        requests.post(config.url + 'channels/create/v2', json={
            'token': users['user1']['token'],
            'name': 'Public',
            'is_public': True,
        }).json()
    
        user_stats = requests.get(config.url + 'user/stats/v1', params={
            'token': users['user1']['token'],
        }).json()
    
>       assert user_stats['num_channels_joined'] == 1
E       KeyError: 'num_channels_joined'

http_tests/user_stats_http_test.py:76: KeyError
____________________________ test_user_stats_v1_all ____________________________

setup_user_data = {'user1': {'auth_user_id': 2848, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI4NDgsImxvZ2luX3RpbWUiOjE2MT...1ODYsInNhbHQiOiI5YzRiYjcyMy03MjllLTRhODItOWNjZi0yMTA3ZDlkMTMzZWIifQ.JwowcGZdXQqcVi-pslC3yGzu5AzFVhEWEZnd-_EIyBs'}, ...}

    def test_user_stats_v1_all(setup_user_data):
        users = setup_user_data
    
        # Creating a public channel
        channel_id1 = requests.post(config.url + 'channels/create/v2', json={
            'token': users['user1']['token'],
            'name': 'Public',
            'is_public': True,
        }).json()
    
        # Creating a dm
        u_id_list = [users['user2']]
        dm_id1 = requests.post(config.url + 'dm/create/v1', json=dm_create_body(users['user1'],u_id_list)).json()
    
        # User 1 sends a message in channel_id1
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "Welcome to channel"
        }).json()
    
        # User 1 sends a message in dm_id1
        requests.post(config.url + 'message/senddm/v1', json={
            'token': users['user1']['token'],
            'dm_id': dm_id1['dm_id'],
            'message': "Hello",
        }).json()
    
        user_stats1 = requests.get(config.url + 'user/stats/v1', params={
            'token': users['user1']['token'],
        }).json()
    
        user_stats2 = requests.get(config.url + 'user/stats/v1', params={
            'token': users['user2']['token'],
        }).json()
    
>       assert user_stats1['num_channels_joined'] == 1
E       KeyError: 'num_channels_joined'

http_tests/user_stats_http_test.py:118: KeyError
________________________ test_user_stats_v1_invite_join ________________________

setup_user_data = {'user1': {'auth_user_id': 2857, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI4NTcsImxvZ2luX3RpbWUiOjE2MT...1ODcsInNhbHQiOiI1MjU0OWI2OS04YTc0LTRkYjYtODc1Ny1jZmQ3NWViYTA1YzgifQ._uOeq-GofZIqbc-jf2HZnX-Hn0GdSF6PXcU2IkNAvZI'}, ...}

    def test_user_stats_v1_invite_join(setup_user_data):
        users = setup_user_data
    
        # Creating a public channel
        channel_id1 = requests.post(config.url + 'channels/create/v2', json={
            'token': users['user1']['token'],
            'name': 'Public',
            'is_public': True,
        }).json()
    
        # Creating a dm
        u_id_list = [users['user2']]
        dm_id1 = requests.post(config.url + 'dm/create/v1', json=dm_create_body(users['user1'],u_id_list)).json()
    
        # User 1 sends a message in channel_id1
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "Welcome to channel"
        }).json()
    
        # User 1 sends a message in dm_id1
        requests.post(config.url + 'message/senddm/v1', json={
            'token': users['user1']['token'],
            'dm_id': dm_id1['dm_id'],
            'message': "Hello",
        }).json()
    
        # User 2 sends a message in dm_id1
        requests.post(config.url + 'message/senddm/v1', json={
            'token': users['user2']['token'],
            'dm_id': dm_id1['dm_id'],
            'message': "Hello",
        }).json()
    
        # User 1 invites user 2 to channel
        requests.post(config.url + 'channel/invite/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'u_id': users['user2']['auth_user_id'],
        }).json()
    
        # User 2 sends a message in channel_id1
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user2']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "hi to channel"
        }).json()
    
        # User 1 invites user 3 to dm
        requests.post(config.url + 'dm/invite/v1', json={
            'token': users['user1']['token'],
            'dm_id': dm_id1['dm_id'],
            'u_id': users['user3']['auth_user_id'],
        }).json()
    
        # User 1 invites user 3 to channel
        requests.post(config.url + 'channel/invite/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'u_id': users['user3']['auth_user_id'],
        }).json()
    
        # User 3 sends a message in channel_id1
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user3']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "hi to channel"
        }).json()
    
        # User 3 sends a message in dm_id1
        requests.post(config.url + 'message/senddm/v1', json={
            'token': users['user3']['token'],
            'dm_id': dm_id1['dm_id'],
            'message': "Hello",
        }).json()
    
        user_stats1 = requests.get(config.url + 'user/stats/v1', params={
            'token': users['user1']['token'],
        }).json()
    
        user_stats2 = requests.get(config.url + 'user/stats/v1', params={
            'token': users['user2']['token'],
        }).json()
    
>       assert user_stats1['num_channels_joined'] == 1
E       KeyError: 'num_channels_joined'

http_tests/user_stats_http_test.py:215: KeyError
__________________________ test_user_stats_v1_active ___________________________

setup_user_data = {'user1': {'auth_user_id': 2870, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI4NzAsImxvZ2luX3RpbWUiOjE2MT...1ODcsInNhbHQiOiI1N2JiOTYyNy1iZWExLTRjOTQtOWUyNi0xMDc2ZjA4NWFkNTYifQ.AEuI-y4t4WorI6ryqFU4kXSIUJCSKhqyQRnN8e9QUoc'}, ...}

    def test_user_stats_v1_active(setup_user_data):
        users = setup_user_data
    
        # User 1 creates 5 channels
        channel_id1 = requests.post(config.url + 'channels/create/v2', json={
            'token': users['user1']['token'],
            'name': 'C1',
            'is_public': True,
        }).json()
    
        requests.post(config.url + 'channels/create/v2', json={
            'token': users['user1']['token'],
            'name': 'C2',
            'is_public': True,
        }).json()
    
        requests.post(config.url + 'channels/create/v2', json={
            'token': users['user1']['token'],
            'name': 'C3',
            'is_public': True,
        }).json()
    
        requests.post(config.url + 'channels/create/v2', json={
            'token': users['user1']['token'],
            'name': 'C4',
            'is_public': True,
        }).json()
    
        requests.post(config.url + 'channels/create/v2', json={
            'token': users['user1']['token'],
            'name': 'C5',
            'is_public': True,
        }).json()
    
        # User 1 creates five dms to user 2
        u_id_list = [users['user2']]
        requests.post(config.url + 'dm/create/v1', json=dm_create_body(users['user1'],u_id_list)).json()
        requests.post(config.url + 'dm/create/v1', json=dm_create_body(users['user1'],u_id_list)).json()
        requests.post(config.url + 'dm/create/v1', json=dm_create_body(users['user1'],u_id_list)).json()
        requests.post(config.url + 'dm/create/v1', json=dm_create_body(users['user1'],u_id_list)).json()
        requests.post(config.url + 'dm/create/v1', json=dm_create_body(users['user1'],u_id_list)).json()
    
        # User 1 sends seven messages in channel_id1
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "Welcome 1"
        }).json()
    
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "Welcome 2"
        }).json()
    
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "Welcome 3"
        }).json()
    
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "Welcome 4"
        }).json()
    
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "Welcome 5"
        }).json()
    
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "Welcome 6"
        }).json()
    
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "Welcome 7"
        }).json()
    
        user_stats1 = requests.get(config.url + 'user/stats/v1', params={
            'token': users['user1']['token'],
        }).json()
    
>       assert user_stats1['num_channels_joined'] == 5
E       KeyError: 'num_channels_joined'

http_tests/user_stats_http_test.py:316: KeyError
__________________________ test_users_stats_v1_empty ___________________________

setup_user_data = {'user1': {'auth_user_id': 2892, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI4OTIsImxvZ2luX3RpbWUiOjE2MT...1ODcsInNhbHQiOiJkN2FhMjA4Yi00ZGViLTRiYTAtODQ5Mi1jYWYxNjUwYWUzMmIifQ.o8Tn0lO4IXsqsnVxpLFf7xSmE-RHhoF79rXI8Q4g0Yc'}, ...}

    def test_users_stats_v1_empty(setup_user_data):
        users = setup_user_data
        print(users['user1'])
        time_stamp = round(datetime.now().timestamp())
        dreams_stats = requests.get(config.url + 'users/stats/v1', params={
>           'token': users['user1']['token'],
        }).json()

http_tests/users_stats_http_test.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
----------------------------- Captured stdout call -----------------------------
{'auth_user_id': 2892, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI4OTIsImxvZ2luX3RpbWUiOjE2MTg5Mzg1ODcsInNhbHQiOiJkMmM4ZmMwMy1kYjg3LTRlMzctYmI2OC03NjFhMjBhOWYxMDgifQ.ae3fFw-fgUMDikWIH9eLHX5-GVykOYuMjtchjvR68wk'}
__________________________ test_users_stats_v1_no_msg __________________________

setup_user_data = {'user1': {'auth_user_id': 2897, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI4OTcsImxvZ2luX3RpbWUiOjE2MT...1ODcsInNhbHQiOiI2YjQ1NTQ5Ni04ZTk3LTQ2Y2YtYWNlYS05NjEwNjI2YTlmNTAifQ._ySNsW_1gApT_e1vgwDCxbYlGYGgH2uaWXFE6iOEq84'}, ...}

    def test_users_stats_v1_no_msg(setup_user_data):
        users = setup_user_data
    
        # Creating a public channel
        requests.post(config.url + 'channels/create/v2', json={
            'token': users['user1']['token'],
            'name': 'Public',
            'is_public': True,
        }).json()
    
        # Creating a dm
        u_id_list = [users['user2']]
        requests.post(config.url + 'dm/create/v1', json=dm_create_body(users['user1'],u_id_list)).json()
    
        time_stamp = round(datetime.now().timestamp())
        dreams_stats = requests.get(config.url + 'users/stats/v1', params={
>           'token': users['user1']['token'],
        }).json()

http_tests/users_stats_http_test.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
__________________________ test_users_stats_v1_loner ___________________________

setup_user_data = {'user1': {'auth_user_id': 2905, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI5MDUsImxvZ2luX3RpbWUiOjE2MT...1ODcsInNhbHQiOiIyMDc3ODNlNy1hZDk5LTQzMjQtYjY2My03OWVjYjkwZDU5YmYifQ.22wghrQXtiuMdApRorxRAgCl697-uBkQaXm5MhxfKeY'}, ...}

    def test_users_stats_v1_loner(setup_user_data):
        users = setup_user_data
    
        # Creating a public channel
        channel_id1 = requests.post(config.url + 'channels/create/v2', json={
            'token': users['user1']['token'],
            'name': 'Public',
            'is_public': True,
        }).json()
    
        # User 1 sends four messages in channel_id1
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "Welcome 1"
        }).json()
    
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "Welcome 2"
        }).json()
    
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "Welcome 3"
        }).json()
    
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "Welcome 4"
        }).json()
    
        time_stamp = round(datetime.now().timestamp())
        dreams_stats = requests.get(config.url + 'users/stats/v1', params={
>           'token': users['user1']['token'],
        }).json()

http_tests/users_stats_http_test.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
_______________________ test_users_stats_v1_invite_join ________________________

setup_user_data = {'user1': {'auth_user_id': 2915, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI5MTUsImxvZ2luX3RpbWUiOjE2MT...1ODcsInNhbHQiOiI3MjM4ZWQ2Ny01ZmUwLTRiZjMtODg5MC04YTkzYzg4NGNlMTkifQ.hJbmsuhdZ8sBLSEXKh74AhI0twf5HXXFssnsrqEsLRU'}, ...}

    def test_users_stats_v1_invite_join(setup_user_data):
        users = setup_user_data
    
        # Creating a public channel
        channel_id1 = requests.post(config.url + 'channels/create/v2', json={
            'token': users['user1']['token'],
            'name': 'Public',
            'is_public': True,
        }).json()
    
        # Creating a dm
        u_id_list = [users['user2']]
        dm_id1 = requests.post(config.url + 'dm/create/v1', json=dm_create_body(users['user1'],u_id_list)).json()
    
        # User 1 sends a message in channel_id1
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "Welcome to channel"
        }).json()
    
        # User 1 sends a message in dm_id1
        requests.post(config.url + 'message/senddm/v1', json={
            'token': users['user1']['token'],
            'dm_id': dm_id1['dm_id'],
            'message': "Hello",
        }).json()
    
        # User 2 sends a message in dm_id1
        requests.post(config.url + 'message/senddm/v1', json={
            'token': users['user2']['token'],
            'dm_id': dm_id1['dm_id'],
            'message': "Hello",
        }).json()
    
        # User 1 invites user 2 to channel_id1
        requests.post(config.url + 'channel/invite/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'u_id': users['user2']['auth_user_id'],
        }).json()
    
        # User 2 sends a message in channel_id1
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user2']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "hi to channel"
        }).json()
    
        # User 1 invites user 3 to dm
        requests.post(config.url + 'dm/invite/v1', json={
            'token': users['user1']['token'],
            'dm_id': dm_id1['dm_id'],
            'u_id': users['user3']['auth_user_id'],
        }).json()
    
        # User 3 joins channel 1
        requests.post(config.url + 'channel/join/v2', json={
            'token': users['user3']['token'],
            'channel_id': channel_id1['channel_id'],
        }).json()
    
        # User 3 sends a message in channel_id1
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user3']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "hi to channel"
        }).json()
    
        # User 3 sends a message in dm_id1
        requests.post(config.url + 'message/senddm/v1', json={
            'token': users['user3']['token'],
            'dm_id': dm_id1['dm_id'],
            'message': "Hello",
        }).json()
    
        time_stamp = round(datetime.now().timestamp())
        dreams_stats = requests.get(config.url + 'users/stats/v1', params={
>           'token': users['user1']['token'],
        }).json()

http_tests/users_stats_http_test.py:218: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
_______________________ test_users_stats_v1_partial_util _______________________

setup_user_data = {'user1': {'auth_user_id': 2928, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI5MjgsImxvZ2luX3RpbWUiOjE2MT...1ODcsInNhbHQiOiI3MzQ3NGM5YS05YzRjLTRiY2EtYTlmOS1mNmQ2MzcyMjYwNzMifQ.hZEYII1XiFbqqPOGXaZ_JwBMfqvirz-tPSyI10UrfL0'}, ...}

    def test_users_stats_v1_partial_util(setup_user_data):
        users = setup_user_data
    
        # Creating a public channel
        channel_id1 = requests.post(config.url + 'channels/create/v2', json={
            'token': users['user1']['token'],
            'name': 'Public',
            'is_public': True,
        }).json()
    
        # User 1 sends four messages in channel_id1
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "Welcome 1"
        }).json()
    
        time_stamp = round(datetime.now().timestamp())
        dreams_stats = requests.get(config.url + 'users/stats/v1', params={
>           'token': users['user1']['token'],
        }).json()

http_tests/users_stats_http_test.py:247: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
__________________________ test_users_stats_v1_active __________________________

setup_user_data = {'user1': {'auth_user_id': 2935, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI5MzUsImxvZ2luX3RpbWUiOjE2MT...1ODcsInNhbHQiOiIyMTJjMjk3NC1jYmVlLTQ5OTgtODYyYi0wNDRlYTgxOTZmZWEifQ.XymJNLUZRMUmrkIUOetrbrvOpPZSxw1pA3L0s266FeI'}, ...}

    def test_users_stats_v1_active(setup_user_data):
        users = setup_user_data
    
        # User 1 creates 5 channels
        channel_id1 = requests.post(config.url + 'channels/create/v2', json={
            'token': users['user1']['token'],
            'name': 'C1',
            'is_public': True,
        }).json()
    
        requests.post(config.url + 'channels/create/v2', json={
            'token': users['user1']['token'],
            'name': 'C2',
            'is_public': True,
        }).json()
    
        requests.post(config.url + 'channels/create/v2', json={
            'token': users['user1']['token'],
            'name': 'C3',
            'is_public': True,
        }).json()
    
        requests.post(config.url + 'channels/create/v2', json={
            'token': users['user1']['token'],
            'name': 'C4',
            'is_public': True,
        }).json()
    
        requests.post(config.url + 'channels/create/v2', json={
            'token': users['user1']['token'],
            'name': 'C5',
            'is_public': True,
        }).json()
    
        # User 1 creates five dms to user 2
        u_id_list = [users['user2']]
        requests.post(config.url + 'dm/create/v1', json=dm_create_body(users['user1'],u_id_list)).json()
        requests.post(config.url + 'dm/create/v1', json=dm_create_body(users['user1'],u_id_list)).json()
        requests.post(config.url + 'dm/create/v1', json=dm_create_body(users['user1'],u_id_list)).json()
        requests.post(config.url + 'dm/create/v1', json=dm_create_body(users['user1'],u_id_list)).json()
        requests.post(config.url + 'dm/create/v1', json=dm_create_body(users['user1'],u_id_list)).json()
    
        # User 1 sends seven messages in channel_id1
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "Welcome 1"
        }).json()
    
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "Welcome 2"
        }).json()
    
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "Welcome 3"
        }).json()
    
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "Welcome 4"
        }).json()
    
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "Welcome 5"
        }).json()
    
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "Welcome 6"
        }).json()
    
        requests.post(config.url + 'message/send/v2', json={
            'token': users['user1']['token'],
            'channel_id': channel_id1['channel_id'],
            'message': "Welcome 7"
        }).json()
    
        # Observe dreams stats
        time_stamp = round(datetime.now().timestamp())
        dreams_stats1 = requests.get(config.url + 'users/stats/v1', params={
>           'token': users['user1']['token']
        }).json()

http_tests/users_stats_http_test.py:345: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7ff3321e8be0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7ff3329649f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
=========================== short test summary info ============================
FAILED http_tests/admin_user_remove_http_test.py::test_admin_user_remove - si...
FAILED http_tests/admin_user_remove_http_test.py::test_admin_user_remove - si...
FAILED http_tests/admin_userpermission_change_http_test.py::test_admin_userpermission_change_invalid_uid
FAILED http_tests/auth_http_test.py::test_auth_login_api_invalid - json.decod...
FAILED http_tests/auth_http_test.py::test_auth_logout_api - json.decoder.JSON...
FAILED http_tests/channel_addowner_v1_http_test.py::test_channel_join_owner_input_error
FAILED http_tests/channel_addowner_v1_http_test.py::test_addowner_dreams - As...
FAILED http_tests/channel_details_v2_http_test.py::test_function - AssertionE...
FAILED http_tests/channel_details_v2_http_test.py::test_multiple - AssertionE...
FAILED http_tests/channel_details_v2_http_test.py::test_multiple_channels - A...
FAILED http_tests/channel_details_v2_http_test.py::test_invalid_channel_id - ...
FAILED http_tests/channel_details_v2_http_test.py::test_unauthorized_user - s...
FAILED http_tests/channel_details_v2_http_test.py::test_invalid_token - simpl...
FAILED http_tests/channel_invite_v2_http_test.py::test_function - AssertionEr...
FAILED http_tests/channel_invite_v2_http_test.py::test_multiple - AssertionEr...
FAILED http_tests/channel_invite_v2_http_test.py::test_multiple_users_invite
FAILED http_tests/channel_invite_v2_http_test.py::test_invalid_channel_id - s...
FAILED http_tests/channel_invite_v2_http_test.py::test_invalid_invited_user
FAILED http_tests/channel_invite_v2_http_test.py::test_unauthorized_user - si...
FAILED http_tests/channel_invite_v2_http_test.py::test_invalid_token - simple...
FAILED http_tests/channel_removeowner_v1_http_test.py::test_channel_removeowner_owner_error
FAILED http_tests/channel_removeowner_v1_http_test.py::test_channel_removeowner_basic
FAILED http_tests/channel_removeowner_v1_http_test.py::test_removeowner_dreams
FAILED http_tests/channels_list_v2_http_test.py::test_channels_list_multiple
FAILED http_tests/dm_create_v1_http_test.py::test_function - AssertionError: ...
FAILED http_tests/dm_create_v1_http_test.py::test_multiple - AssertionError: ...
FAILED http_tests/dm_create_v1_http_test.py::test_empty_u_ids_list - Assertio...
FAILED http_tests/dm_create_v1_http_test.py::test_invalid_token - simplejson....
FAILED http_tests/dm_create_v1_http_test.py::test_invalid_user - simplejson.e...
FAILED http_tests/dm_details_v1_http_test.py::test_invalid_dm_id - simplejson...
FAILED http_tests/dm_details_v1_http_test.py::test_invalid_user - simplejson....
FAILED http_tests/dm_details_v1_http_test.py::test_invalid_token - simplejson...
FAILED http_tests/dm_invite_v1_http_test.py::test_function - AssertionError: ...
FAILED http_tests/dm_invite_v1_http_test.py::test_multiple - AssertionError: ...
FAILED http_tests/dm_invite_v1_http_test.py::test_invalid_token - simplejson....
FAILED http_tests/dm_invite_v1_http_test.py::test_invalid_dm_id - simplejson....
FAILED http_tests/dm_invite_v1_http_test.py::test_invalid_user - simplejson.e...
FAILED http_tests/dm_invite_v1_http_test.py::test_unauthorised_user - simplej...
FAILED http_tests/dm_leave_v1_http_test.py::test_function - AssertionError: a...
FAILED http_tests/dm_leave_v1_http_test.py::test_multiple - AssertionError: a...
FAILED http_tests/dm_leave_v1_http_test.py::test_invalid_token - simplejson.e...
FAILED http_tests/dm_leave_v1_http_test.py::test_invalid_dm_id - simplejson.e...
FAILED http_tests/dm_leave_v1_http_test.py::test_unauthorised_user - simplejs...
FAILED http_tests/dm_list_v1_http_test.py::test_multiple - AssertionError: as...
FAILED http_tests/dm_list_v1_http_test.py::test_invalid_token - simplejson.er...
FAILED http_tests/dm_messages_v1_http_test.py::test_dm_messages_v1_AccessError
FAILED http_tests/dm_messages_v1_http_test.py::test_dm_messages_v1_InputError_invalid_dm
FAILED http_tests/dm_messages_v1_http_test.py::test_dm_messages_v1_InputError_invalid_start
FAILED http_tests/dm_remove_v1_http_test.py::test_multiple - AssertionError: ...
FAILED http_tests/dm_remove_v1_http_test.py::test_invalid_dm_id - simplejson....
FAILED http_tests/dm_remove_v1_http_test.py::test_unauthorized_user - simplej...
FAILED http_tests/dm_remove_v1_http_test.py::test_invalid_token - simplejson....
FAILED http_tests/message_edit_v2_http_test.py::test_http_message_edit_v2_edit_one
FAILED http_tests/message_edit_v2_http_test.py::test_http_message_edit_v2_edit_multiple
FAILED http_tests/message_edit_v2_http_test.py::test_http_message_edit_v2_edit_all_messages
FAILED http_tests/message_edit_v2_http_test.py::test_http_message_edit_v2_owner_edits_message
FAILED http_tests/message_edit_v2_http_test.py::test_http_message_edit_v2_dream_owner_edits_message
FAILED http_tests/message_edit_v2_http_test.py::test_http_message_edit_v2_dream_owner_edits_message_in_channel
FAILED http_tests/message_edit_v2_http_test.py::test_message_edit_v2_edit_msg_in_dm
FAILED http_tests/message_react_v1_http_test.py::test_message_react_v1_different_messages
FAILED http_tests/message_senddm_http_test.py::test_message_senddm_v1_access_error
FAILED http_tests/message_sendlater_v1_http_test.py::test_http_message_sendlater_v1_default_Access_Error
FAILED http_tests/message_sendlater_v1_http_test.py::test_http_message_send_later_v1_send_multiple_after
FAILED http_tests/message_sendlater_v1_http_test.py::test_http_message_send_later_v1_leave_channel_before_message_sent
FAILED http_tests/message_sendlaterdm_v1_http_test.py::test_http_message_sendlaterdm_v1_default_Access_Error
FAILED http_tests/message_sendlaterdm_v1_http_test.py::test_http_message_sendlaterdm_v1_send_multiple_after
FAILED http_tests/message_sendlaterdm_v1_http_test.py::test_http_message_sendlaterdm_v1_leave_dm_before_message_sent
FAILED http_tests/message_unreact_v1_http_test.py::test_message_unreact_v1_different_messages
FAILED http_tests/message_unreact_v1_http_test.py::test_message_unreact_v1_multiple_reacts
FAILED http_tests/notifications_get_v1_http_test.py::test_notifications_channel_tag
FAILED http_tests/notifications_get_v1_http_test.py::test_notifications_dm_tag
FAILED http_tests/standup_active_v1_http_test.py::test_invalid_channel_id - s...
FAILED http_tests/standup_active_v1_http_test.py::test_invalid_token - simple...
FAILED http_tests/standup_send_v1_http_test.py::test_invalid_channel_id - sim...
FAILED http_tests/standup_send_v1_http_test.py::test_too_long_message - simpl...
FAILED http_tests/standup_send_v1_http_test.py::test_inactive_standup - simpl...
FAILED http_tests/standup_send_v1_http_test.py::test_unauthorized_user - simp...
FAILED http_tests/standup_send_v1_http_test.py::test_invalid_token - simplejs...
FAILED http_tests/standup_start_v1_http_test.py::test_invalid_channel_id - si...
FAILED http_tests/standup_start_v1_http_test.py::test_active_standup - simple...
FAILED http_tests/standup_start_v1_http_test.py::test_unauthorized_user - sim...
FAILED http_tests/standup_start_v1_http_test.py::test_invalid_token - simplej...
FAILED http_tests/user_profile_http_test.py::test_user_profile - AssertionErr...
FAILED http_tests/user_profile_http_test.py::test_user_profile_invalid_token
FAILED http_tests/user_profile_http_test.py::test_user_profile_setname - Asse...
FAILED http_tests/user_profile_http_test.py::test_user_profile_setname_invalid_token
FAILED http_tests/user_profile_http_test.py::test_user_profile_setname_invalid_name_length
FAILED http_tests/user_profile_http_test.py::test_user_profile_setemail - Ass...
FAILED http_tests/user_profile_http_test.py::test_user_profile_sethandle_v1
FAILED http_tests/user_stats_http_test.py::test_user_stats_v1_empty - KeyErro...
FAILED http_tests/user_stats_http_test.py::test_user_stats_v1_full - KeyError...
FAILED http_tests/user_stats_http_test.py::test_user_stats_v1_all - KeyError:...
FAILED http_tests/user_stats_http_test.py::test_user_stats_v1_invite_join - K...
FAILED http_tests/user_stats_http_test.py::test_user_stats_v1_active - KeyErr...
FAILED http_tests/users_stats_http_test.py::test_users_stats_v1_empty - simpl...
FAILED http_tests/users_stats_http_test.py::test_users_stats_v1_no_msg - simp...
FAILED http_tests/users_stats_http_test.py::test_users_stats_v1_loner - simpl...
FAILED http_tests/users_stats_http_test.py::test_users_stats_v1_invite_join
FAILED http_tests/users_stats_http_test.py::test_users_stats_v1_partial_util
FAILED http_tests/users_stats_http_test.py::test_users_stats_v1_active - simp...
================== 100 failed, 184 passed in 63.82s (0:01:03) ==================
