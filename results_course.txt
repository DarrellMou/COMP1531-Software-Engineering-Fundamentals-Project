============================= test session starts ==============================
platform linux -- Python 3.7.3, pytest-6.1.0, py-1.9.0, pluggy-0.13.1
rootdir: /tmp_amd/ravel/export/ravel/1/hsmith/automark/tempstore, configfile: pytest.ini
plugins: hypothesis-5.36.1
collected 76 items

tests/echo_test.py FF                                                    [  2%]
tests/auth_tests/auth_login_test.py ..E                                  [  6%]
tests/auth_tests/auth_register_test.py ..........................FFFFFF  [ 48%]
tests/channel_tests/channel_details_test.py EEEE                         [ 53%]
tests/channel_tests/channel_invite_test.py EEEEEE                        [ 61%]
tests/channel_tests/channel_join_test.py EEEE                            [ 67%]
tests/channel_tests/channel_messages_test.py EEEEE                       [ 73%]
tests/channels_tests/channels_create_test.py EEEEE                       [ 80%]
tests/channels_tests/channels_list_test.py EEEEEEEEEE                    [ 93%]
tests/channels_tests/channels_listall_test.py EEEEE                      [100%]

==================================== ERRORS ====================================
___________ ERROR at setup of test_registered_but_incorrect_password ___________

user_factory = <function user_factory.<locals>.make_user at 0x7f2fa50ec8c8>

    @pytest.fixture
    def user_woody(user_factory):
>       return user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

tests/fixtures.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/fixtures.py:12: in make_user
    tok = auth.auth_register_v1(email, password, name_first, name_last).popitem()[-1]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
___________________ ERROR at setup of test_member_successful ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f2fa50ec620>

    @pytest.fixture
    def user_woody(user_factory):
>       return user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

tests/fixtures.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/fixtures.py:12: in make_user
    tok = auth.auth_register_v1(email, password, name_first, name_last).popitem()[-1]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
_______________ ERROR at setup of test_non_member_not_successful _______________

user_factory = <function user_factory.<locals>.make_user at 0x7f2fa5078730>

    @pytest.fixture
    def user_woody(user_factory):
>       return user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

tests/fixtures.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/fixtures.py:12: in make_user
    tok = auth.auth_register_v1(email, password, name_first, name_last).popitem()[-1]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
__________________ ERROR at setup of test_invalid_channel_id ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f2fa50b6840>

    @pytest.fixture
    def user_woody(user_factory):
>       return user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

tests/fixtures.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/fixtures.py:12: in make_user
    tok = auth.auth_register_v1(email, password, name_first, name_last).popitem()[-1]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f2fa50b6d90>

    @pytest.fixture
    def user_woody(user_factory):
>       return user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

tests/fixtures.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/fixtures.py:12: in make_user
    tok = auth.auth_register_v1(email, password, name_first, name_last).popitem()[-1]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
__________________ ERROR at setup of test_invite_global_owner __________________

user_factory = <function user_factory.<locals>.make_user at 0x7f2fa50e2268>

    @pytest.fixture
    def user_woody(user_factory):
>       return user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

tests/fixtures.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/fixtures.py:12: in make_user
    tok = auth.auth_register_v1(email, password, name_first, name_last).popitem()[-1]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
_________________ ERROR at setup of test_invite_global_member __________________

user_factory = <function user_factory.<locals>.make_user at 0x7f2fa50e22f0>

    @pytest.fixture
    def user_woody(user_factory):
>       return user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

tests/fixtures.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/fixtures.py:12: in make_user
    tok = auth.auth_register_v1(email, password, name_first, name_last).popitem()[-1]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
__________ ERROR at setup of test_invitation_from_non_channel_member ___________

user_factory = <function user_factory.<locals>.make_user at 0x7f2fa50e28c8>

    @pytest.fixture
    def user_woody(user_factory):
>       return user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

tests/fixtures.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/fixtures.py:12: in make_user
    tok = auth.auth_register_v1(email, password, name_first, name_last).popitem()[-1]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
__________________ ERROR at setup of test_channel_id_invalid ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f2fa50e1378>

    @pytest.fixture
    def user_woody(user_factory):
>       return user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

tests/fixtures.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/fixtures.py:12: in make_user
    tok = auth.auth_register_v1(email, password, name_first, name_last).popitem()[-1]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
_____________________ ERROR at setup of test_u_id_invalid ______________________

user_factory = <function user_factory.<locals>.make_user at 0x7f2fa50e18c8>

    @pytest.fixture
    def user_woody(user_factory):
>       return user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

tests/fixtures.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/fixtures.py:12: in make_user
    tok = auth.auth_register_v1(email, password, name_first, name_last).popitem()[-1]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
___________________ ERROR at setup of test_invalidated_token ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f2fa50e1e18>

    @pytest.fixture
    def user_woody(user_factory):
>       return user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

tests/fixtures.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/fixtures.py:12: in make_user
    tok = auth.auth_register_v1(email, password, name_first, name_last).popitem()[-1]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
___________ ERROR at setup of test_global_owner_join_channel_private ___________

user_factory = <function user_factory.<locals>.make_user at 0x7f2fa4fec400>

    @pytest.fixture
    def user_woody(user_factory):
>       return user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

tests/fixtures.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/fixtures.py:12: in make_user
    tok = auth.auth_register_v1(email, password, name_first, name_last).popitem()[-1]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
_______________ ERROR at setup of test_global_member_join_public _______________

user_factory = <function user_factory.<locals>.make_user at 0x7f2fa4fec8c8>

    @pytest.fixture
    def user_woody(user_factory):
>       return user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

tests/fixtures.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/fixtures.py:12: in make_user
    tok = auth.auth_register_v1(email, password, name_first, name_last).popitem()[-1]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
________________ ERROR at setup of test_join_invalid_channel_id ________________

user_factory = <function user_factory.<locals>.make_user at 0x7f2fa4fecf28>

    @pytest.fixture
    def user_woody(user_factory):
>       return user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

tests/fixtures.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/fixtures.py:12: in make_user
    tok = auth.auth_register_v1(email, password, name_first, name_last).popitem()[-1]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
___________________ ERROR at setup of test_invalidated_token ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f2fa5013598>

    @pytest.fixture
    def user_woody(user_factory):
>       return user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

tests/fixtures.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/fixtures.py:12: in make_user
    tok = auth.auth_register_v1(email, password, name_first, name_last).popitem()[-1]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
______________________ ERROR at setup of test_no_messages ______________________

user_factory = <function user_factory.<locals>.make_user at 0x7f2fa50139d8>

    @pytest.fixture
    def user_woody(user_factory):
>       return user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

tests/fixtures.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/fixtures.py:12: in make_user
    tok = auth.auth_register_v1(email, password, name_first, name_last).popitem()[-1]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
____ ERROR at setup of test_input_error_when_start_greate_than_message_num _____

user_factory = <function user_factory.<locals>.make_user at 0x7f2fa5013f28>

    @pytest.fixture
    def user_woody(user_factory):
>       return user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

tests/fixtures.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/fixtures.py:12: in make_user
    tok = auth.auth_register_v1(email, password, name_first, name_last).popitem()[-1]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
_________ ERROR at setup of test_access_error_when_user_is_non_member __________

user_factory = <function user_factory.<locals>.make_user at 0x7f2fa4fb3510>

    @pytest.fixture
    def user_woody(user_factory):
>       return user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

tests/fixtures.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/fixtures.py:12: in make_user
    tok = auth.auth_register_v1(email, password, name_first, name_last).popitem()[-1]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
__________ ERROR at setup of test_input_error_when_channel_id_invalid __________

user_factory = <function user_factory.<locals>.make_user at 0x7f2fa4fb3a60>

    @pytest.fixture
    def user_woody(user_factory):
>       return user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

tests/fixtures.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/fixtures.py:12: in make_user
    tok = auth.auth_register_v1(email, password, name_first, name_last).popitem()[-1]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
_________ ERROR at setup of test_access_error_when_invalid_token_given _________

user_factory = <function user_factory.<locals>.make_user at 0x7f2fa4fc20d0>

    @pytest.fixture
    def user_woody(user_factory):
>       return user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

tests/fixtures.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/fixtures.py:12: in make_user
    tok = auth.auth_register_v1(email, password, name_first, name_last).popitem()[-1]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
____________ ERROR at setup of test_create_channel[True-andys room] ____________

user_factory = <function user_factory.<locals>.make_user at 0x7f2fa4fc26a8>

    @pytest.fixture
    def user_woody(user_factory):
>       return user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

tests/fixtures.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/fixtures.py:12: in make_user
    tok = auth.auth_register_v1(email, password, name_first, name_last).popitem()[-1]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
___________ ERROR at setup of test_create_channel[False-andys room] ____________

user_factory = <function user_factory.<locals>.make_user at 0x7f2fa4fc2ea0>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

tests/fixtures.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/fixtures.py:12: in make_user
    tok = auth.auth_register_v1(email, password, name_first, name_last).popitem()[-1]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'zerg.thedestroyer@zergworld.com', password = '!!qazwsx'
name_first = 'lord', name_last = 'zerg'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
_ ERROR at setup of test_channel_name_length[True-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] _

user_factory = <function user_factory.<locals>.make_user at 0x7f2fa4fda400>

    @pytest.fixture
    def user_woody(user_factory):
>       return user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

tests/fixtures.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/fixtures.py:12: in make_user
    tok = auth.auth_register_v1(email, password, name_first, name_last).popitem()[-1]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
_ ERROR at setup of test_channel_name_length[False-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] _

user_factory = <function user_factory.<locals>.make_user at 0x7f2fa4fda9d8>

    @pytest.fixture
    def user_woody(user_factory):
>       return user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

tests/fixtures.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/fixtures.py:12: in make_user
    tok = auth.auth_register_v1(email, password, name_first, name_last).popitem()[-1]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
___________________ ERROR at setup of test_invalidated_token ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f2fa4f79048>

    @pytest.fixture
    def user_woody(user_factory):
>       return user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

tests/fixtures.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/fixtures.py:12: in make_user
    tok = auth.auth_register_v1(email, password, name_first, name_last).popitem()[-1]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
_____________ ERROR at setup of test_when_member_is_in_no_channels _____________

user_factory = <function user_factory.<locals>.make_user at 0x7f2fa4f79620>

    @pytest.fixture
    def user_woody(user_factory):
>       return user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

tests/fixtures.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/fixtures.py:12: in make_user
    tok = auth.auth_register_v1(email, password, name_first, name_last).popitem()[-1]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
__________ ERROR at setup of test_channel_owner_in_channel[True-andy] __________

user_factory = <function user_factory.<locals>.make_user at 0x7f2fa4f79a60>

    @pytest.fixture
    def user_woody(user_factory):
>       return user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

tests/fixtures.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/fixtures.py:12: in make_user
    tok = auth.auth_register_v1(email, password, name_first, name_last).popitem()[-1]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
_________ ERROR at setup of test_channel_owner_in_channel[False-andy] __________

user_factory = <function user_factory.<locals>.make_user at 0x7f2fa4f79ea0>

    @pytest.fixture
    def user_woody(user_factory):
>       return user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

tests/fixtures.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/fixtures.py:12: in make_user
    tok = auth.auth_register_v1(email, password, name_first, name_last).popitem()[-1]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
_________ ERROR at setup of test_channel_member_in_channel[True-andy] __________

user_factory = <function user_factory.<locals>.make_user at 0x7f2fa4f85598>

    @pytest.fixture
    def user_woody(user_factory):
>       return user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

tests/fixtures.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/fixtures.py:12: in make_user
    tok = auth.auth_register_v1(email, password, name_first, name_last).popitem()[-1]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
_________ ERROR at setup of test_channel_member_in_channel[False-andy] _________

user_factory = <function user_factory.<locals>.make_user at 0x7f2fa4f85ae8>

    @pytest.fixture
    def user_woody(user_factory):
>       return user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

tests/fixtures.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/fixtures.py:12: in make_user
    tok = auth.auth_register_v1(email, password, name_first, name_last).popitem()[-1]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
____ ERROR at setup of test_user_in_multiple_channels[False-True-ZERG-andy] ____

user_factory = <function user_factory.<locals>.make_user at 0x7f2fa4fa60d0>

    @pytest.fixture
    def user_woody(user_factory):
>       return user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

tests/fixtures.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/fixtures.py:12: in make_user
    tok = auth.auth_register_v1(email, password, name_first, name_last).popitem()[-1]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
___ ERROR at setup of test_user_in_multiple_channels[False-False-ZERG-andy] ____

user_factory = <function user_factory.<locals>.make_user at 0x7f2fa4fa6620>

    @pytest.fixture
    def user_woody(user_factory):
>       return user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

tests/fixtures.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/fixtures.py:12: in make_user
    tok = auth.auth_register_v1(email, password, name_first, name_last).popitem()[-1]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
____ ERROR at setup of test_user_in_multiple_channels[True-True-ZERG-andy] _____

user_factory = <function user_factory.<locals>.make_user at 0x7f2fa4fa6ae8>

    @pytest.fixture
    def user_woody(user_factory):
>       return user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

tests/fixtures.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/fixtures.py:12: in make_user
    tok = auth.auth_register_v1(email, password, name_first, name_last).popitem()[-1]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
____ ERROR at setup of test_user_in_multiple_channels[True-False-ZERG-andy] ____

user_factory = <function user_factory.<locals>.make_user at 0x7f2fa4efa268>

    @pytest.fixture
    def user_woody(user_factory):
>       return user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

tests/fixtures.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/fixtures.py:12: in make_user
    tok = auth.auth_register_v1(email, password, name_first, name_last).popitem()[-1]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
___________________ ERROR at setup of test_invalidated_token ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f2fa4efa6a8>

    @pytest.fixture
    def user_woody(user_factory):
>       return user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

tests/fixtures.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/fixtures.py:12: in make_user
    tok = auth.auth_register_v1(email, password, name_first, name_last).popitem()[-1]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
___________________ ERROR at setup of test_when_no_channels ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f2fa4efab70>

    @pytest.fixture
    def user_woody(user_factory):
>       return user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

tests/fixtures.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/fixtures.py:12: in make_user
    tok = auth.auth_register_v1(email, password, name_first, name_last).popitem()[-1]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
____________ ERROR at setup of test_when_one_channel_exists_private ____________

user_factory = <function user_factory.<locals>.make_user at 0x7f2fa4f132f0>

    @pytest.fixture
    def user_woody(user_factory):
>       return user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

tests/fixtures.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/fixtures.py:12: in make_user
    tok = auth.auth_register_v1(email, password, name_first, name_last).popitem()[-1]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
____________ ERROR at setup of test_when_one_channel_exists_public _____________

user_factory = <function user_factory.<locals>.make_user at 0x7f2fa4f13730>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

tests/fixtures.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/fixtures.py:12: in make_user
    tok = auth.auth_register_v1(email, password, name_first, name_last).popitem()[-1]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'zerg.thedestroyer@zergworld.com', password = '!!qazwsx'
name_first = 'lord', name_last = 'zerg'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
_____________ ERROR at setup of test_when_multiple_channels_exist ______________

user_factory = <function user_factory.<locals>.make_user at 0x7f2fa4f13bf8>

    @pytest.fixture
    def user_woody(user_factory):
>       return user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

tests/fixtures.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/fixtures.py:12: in make_user
    tok = auth.auth_register_v1(email, password, name_first, name_last).popitem()[-1]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
___________________ ERROR at setup of test_invalidated_token ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f2fa4eb01e0>

    @pytest.fixture
    def user_woody(user_factory):
>       return user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

tests/fixtures.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/fixtures.py:12: in make_user
    tok = auth.auth_register_v1(email, password, name_first, name_last).popitem()[-1]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
=================================== FAILURES ===================================
__________________________________ test_echo ___________________________________

    def test_echo():
>       assert echo.echo("1") == "1", "1 == 1"
E       NameError: name 'echo' is not defined

tests/echo_test.py:7: NameError
_______________________________ test_echo_except _______________________________

    def test_echo_except():
        with pytest.raises(InputError):
>           assert echo.echo("echo")
E           NameError: name 'echo' is not defined

tests/echo_test.py:14: NameError
____________________ test_auth_register_pass_password_short ____________________

    @util.resets_workspace
    def test_auth_register_pass_password_short():
>       assert is_valid(auth_register_v1(EMAIL, "a" * 6, FIRST, LAST))

tests/auth_tests/auth_register_test.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'valid.email@domain.com', password = 'aaaaaa', name_first = 'FFFFF'
name_last = 'LLLLL'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
____________________ test_auth_register_pass_password_long _____________________

    @util.resets_workspace
    def test_auth_register_pass_password_long():
>       assert is_valid(auth_register_v1(EMAIL, "a" * 64, FIRST, LAST))

tests/auth_tests/auth_register_test.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'valid.email@domain.com'
password = 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
name_first = 'FFFFF', name_last = 'LLLLL'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
_____________________ test_auth_register_pass_names_short ______________________

    @util.resets_workspace
    def test_auth_register_pass_names_short():
>       assert is_valid(auth_register_v1(EMAIL, PASSWORD, "F", "L"))

tests/auth_tests/auth_register_test.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'valid.email@domain.com', password = 'aaaaaaaa', name_first = 'F'
name_last = 'L'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
______________________ test_auth_register_pass_names_long ______________________

    @util.resets_workspace
    def test_auth_register_pass_names_long():
>       assert is_valid(auth_register_v1(EMAIL, PASSWORD, "F" * 50, "L" * 50))

tests/auth_tests/auth_register_test.py:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'valid.email@domain.com', password = 'aaaaaaaa'
name_first = 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'
name_last = 'LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
_________________ test_auth_register_pass_double_same_password _________________

    @util.resets_workspace
    def test_auth_register_pass_double_same_password():
>       assert is_valid(auth_register_v1(EMAIL, PASSWORD, FIRST, LAST))

tests/auth_tests/auth_register_test.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'valid.email@domain.com', password = 'aaaaaaaa', name_first = 'FFFFF'
name_last = 'LLLLL'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
___________________ test_auth_register_pass_double_same_name ___________________

    @util.resets_workspace
    def test_auth_register_pass_double_same_name():
>       assert is_valid(auth_register_v1(EMAIL, PASSWORD, FIRST, LAST))

tests/auth_tests/auth_register_test.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'valid.email@domain.com', password = 'aaaaaaaa', name_first = 'FFFFF'
name_last = 'LLLLL'

    def auth_register_v1(email, password, name_first, name_last):
    
        data = retrieve_data()
        # Checks for invalid email format
        if auth_email_format(email) == False:
            raise InputError
        # Checks for an already existing email address
        elif any(email == data['users'][key_it]['email']\
        for key_it in data['users']):
>           raise InputError
E           src.error.InputError

src/auth.py:50: InputError
=========================== short test summary info ============================
FAILED tests/echo_test.py::test_echo - NameError: name 'echo' is not defined
FAILED tests/echo_test.py::test_echo_except - NameError: name 'echo' is not d...
FAILED tests/auth_tests/auth_register_test.py::test_auth_register_pass_password_short
FAILED tests/auth_tests/auth_register_test.py::test_auth_register_pass_password_long
FAILED tests/auth_tests/auth_register_test.py::test_auth_register_pass_names_short
FAILED tests/auth_tests/auth_register_test.py::test_auth_register_pass_names_long
FAILED tests/auth_tests/auth_register_test.py::test_auth_register_pass_double_same_password
FAILED tests/auth_tests/auth_register_test.py::test_auth_register_pass_double_same_name
ERROR tests/auth_tests/auth_login_test.py::test_registered_but_incorrect_password
ERROR tests/channel_tests/channel_details_test.py::test_member_successful - s...
ERROR tests/channel_tests/channel_details_test.py::test_non_member_not_successful
ERROR tests/channel_tests/channel_details_test.py::test_invalid_channel_id - ...
ERROR tests/channel_tests/channel_details_test.py::test_invalid_token - src.e...
ERROR tests/channel_tests/channel_invite_test.py::test_invite_global_owner - ...
ERROR tests/channel_tests/channel_invite_test.py::test_invite_global_member
ERROR tests/channel_tests/channel_invite_test.py::test_invitation_from_non_channel_member
ERROR tests/channel_tests/channel_invite_test.py::test_channel_id_invalid - s...
ERROR tests/channel_tests/channel_invite_test.py::test_u_id_invalid - src.err...
ERROR tests/channel_tests/channel_invite_test.py::test_invalidated_token - sr...
ERROR tests/channel_tests/channel_join_test.py::test_global_owner_join_channel_private
ERROR tests/channel_tests/channel_join_test.py::test_global_member_join_public
ERROR tests/channel_tests/channel_join_test.py::test_join_invalid_channel_id
ERROR tests/channel_tests/channel_join_test.py::test_invalidated_token - src....
ERROR tests/channel_tests/channel_messages_test.py::test_no_messages - src.er...
ERROR tests/channel_tests/channel_messages_test.py::test_input_error_when_start_greate_than_message_num
ERROR tests/channel_tests/channel_messages_test.py::test_access_error_when_user_is_non_member
ERROR tests/channel_tests/channel_messages_test.py::test_input_error_when_channel_id_invalid
ERROR tests/channel_tests/channel_messages_test.py::test_access_error_when_invalid_token_given
ERROR tests/channels_tests/channels_create_test.py::test_create_channel[True-andys room]
ERROR tests/channels_tests/channels_create_test.py::test_create_channel[False-andys room]
ERROR tests/channels_tests/channels_create_test.py::test_channel_name_length[True-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG]
ERROR tests/channels_tests/channels_create_test.py::test_channel_name_length[False-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG]
ERROR tests/channels_tests/channels_create_test.py::test_invalidated_token - ...
ERROR tests/channels_tests/channels_list_test.py::test_when_member_is_in_no_channels
ERROR tests/channels_tests/channels_list_test.py::test_channel_owner_in_channel[True-andy]
ERROR tests/channels_tests/channels_list_test.py::test_channel_owner_in_channel[False-andy]
ERROR tests/channels_tests/channels_list_test.py::test_channel_member_in_channel[True-andy]
ERROR tests/channels_tests/channels_list_test.py::test_channel_member_in_channel[False-andy]
ERROR tests/channels_tests/channels_list_test.py::test_user_in_multiple_channels[False-True-ZERG-andy]
ERROR tests/channels_tests/channels_list_test.py::test_user_in_multiple_channels[False-False-ZERG-andy]
ERROR tests/channels_tests/channels_list_test.py::test_user_in_multiple_channels[True-True-ZERG-andy]
ERROR tests/channels_tests/channels_list_test.py::test_user_in_multiple_channels[True-False-ZERG-andy]
ERROR tests/channels_tests/channels_list_test.py::test_invalidated_token - sr...
ERROR tests/channels_tests/channels_listall_test.py::test_when_no_channels - ...
ERROR tests/channels_tests/channels_listall_test.py::test_when_one_channel_exists_private
ERROR tests/channels_tests/channels_listall_test.py::test_when_one_channel_exists_public
ERROR tests/channels_tests/channels_listall_test.py::test_when_multiple_channels_exist
ERROR tests/channels_tests/channels_listall_test.py::test_invalidated_token
=================== 8 failed, 28 passed, 40 errors in 1.02s ====================
