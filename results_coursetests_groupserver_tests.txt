============================= test session starts ==============================
platform linux -- Python 3.7.3, pytest-6.2.3, py-1.10.0, pluggy-0.13.1
rootdir: /tmp_amd/kamen/export/kamen/3/cs1531/automark/tempstore, configfile: pytest.ini
plugins: forked-1.3.0, xdist-2.2.1, hypothesis-6.1.1, timeout-1.4.2
collected 343 items

http_tests/admin_tests/test_admin_user_remove.py F.F.FFs....             [  3%]
http_tests/admin_tests/test_admin_userpermission_change.py FF....        [  4%]
http_tests/auth_tests/test_auth_login.py ....                            [  6%]
http_tests/auth_tests/test_auth_logout.py .F                             [  6%]
http_tests/auth_tests/test_auth_register.py .........................F.. [ 14%]
.                                                                        [ 15%]
http_tests/auth_tests/test_passwordreset_request.py FFs                  [ 16%]
http_tests/auth_tests/test_passwordreset_reset.py ..                     [ 16%]
http_tests/channel_tests/test_channel_addowner.py s.s...s..              [ 19%]
http_tests/channel_tests/test_channel_details.py F...                    [ 20%]
http_tests/channel_tests/test_channel_invite.py s......                  [ 22%]
http_tests/channel_tests/test_channel_join.py ...s.F                     [ 24%]
http_tests/channel_tests/test_channel_leave.py ....                      [ 25%]
http_tests/channel_tests/test_channel_messages.py ........               [ 27%]
http_tests/channel_tests/test_channel_removeowner.py ..FF..s.F           [ 30%]
http_tests/channels_tests/test_channels_create.py .....                  [ 31%]
http_tests/channels_tests/test_channels_list.py .........                [ 34%]
http_tests/channels_tests/test_channels_listall.py .....                 [ 35%]
http_tests/dm_tests/test_dm_create.py .FF..                              [ 37%]
http_tests/dm_tests/test_dm_details.py F...                              [ 38%]
http_tests/dm_tests/test_dm_invite.py s.....                             [ 40%]
http_tests/dm_tests/test_dm_leave.py ....                                [ 41%]
http_tests/dm_tests/test_dm_list.py .....                                [ 42%]
http_tests/dm_tests/test_dm_messages.py ........                         [ 45%]
http_tests/dm_tests/test_dm_remove.py .F...                              [ 46%]
http_tests/echo_tests/echo_test.py ..                                    [ 47%]
http_tests/message_tests/test_message_edit.py ........                   [ 49%]
http_tests/message_tests/test_message_meta.py F                          [ 49%]
http_tests/message_tests/test_message_pin.py FF.FFFFF                    [ 52%]
http_tests/message_tests/test_message_react.py FF..FFF                   [ 54%]
http_tests/message_tests/test_message_remove.py ......                   [ 55%]
http_tests/message_tests/test_message_send.py ..s..                      [ 57%]
http_tests/message_tests/test_message_senddm.py ..s..                    [ 58%]
http_tests/message_tests/test_message_sendlater.py FF...F                [ 60%]
http_tests/message_tests/test_message_sendlaterdm.py FF...F              [ 62%]
http_tests/message_tests/test_message_share.py ......ssssss.             [ 66%]
http_tests/message_tests/test_message_unpin.py FF.FFFFF                  [ 68%]
http_tests/message_tests/test_message_unreact.py FF.FFFF                 [ 70%]
http_tests/other_tests/test_clear.py F                                   [ 70%]
http_tests/other_tests/test_notifications_get.py ..sssFF..FF.s..FF       [ 75%]
http_tests/other_tests/test_search.py FFFFFF..                           [ 78%]
http_tests/other_tests/test_users_all.py FF                              [ 78%]
http_tests/standup_tests/test_standup_active.py FFFF.F                   [ 80%]
http_tests/standup_tests/test_standup_send.py FFF.F.F                    [ 82%]
http_tests/standup_tests/test_standup_start.py FFFs.FF.F                 [ 85%]
http_tests/stats_tests/test_user_stats.py FFFFFFFFFFFFFFFFFF             [ 90%]
http_tests/user_tests/test_user_profile.py F..                           [ 91%]
http_tests/user_tests/test_user_profile_setemail.py ........F            [ 93%]
http_tests/user_tests/test_user_profile_sethandle.py F.....F             [ 95%]
http_tests/user_tests/test_user_profile_setname.py .....F                [ 97%]
http_tests/user_tests/test_user_profile_uploadphoto.py F......F          [100%]

=================================== FAILURES ===================================
________________________ test_removal_can_do_no_action _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=327167966...DUwODQ0NDQ5OTAyNjY0OTk3NDAsInNlc3Npb25JRCI6MX0.rUBLswFHgWFeJe5hXqYfyS8QN1XbWuOZDV1ERDNabVg', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=245054474...TUxNjgwNTMwNzY1NDQ4MDM1OTA4OTksInNlc3Npb25JRCI6Mn0.O74xA0L0rTVRJWAfUwXSHH2O_PqmXrxjQkfUnoEfhF0', handle_str='lordzerg')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=146595055477730354884982088773829077026, owner_members=[327167966403960360205084444990266499740], all_members=[])
ctx = None

    def test_removal_can_do_no_action(user_woody, user_zerg, woodys_public_toybox, ctx):
        admin_user_remove(user_woody.token, user_zerg.u_id, ctx)
    
        with pytest.raises(AccessError):
>           auth_logout(user_zerg.token, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/admin_tests/test_admin_user_remove.py:19: Failed
_____________________ test_removal_profile_still_fetchable _____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=222590817...jUzNzA4ODc1Nzc1NTU1MTMzNzMsInNlc3Npb25JRCI6NX0.7vliC9_0dzwpIrhfFI97cQxIHSTOq-2ssSYdKwwrqGY', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=948134778...OTE2NTE2MzIyNzIzNTM2MjU3MjkxOSwic2Vzc2lvbklEIjo2fQ.oePJxN9qz4VrSOe0WgO3yO8HhKufiXmvAcjJuLxvrZo', handle_str='lordzerg')
ctx = None

    def test_removal_profile_still_fetchable(user_woody, user_zerg, ctx):
        admin_user_remove(user_woody.token, user_zerg.u_id, ctx)
    
        profile = user_profile(user_woody.token, user_zerg.u_id, ctx)['user']
    
>       assert profile['handle_str'] == 'Removed user' or f'{profile["name_first"]}{profile["name_last"]}' == 'Removed user' or f'{profile["name_first"]} {profile["name_last"]}' == 'Removed user'
E       KeyError: 'handle_str'

http_tests/admin_tests/test_admin_user_remove.py:40: KeyError
_________________________ test_removal_removed_from_dm _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=271916491...zU4NTg5NzgxNjA5OTgzNTI4NTgsInNlc3Npb25JRCI6OX0.zfMWv4lc-RYdTcs2tyRYPG0ADtsoEUrflSmrfOwdLhU', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=298577057...U1NDc0NzQyNzEyMDUzNzg3ODUyMDksInNlc3Npb25JRCI6MTB9.AZfE45rTEEh6KIK5jKvLGOXUKiA22EfxMFVmwA5GFXY', handle_str='lordzerg')
woody_and_buzz_dm = DM(owner=271916491253234206775858978160998352858, members=[316071917632729483609366913378053812231], name='sheriffwoody, buzzlightyear', dm_id=147021117598156813642685386333792970786)
ctx = None

    def test_removal_removed_from_dm(user_woody, user_zerg, woody_and_buzz_dm, ctx):
        dm_invite(user_woody.token, woody_and_buzz_dm.dm_id, user_zerg.u_id, ctx)
    
        admin_user_remove(user_woody.token, user_zerg.u_id, ctx)
    
>       members = dm_details(user_woody.token, woody_and_buzz_dm.dm_id, ctx)['members']

http_tests/admin_tests/test_admin_user_remove.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/dm.py:15: in dm_details
    token=token, dm_id=dm_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           http_tests.error.AccessError: 403 Forbidden: None

http_tests/fakepi/util.py:71: AccessError
________________________ test_removal_not_in_users_all _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=310249017...IzNTcxODAzMDU0OTIxNjA2MjUsInNlc3Npb25JRCI6MTJ9.n-6wrKBK3LcSuZrYO_tCeRdtYlqzg8rPTmDBSIpMkLQ', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=176691852...E1OTEzMDI1MjUzNDkwNjY2Njg2NzYsInNlc3Npb25JRCI6MTN9.j67cdAtBb1tIBkD75yhgLBk7R7Q7MnFUpB0-Yyxg06M', handle_str='lordzerg')
ctx = None

    def test_removal_not_in_users_all(user_woody, user_zerg, ctx):
        admin_user_remove(user_woody.token, user_zerg.u_id, ctx)
    
>       users = users_all(user_woody.token, ctx)['users']
E       KeyError: 'users'

http_tests/admin_tests/test_admin_user_remove.py:66: KeyError
______________________ test_successful_permission_change _______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=275227275...k2NzE2MDg5MDQ0MDMzOTEzODcsInNlc3Npb25JRCI6MjB9.rFYbCFL0kZ5qP0xU-S2xYXBSav7wxmt3-tjmbl6oDGA', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=98751...cwOTMzMjAwMzE1NzYyNTU5Miwic2Vzc2lvbklEIjoyMX0.hx6Lzd3M1az9iGIvyhzM73Njx2cgojgAFs8RxwcpYZc', handle_str='buzzlightyear')
ctx = None

    def test_successful_permission_change(user_woody, user_buzz, ctx):
        admin_userpermission_change(user_woody.token, user_buzz.u_id, Permissions.DREAMS_OWNER, ctx)
    
        # with this newfound power, buzz betrays woody (just like in the movie)
        # this should succeed
>       assert admin_userpermission_change(user_buzz.token, user_woody.u_id, Permissions.DREAMS_MEMBER, ctx) is not None
E       AssertionError: assert None is not None
E        +  where None = admin_userpermission_change('eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2MTkxODIyMTIsImlhdCI6MTYxOTE4MjIwNywiYXV0aF91c2VyX2lkIjo5ODc1MTk2MzI3Njg3NDY0NzU0MDcwOTMzMjAwMzE1NzYyNTU5Miwic2Vzc2lvbklEIjoyMX0.hx6Lzd3M1az9iGIvyhzM73Njx2cgojgAFs8RxwcpYZc', 275227275310567845299671608904403391387, 2, None)
E        +    where 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2MTkxODIyMTIsImlhdCI6MTYxOTE4MjIwNywiYXV0aF91c2VyX2lkIjo5ODc1MTk2MzI3Njg3NDY0NzU0MDcwOTMzMjAwMzE1NzYyNTU5Miwic2Vzc2lvbklEIjoyMX0.hx6Lzd3M1az9iGIvyhzM73Njx2cgojgAFs8RxwcpYZc' = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=98751...cwOTMzMjAwMzE1NzYyNTU5Miwic2Vzc2lvbklEIjoyMX0.hx6Lzd3M1az9iGIvyhzM73Njx2cgojgAFs8RxwcpYZc', handle_str='buzzlightyear').token
E        +    and   275227275310567845299671608904403391387 = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=275227275...k2NzE2MDg5MDQ0MDMzOTEzODcsInNlc3Npb25JRCI6MjB9.rFYbCFL0kZ5qP0xU-S2xYXBSav7wxmt3-tjmbl6oDGA', handle_str='sheriffwoody').u_id
E        +    and   2 = Permissions.DREAMS_MEMBER

http_tests/admin_tests/test_admin_userpermission_change.py:17: AssertionError
_________________ test_changing_to_same_permission_idempotent __________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=307936488...c0MTExMjkzMjU5OTQ5NzE0MDcsInNlc3Npb25JRCI6MjJ9.Sx62ZRRA3242CMfv8YHwm7ywEUdwdcTqmiPZBkKK8Js', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=26807...0MzI1MTk3NzMyNzkxMzI0NjgsInNlc3Npb25JRCI6MjN9.5N_9zoy0G_XH_bFffRcr_w8XoM5Xi01TiZwX_w9sJ3A', handle_str='buzzlightyear')
ctx = None

    def test_changing_to_same_permission_idempotent(user_woody, user_buzz, ctx):
>       admin_userpermission_change(user_woody.token, user_buzz.u_id, Permissions.DREAMS_MEMBER, ctx)

http_tests/admin_tests/test_admin_userpermission_change.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/admin.py:25: in admin_userpermission_change
    token=token, u_id=u_id, permission_id=permission_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:69: InputError
__________________________ test_not_logged_in_logout ___________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=269973172...c2NjM0MzIyMjg0MDgxMzU2MjYsInNlc3Npb25JRCI6Mzd9.sHINleSanpm1HbDqLc0wIVDqFfDoJ08FYmd0lWFdMIE', handle_str='sheriffwoody')
ctx = None

    def test_not_logged_in_logout(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
    
        with pytest.raises(AccessError):
>           auth_logout(user_woody.token, ctx) == {'is_success': False}
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/auth_tests/test_auth_logout.py:19: Failed
_________________________ test_successful_registration _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=100139306...Y4MTY3OTc0NTIxOTM0NzM1NDksInNlc3Npb25JRCI6Mzl9.nzTlOK-OR86qG-_2wH8idiulGrxqfPSZSVlgjxmQn0w', handle_str='sheriffwoody')
ctx = None

    def test_successful_registration(user_woody, ctx):
        woody_prof = user_profile(user_woody.token, user_woody.u_id, ctx).popitem()[-1]
    
        assert woody_prof['email'] == user_woody.email
        assert woody_prof['name_first'] == user_woody.name_first
        assert woody_prof['name_last'] == user_woody.name_last
>       assert woody_prof['u_id'] == user_woody.u_id
E       KeyError: 'u_id'

http_tests/auth_tests/test_auth_register.py:32: KeyError
__________________________ test_return_format_correct __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=275041264...M4NjQ4NTg4OTgzMTA2NjMxOTMsInNlc3Npb25JRCI6NDR9.Tbc-7-s5LW5RgAkJM77Cn66CE25BndcWd6D8AAuNB1M', handle_str='sheriffwoody')
ctx = None

    def test_return_format_correct(user_woody, ctx):
>       assert auth_passwordreset_request(user_woody.email, ctx) == {}

http_tests/auth_tests/test_passwordreset_request.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:47: in auth_passwordreset_request
    email=email
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________ test_password_request_logs_out_everywhere ___________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=179001912...YzNzg2MTUxODM5MDYxNDY4MDYsInNlc3Npb25JRCI6NDV9.-9rY3IWQ7Ms00Zd_bXAcHga5NJ6JyDCKf6IV99WC6cs', handle_str='sheriffwoody')
ctx = None

    def test_password_request_logs_out_everywhere(user_woody, ctx):
        sess2 = auth_login(user_woody.email, user_woody.password, ctx)
    
>       auth_passwordreset_request(user_woody.email, ctx)

http_tests/auth_tests/test_passwordreset_request.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:47: in auth_passwordreset_request
    email=email
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________________________ test_member_successful ____________________________

woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=148006597097590490605842682760047306786, owner_members=[28302634885109128265733611471506387953], all_members=[])
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=283026348...TczMzYxMTQ3MTUwNjM4Nzk1Mywic2Vzc2lvbklEIjo1OH0.k4OBBpdY4doiQmMRF80PboasJP1-cyukUi20_IedgB4', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=87893...E2NjE2NTkxNTg3MTk1MDk3OSwic2Vzc2lvbklEIjo1OX0.0uz3Vg-rgy7_uh_qg9DyKPA5oRIQhbketsDLU-tFHq0', handle_str='buzzlightyear')
ctx = None

    def test_member_successful(woodys_public_toybox, user_woody, user_buzz, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
    
        ch_deets_1 = channel_details(user_woody.token, woodys_public_toybox.channel_id, ctx)
        ch_deets_2 = channel_details(user_buzz.token, woodys_public_toybox.channel_id, ctx)
    
        assert ch_deets_1['name'] == woodys_public_toybox.name
        assert ch_deets_2['name'] == woodys_public_toybox.name
    
>       assert ch_deets_1['is_public'] == woodys_public_toybox.is_public
E       KeyError: 'is_public'

http_tests/channel_tests/test_channel_details.py:20: KeyError
____________________________ test_invalidated_token ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=168650251...czNDk3OTA5NzE1OTQzNjU2NjksInNlc3Npb25JRCI6ODN9.cgDfjz5b7G2vOafDSuaNK2Z2Q9UVM2i_BI63uGquj68', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=148478429327501439871373770660120307746, owner_members=[168650251801556984437349790971594365669], all_members=[])
ctx = None

    def test_invalidated_token(user_woody, woodys_public_toybox, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           channel_join(user_woody.token, woodys_public_toybox.channel_id, ctx)

http_tests/channel_tests/test_channel_join.py:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:58: in channel_join
    token=token, channel_id=channel_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
______________________ test_nonmember_cannot_remove_owner ______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=898415294...k5MjM5ODAzNjM1MzU5MDg5OSwic2Vzc2lvbklEIjoxMDN9.oywgg6amGJVUQ4tKY6Ym1V6loVZ-iCQ3yHzAMQPhYBk', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=149280619226648117145368658769909327906, owner_members=[89841529427547104470992398036353590899], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=27160...jkwNzMyODM4NjUyNjAyMTIsInNlc3Npb25JRCI6MTA0fQ.rMcoh0MjVORPwl9IYiPjCT1WGWDfix16b6zcSKQ6D7E', handle_str='buzzlightyear')
ctx = None

    def test_nonmember_cannot_remove_owner(user_woody, woodys_public_toybox, user_buzz, ctx):
        with pytest.raises(AccessError):
>           channel_removeowner(user_buzz.token, woodys_public_toybox.channel_id, user_woody.u_id, ctx)

http_tests/channel_tests/test_channel_removeowner.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:80: in channel_removeowner
    token=token, channel_id=channel_id, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:69: InputError
_______________________ test_member_cannot_remove_owner ________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=124457035...NTAwNjAyNTg5Mjc3OTM5NzksInNlc3Npb25JRCI6MTA1fQ.mGB7-81QjF7oMWSeOsU40FGsfE-uhPHsCO0j9pKVp-Y', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=149318095732080614462337156929297262626, owner_members=[124457035336425561183950060258927793979], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=25464...zI3NTc2NDQwMjQ1MTM0NjksInNlc3Npb25JRCI6MTA2fQ.TywmKV2kgM5HUbvLSLns5Ixi7R4_pFtimMJbQXPbWSs', handle_str='buzzlightyear')
ctx = None

    def test_member_cannot_remove_owner(user_woody, woodys_public_toybox, user_buzz, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
        with pytest.raises(AccessError):
>           channel_removeowner(user_buzz.token, woodys_public_toybox.channel_id, user_woody.u_id, ctx)

http_tests/channel_tests/test_channel_removeowner.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:80: in channel_removeowner
    token=token, channel_id=channel_id, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:69: InputError
____________________________ test_invalidated_token ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=159195602...MTUzNDU5OTA5NTAzMDM2MTEsInNlc3Npb25JRCI6MTEyfQ.eUBoOrpoIsaMGOCPjHuCdkqUmrV_MQwE93dOCMYNpq0', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=149437307971370952583184034705049331746, owner_members=[159195602093160201177615345990950303611], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=20707...TU4NzAyNzg0MDU3MDIyMDksInNlc3Npb25JRCI6MTEzfQ.OpT3AEw9W3w6njuK97fWzUpURCtuJtRl8ulDHXMTTe4', handle_str='buzzlightyear')
ctx = None

    def test_invalidated_token(user_woody, woodys_public_toybox, user_buzz, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           channel_removeowner(user_woody.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)

http_tests/channel_tests/test_channel_removeowner.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:80: in channel_removeowner
    token=token, channel_id=channel_id, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:69: InputError
_________________________ test_dm_name_creation_single _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=110428689...MTQ3Nzk5MTExODkzOTY3OTgsInNlc3Npb25JRCI6MTQyfQ.g4M8C2uVa6ZnHG6olGAL66-ovRSgTudWqUwa-F1xOiw', handle_str='sheriffwoody')
ctx = None

    def test_dm_name_creation_single(user_woody, ctx):
        the_dm = dm_create(user_woody.token, [], ctx)
    
>       assert the_dm['dm_name'] == user_woody.handle_str
E       AssertionError: assert 'sheriffwoody, ' == 'sheriffwoody'
E         - sheriffwoody
E         + sheriffwoody, 
E         ?             ++

http_tests/dm_tests/test_dm_create.py:25: AssertionError
________________________ test_dm_name_creation_multiple ________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=214162337...EyNjczMTk2NTkzNzk0MTIyMywic2Vzc2lvbklEIjoxNDN9.Q2haoom49zXayRaNGSbHkf0v0glflQDLHWWMHHlvGZ4', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=21933...Dg1ODk0NjA2NjQ4MzUyMTMsInNlc3Npb25JRCI6MTQ0fQ.0v7-UyWLUC0A2TfD7Q38g9cWupy-Aas5r0bqPaw8XXc', handle_str='buzzlightyear')
ctx = None

    def test_dm_name_creation_multiple(user_woody, user_buzz, ctx):
        the_dm = dm_create(user_woody.token, [user_buzz.u_id], ctx)
    
>       assert the_dm['dm_name'] == ', '.join(sorted([user_woody.handle_str, user_buzz.handle_str]))
E       AssertionError: assert 'sheriffwoody, buzzlightyear' == 'buzzlightyear, sheriffwoody'
E         - buzzlightyear, sheriffwoody
E         + sheriffwoody, buzzlightyear

http_tests/dm_tests/test_dm_create.py:31: AssertionError
____________________________ test_member_successful ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=143198650...MjAxOTg5OTk3MDIwOTk5MTcsInNlc3Npb25JRCI6MTQ3fQ.x24SjCRE3X770dLtTuPj9lE79yFkOBn8Zy6tr0m1IcM', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=27339...jE4Njg5MDQ0MTE3MTE3NDYsInNlc3Npb25JRCI6MTQ4fQ.ECswZULb1BaKQyjbvWCEOEqSDEiCQ5m-tXLrsTUyIIc', handle_str='buzzlightyear')
woody_and_buzz_dm = DM(owner=143198650727447726860420198999702099917, members=[273395112167007889611061868904411711746], name='sheriffwoody, buzzlightyear', dm_id=150086569294387721404825736475581294626)
ctx = None

    def test_member_successful(user_woody, user_buzz, woody_and_buzz_dm, ctx):
        dm_deets = dm_details(user_buzz.token, woody_and_buzz_dm.dm_id, ctx)
    
        assert dm_deets['name'] == woody_and_buzz_dm.name
    
>       sorted_members = sorted(dm_deets['members'], key=lambda m: m['handle_str'])

http_tests/dm_tests/test_dm_details.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

m = {'name_first': 'sheriff', 'name_last': 'woody', 'u_id': 143198650727447726860420198999702099917}

>   sorted_members = sorted(dm_deets['members'], key=lambda m: m['handle_str'])
E   KeyError: 'handle_str'

http_tests/dm_tests/test_dm_details.py:16: KeyError
________________________ test_removal_removes_messages _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=606413120...YyMTI4OTg5NDU2NjU2MzgyMiwic2Vzc2lvbklEIjoyMDB9.WlWM-abZDnd6cSUL4KsOb3SZz36gw9gdxjbOl0Nppso', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=60641312024216022839621289894566563822, members=[136281376923513898975671819417374699411], name='sheriffwoody, buzzlightyear', dm_id=151206228025292306164844707065245673506)
message_factory = <function message_factory.<locals>.make_message at 0x7f0437f7a268>
ctx = None

    def test_removal_removes_messages(user_woody, woody_and_buzz_dm, message_factory, ctx):
        message_factory(user_woody, woody_and_buzz_dm, 'electric')
        message_factory(user_woody, woody_and_buzz_dm, 'electric mouse')
        message_factory(user_woody, woody_and_buzz_dm, 'electric house')
    
>       assert len(search(user_woody.token, 'electric', ctx)['messages']) == 3
E       TypeError: list indices must be integers or slices, not str

http_tests/dm_tests/test_dm_remove.py:23: TypeError
___________________________ test_message_ids_unique ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=176205702...Mjg3MzM0NzYyNDgwNzk2ODAsInNlc3Npb25JRCI6MjE5fQ.JOR3OlYBl3ZGtdvEGde3qUwqMMNr845Xsh2I6dnYAB4', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=859031410...Y1NjMyMzkwNTQyNzcxNzgwOTI0Niwic2Vzc2lvbklEIjoyMjB9.dq_NQfj9vjWIoJ4t1qrbdatwVVUAACke3gpdIlqf8Bc', handle_str='lordzerg')
woody_and_buzz_dm = DM(owner=176205702540239971823228733476248079680, members=[310725056323322948968073202762160252953], name='sheriffwoody, buzzlightyear', dm_id=151607657317711454997346795875610601506)
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=151611712215068935046144833454988797986, owner_members=[85903141078753228656323905427717809246], all_members=[])
ctx = None

    def test_message_ids_unique(user_woody, user_zerg, woody_and_buzz_dm, zergs_private_lair, ctx):
        msg1 = message_send(user_zerg.token, zergs_private_lair.channel_id, 'hi', ctx)
    
        # intra
>       msg2 = message_sendlater(user_zerg.token, zergs_private_lair.channel_id, 'hi', utc_now() + 1, ctx)

http_tests/message_tests/test_message_meta.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:113: in message_sendlater
    token=token, channel_id=channel_id, message=msg, time_sent=time_to_send
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________________________ test_successful_pin_in_channel ________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=665383122...MzODU5MTgxNjU0OTQzMDIyMCwic2Vzc2lvbklEIjoyMjJ9.Qdl4q7Ux8CHToNFlWG-C0QXtzk4rEyqCld8TImOqMY0', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=151645371507631495107328074666849544226, owner_members=[66538312257561399553338591816549430220], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f0437f96378>
ctx = None

    def test_successful_pin_in_channel(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
    
>       assert message_pin(user_woody.token, a_msg.message_id, ctx) == {}

http_tests/message_tests/test_message_pin.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:46: in message_pin
    token=token, message_id=message_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________________ test_successful_pin_in_dm ___________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=333772131...ODM1NzY0OTgyNDAzMzgzNjIsInNlc3Npb25JRCI6MjIzfQ.yTD6gZ0uzZNlxmbO6f5yz0UQcKWRIqAqEvQPsuWMIZc', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=333772131814426596269483576498240338362, members=[255994350025851831695602129997179694345], name='sheriffwoody, buzzlightyear', dm_id=151685730333616261360898225955150702626)
message_factory = <function message_factory.<locals>.make_message at 0x7f043800d950>
ctx = None

    def test_successful_pin_in_dm(user_woody, woody_and_buzz_dm, message_factory, ctx):
        a_msg = message_factory(user_woody, woody_and_buzz_dm)
    
>       assert message_pin(user_woody.token, a_msg.message_id, ctx) == {}

http_tests/message_tests/test_message_pin.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:46: in message_pin
    token=token, message_id=message_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________________________ test_cannot_pin_twice _____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=538323833...MyNzM1NTI4MDI4OTc1NzEzNCwic2Vzc2lvbklEIjoyMjZ9.Trhl5uxe-ZAsl2D6cMa5-BCC8khLs0PuXWLC_o4z6K0', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=151734404155256899656698819681039624226, owner_members=[53832383375398194842327355280289757134], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f0437f96a60>
ctx = None

    def test_cannot_pin_twice(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
>       message_pin(user_woody.token, a_msg.message_id, ctx)

http_tests/message_tests/test_message_pin.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:46: in message_pin
    token=token, message_id=message_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_________________________ test_channel_member_cant_pin _________________________

woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=151766883740479622321895293023479867426, owner_members=[215164399269104771141925216724997304630], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=30698...Dc3Nzg3Nzk3OTc4NTgxNzksInNlc3Npb25JRCI6MjI4fQ.eCgNK-FRNJpYgZP2An0QKcTz4qUSIQi9eLPtqqEB2w8', handle_str='buzzlightyear')
message_factory = <function message_factory.<locals>.make_message at 0x7f0438002400>
ctx = None

    def test_channel_member_cant_pin(woodys_public_toybox, user_buzz, message_factory, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
        a_msg = message_factory(user_buzz, woodys_public_toybox)
        with pytest.raises(AccessError):
>           message_pin(user_buzz.token, a_msg.message_id, ctx)

http_tests/message_tests/test_message_pin.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:46: in message_pin
    token=token, message_id=message_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________________________ test_dm_member_cant_pin ____________________________

user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=15354...zc4NTgxNzI5MTk3MzE1MTksInNlc3Npb25JRCI6MjI5fQ.XpWJJDq2csxWDFfxUS99W9vLrdNbJVQyQTVMvI_txLs', handle_str='buzzlightyear')
woody_and_buzz_dm = DM(owner=280208231151144745746460749190930450660, members=[153542910890516415185637858172919731519], name='sheriffwoody, buzzlightyear', dm_id=151828891661871411305712880196210337826)
message_factory = <function message_factory.<locals>.make_message at 0x7f0437f9ec80>
ctx = None

    def test_dm_member_cant_pin(user_buzz, woody_and_buzz_dm, message_factory, ctx):
        a_msg = message_factory(user_buzz, woody_and_buzz_dm)
        with pytest.raises(AccessError):
>           message_pin(user_buzz.token, a_msg.message_id, ctx)

http_tests/message_tests/test_message_pin.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:46: in message_pin
    token=token, message_id=message_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________________________ test_nonmember_cant_pin ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=148048021...NTI5Mjk5MjI2Mzk1ODQyODMsInNlc3Npb25JRCI6MjMxfQ.SGG5wR8gbG5vx38D27A-7lSyTGeA-fNlRQ36xYVBo0Y', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=161585927...OTI2MTUwNDk1NjUyOTk1OTY4MzAsInNlc3Npb25JRCI6MjMyfQ.wWoCAHMZjJ9mHGGm6Hgo4bHLkAYpT3wqRqVCU7gOdXI', handle_str='lordzerg')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=151869542839775855194688751661688236066, owner_members=[148048021784726792441652929922639584283], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f0437f7a048>
ctx = None

    def test_nonmember_cant_pin(user_woody, user_zerg, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
        with pytest.raises(AccessError):
>           message_pin(user_zerg.token, a_msg.message_id, ctx)

http_tests/message_tests/test_message_pin.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:46: in message_pin
    token=token, message_id=message_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=701788144...Q1MDA2NTgwNTg4NTM3NDU2MCwic2Vzc2lvbklEIjoyMzN9.CWHPaOpHdiOh6zTvBeRCuVo4iOAbSQiVKkvW9-065Go', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=151918938429976998438604822572964718626, owner_members=[70178814409486519181450065805885374560], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f043800d510>
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           message_pin(user_woody.token, a_msg.message_id, ctx)

http_tests/message_tests/test_message_pin.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:46: in message_pin
    token=token, message_id=message_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_______________________ test_successful_react_in_channel _______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=118970877...MTQzMzk5Nzg3NzY5ODEwNDEsInNlc3Npb25JRCI6MjM0fQ.I-R7UF1fI5Cph4bTrro2ZSp_zV62u2v1dM-bMSeagRo', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=27181...zMzMTk5NTU1MDIwMTUzMjgsInNlc3Npb25JRCI6MjM1fQ.IUVZaabMtZf_aw2K9nCw09MOCUFxz4ifb9Tq68Avg0s', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=151972741482858810207621222334198392866, owner_members=[118970877424393872256014339978776981041], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f0437f482f0>
ctx = None

    def test_successful_react_in_channel(user_woody, user_buzz, woodys_public_toybox, message_factory, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
    
        a_msg = message_factory(user_woody, woodys_public_toybox)
    
>       assert message_react(user_woody.token, a_msg.message_id, REACT, ctx) == {}

http_tests/message_tests/test_message_react.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:69: in message_react
    token=token, message_id=message_id, react_id=react_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
----------------------------- Captured stdout call -----------------------------
react id is 1
_____________________ test_successful_react_to_dm_message ______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=244663624...NDcwMjUzMTQ1NjYxNTExNzUsInNlc3Npb25JRCI6MjM2fQ.eetn-R_hXp_8Ui9JD2RiMBR23GGC9TO2uAoAs7d1RiA', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=14495...TM0NDI4ODAxNjMxNTA4MTIsInNlc3Npb25JRCI6MjM3fQ.SYiNu2qXOEEzxhlleQpMnFJwSVLn3pyZqRNcQjWNDzE', handle_str='buzzlightyear')
woody_and_buzz_dm = DM(owner=244663624989764039006347025314566151175, members=[144952444593593275372413442880163150812], name='sheriffwoody, buzzlightyear', dm_id=152018639149684948681032538280067541026)
message_factory = <function message_factory.<locals>.make_message at 0x7f0437f7ad90>
ctx = None

    def test_successful_react_to_dm_message(user_woody, user_buzz, woody_and_buzz_dm, message_factory, ctx):
        a_msg = message_factory(user_woody, woody_and_buzz_dm)
    
>       assert message_react(user_woody.token, a_msg.message_id, REACT, ctx) == {}

http_tests/message_tests/test_message_react.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:69: in message_react
    token=token, message_id=message_id, react_id=react_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
----------------------------- Captured stdout call -----------------------------
react id is 1
____________________________ test_cant_react_twice _____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=785306435...I1MDIyODIzMjM3MTc3NDM2Nywic2Vzc2lvbklEIjoyNDB9.UXsj4xYNGmmrGPsYRFGMOmG8UmOimEbVzlPBLan3GSA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=152089959549298664295090870608720504866, owner_members=[78530643501263149238250228232371774367], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f0437f4e598>
ctx = None

    def test_cant_react_twice(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
>       message_react(user_woody.token, a_msg.message_id, REACT, ctx)

http_tests/message_tests/test_message_react.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:69: in message_react
    token=token, message_id=message_id, react_id=react_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
----------------------------- Captured stdout call -----------------------------
react id is 1
_________________________ test_nonmember_cannot_react __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=253217501...ODQ3NjQ3NDM3MzAxNDg0ODksInNlc3Npb25JRCI6MjQxfQ.8PbhkIOr3A-dkxVZ3mG7cBh2BkL17ACB9a20zU_jAms', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=280801784...AzODMzODExNTE4Njk5MTQ2NTcxMywic2Vzc2lvbklEIjoyNDJ9.uTmlR6opb_TrJbZ-7PjktzyPVqGM2j75dndSWvQY69c', handle_str='lordzerg')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=152130766014401636142168425420341061666, owner_members=[253217501776183999484384764743730148489], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f0438002f28>
ctx = None

    def test_nonmember_cannot_react(user_woody, user_zerg, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
        with pytest.raises(AccessError):
>           message_react(user_zerg.token, a_msg.message_id, REACT, ctx)

http_tests/message_tests/test_message_react.py:68: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:69: in message_react
    token=token, message_id=message_id, react_id=react_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
----------------------------- Captured stdout call -----------------------------
react id is 1
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=856926272...Y5NDY0MzIwMTAyOTI3OTY2Niwic2Vzc2lvbklEIjoyNDN9.Fyw7OyG0xXbsQKLByMh0PFlX_ORGpcbfHmZRxb_Zpj0', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=152177557374900935517307796541969999906, owner_members=[85692627241970354422694643201029279666], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f0438002158>
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           message_react(user_woody.token, a_msg.message_id, REACT, ctx)

http_tests/message_tests/test_message_react.py:75: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:69: in message_react
    token=token, message_id=message_id, react_id=react_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
----------------------------- Captured stdout call -----------------------------
react id is 1
__________________________ test_valid_future_message ___________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=296879788...NTM1NTk2ODIzNjgzMjM5OTQsInNlc3Npb25JRCI6MjY3fQ.iLpIKBmp7ncax4JIp2fd1JhurGdvbBNqTmNMsFo7dJE', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=152632981452355180638523261489928415266, owner_members=[296879788337953111446953559682368323994], all_members=[])
ctx = None

    def test_valid_future_message(user_woody, woodys_public_toybox, ctx):
        msg_text = 'hello, world'
        tts = utc_now() + 2
>       msg = message_sendlater(user_woody.token, woodys_public_toybox.channel_id, msg_text, tts, ctx)

http_tests/message_tests/test_message_sendlater.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:113: in message_sendlater
    token=token, channel_id=channel_id, message=msg, time_sent=time_to_send
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________________________ test_nonmeber_cannot_sendlater ________________________

user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=69375...1NDI0OTEyNzc3MTQzODU2Mywic2Vzc2lvbklEIjoyNjh9.L_Jjhj4j8Z8nWJ1Z4u9iFZwZMYYx2GZX_lixr18TMCU', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=152667505124170771323629648266287327266, owner_members=[277269036349418002728334627882017374585], all_members=[])
ctx = None

    def test_nonmeber_cannot_sendlater(user_buzz, woodys_public_toybox, ctx):
        with pytest.raises(AccessError):
>           message_sendlater(user_buzz.token, woodys_public_toybox.channel_id, 'hi', utc_now(), ctx)

http_tests/message_tests/test_message_sendlater.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:113: in message_sendlater
    token=token, channel_id=channel_id, message=msg, time_sent=time_to_send
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=501886208...QxODU5NzA0OTExODc5MTQ5OCwic2Vzc2lvbklEIjoyNzR9.RhXN8YTETgRVStkL663Rr2hIRByVAk6Tb4m0YOrk0aA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=152776769475375818414248280663635208226, owner_members=[50188620896641131754418597049118791498], all_members=[])
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, ctx):
        auth_logout(user_woody.token, ctx)
    
        with pytest.raises(AccessError):
>           message_sendlater(user_woody.token, woodys_public_toybox.channel_id, 'hi', utc_now(), ctx)

http_tests/message_tests/test_message_sendlater.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:113: in message_sendlater
    token=token, channel_id=channel_id, message=msg, time_sent=time_to_send
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________________ test_valid_future_message ___________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=312425392...NzU1NTg1NzgzMTc5ODU5OTcsInNlc3Npb25JRCI6Mjc1fQ.RdqnE3lD4V601aWzOyt9tDLqkBfECKjEjm6R0HV-xQE', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=312425392249007913072675558578317985997, members=[103017718700871386488031489220624314538], name='sheriffwoody, buzzlightyear', dm_id=152840895957833238826453119201597663266)
ctx = None

    def test_valid_future_message(user_woody, woody_and_buzz_dm, ctx):
        msg_text = 'hello, world'
        tts = utc_now() + 2
>       msg = message_sendlaterdm(user_woody.token, woody_and_buzz_dm.dm_id, msg_text, tts, ctx)

http_tests/message_tests/test_message_sendlaterdm.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:124: in message_sendlaterdm
    token=token, dm_id=dm_id, message=msg, time_sent=time_to_send
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________________________ test_nonmeber_cannot_sendlater ________________________

user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=187808036...MDY2MjI1MDQ1NTc0ODgxMTQzMjEsInNlc3Npb25JRCI6Mjc3fQ.gg3KQlEkkZlXxd7_1HGvmQvHcSQmE5x9Ph1p5izhVa8', handle_str='lordzerg')
woody_and_buzz_dm = DM(owner=321001868843895667296338985713397012081, members=[182449752292670391248577764609657744349], name='sheriffwoody, buzzlightyear', dm_id=152891107598108278993046403615562606626)
ctx = None

    def test_nonmeber_cannot_sendlater(user_zerg, woody_and_buzz_dm, ctx):
        with pytest.raises(AccessError):
>           message_sendlaterdm(user_zerg.token, woody_and_buzz_dm.dm_id, 'hi', utc_now(), ctx)

http_tests/message_tests/test_message_sendlaterdm.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:124: in message_sendlaterdm
    token=token, dm_id=dm_id, message=msg, time_sent=time_to_send
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=284833750...ODEzMzY3NjI1MzM5NzQzNjEsInNlc3Npb25JRCI6Mjg1fQ.-NzZSTupZPvi1AgUBLi-ApoeVnBGe2F0SXVQfGbGKkg', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=284833750455057034795681336762533974361, members=[338732873200223963664273598183024651536], name='sheriffwoody, buzzlightyear', dm_id=152996786082677930479745552213718280226)
ctx = None

    def test_invalid_token(user_woody, woody_and_buzz_dm, ctx):
        auth_logout(user_woody.token, ctx)
    
        with pytest.raises(AccessError):
>           message_sendlaterdm(user_woody.token, woody_and_buzz_dm.dm_id, 'hi', utc_now(), ctx)

http_tests/message_tests/test_message_sendlaterdm.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:124: in message_sendlaterdm
    token=token, dm_id=dm_id, message=msg, time_sent=time_to_send
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_______________________ test_successful_unpin_in_channel _______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=333518173...NzkxOTQwMTExMTI0NjgwNDMsInNlc3Npb25JRCI6MzAwfQ.tRNnC1AWp_g2VxMZggY5y6q1ybzo4_mDqprER1bX7BE', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=153345440703764702694333205463324895266, owner_members=[333518173938754618491679194011112468043], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f0438002840>
ctx = None

    def test_successful_unpin_in_channel(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
    
>       msg_pin(user_woody.token, a_msg.message_id, ctx)

http_tests/message_tests/test_message_unpin.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:46: in message_pin
    token=token, message_id=message_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_________________________ test_successful_unpin_in_dm __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=815041884...Q4MDk5NzM5MDc4NTkxMDEzMSwic2Vzc2lvbklEIjozMDF9.aSEwX6vHDefhLiTfjY8TbI-uhCvCDC9Hohuup4Mq4tY', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=81504188422471428955480997390785910131, members=[212455201177531526431070994120897037875], name='sheriffwoody, buzzlightyear', dm_id=153392260586402507204634110260775954466)
message_factory = <function message_factory.<locals>.make_message at 0x7f0437f48510>
ctx = None

    def test_successful_unpin_in_dm(user_woody, woody_and_buzz_dm, message_factory, ctx):
        a_msg = message_factory(user_woody, woody_and_buzz_dm)
    
>       msg_pin(user_woody.token, a_msg.message_id, ctx)

http_tests/message_tests/test_message_unpin.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:46: in message_pin
    token=token, message_id=message_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________________________ test_cannot_unpin_twice ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=192771146...Mjk5OTY5OTg3MzczOTgwMDAsInNlc3Npb25JRCI6MzA0fQ.G23SdxlwGn9LWK_tJo_CCNWxzEWBd5elKFYRcSUhnd4', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=153443606773964751636541734224109709346, owner_members=[192771146740006676616229996998737398000], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f0437f96b70>
ctx = None

    def test_cannot_unpin_twice(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
>       msg_pin(user_woody.token, a_msg.message_id, ctx)

http_tests/message_tests/test_message_unpin.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:46: in message_pin
    token=token, message_id=message_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________________________ test_channel_member_cant_unpin ________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=297419841...ODEzMjA3MDU0MTkyMTQ2MzksInNlc3Npb25JRCI6MzA1fQ.yOm6BFzDtL77nvPJg-scgxVa4gseOHZOqZoylrpH374', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=27058...TUyODMzNzM5MzQyNjM5NzEsInNlc3Npb25JRCI6MzA2fQ.n09rBCC997fskCk3-HvmKhBae7TXp3n31KcWSl5QI7s', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=153484307865611579512050289622276319266, owner_members=[297419841325973784035481320705419214639], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f0437f9e7b8>
ctx = None

    def test_channel_member_cant_unpin(user_woody, user_buzz, woodys_public_toybox, message_factory, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
        a_msg = message_factory(user_buzz, woodys_public_toybox)
>       msg_pin(user_woody.token, a_msg.message_id, ctx)

http_tests/message_tests/test_message_unpin.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:46: in message_pin
    token=token, message_id=message_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________________ test_dm_member_cant_unpin ___________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=283882153...NjY0MzcxOTk1NDk5NTE0MTksInNlc3Npb25JRCI6MzA3fQ.G49LRhf4ZRyvXvbltC32xmsXdfDiMMeiDpgAa7AeQmk', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=19330...TM2ODE4MzE3NzI4NzMzODIsInNlc3Npb25JRCI6MzA4fQ.GbNNUBiOJako-t1pk5JYBcKH7Y7p6yUZKqSms7YmjR0', handle_str='buzzlightyear')
woody_and_buzz_dm = DM(owner=283882153773028185079666437199549951419, members=[193301683843826733455893681831772873382], name='sheriffwoody, buzzlightyear', dm_id=153529835536918776371005043717897398306)
message_factory = <function message_factory.<locals>.make_message at 0x7f0437feeae8>
ctx = None

    def test_dm_member_cant_unpin(user_woody, user_buzz, woody_and_buzz_dm, message_factory, ctx):
        a_msg = message_factory(user_buzz, woody_and_buzz_dm)
>       msg_pin(user_woody.token, a_msg.message_id, ctx)

http_tests/message_tests/test_message_unpin.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:46: in message_pin
    token=token, message_id=message_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________________ test_nonmember_cant_unpin ___________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=297393716...ODc4NTIxNjkxMzE4Nzg1MTIsInNlc3Npb25JRCI6MzA5fQ.TBRsn2987ktPCbtYaxTDyExdWcAXryTXd1jk7NV_DtI', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=154589834...MjM1MjkyMjEyOTg2MjM1NDI3ODUsInNlc3Npb25JRCI6MzEwfQ.KAy9xfSZku04bJjbfQlDZM-OsSu21GecaT0VCi-CPu0', handle_str='lordzerg')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=153570806796599777887904793100934653986, owner_members=[297393716703864579240987852169131878512], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f0437f9e158>
ctx = None

    def test_nonmember_cant_unpin(user_woody, user_zerg, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
>       msg_pin(user_woody.token, a_msg.message_id, ctx)

http_tests/message_tests/test_message_unpin.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:46: in message_pin
    token=token, message_id=message_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=114406904...NTI5NTQxODYyOTk4MzUxOTAsInNlc3Npb25JRCI6MzExfQ.UujkQMRGhOl3-t4Usp-POezvULxABxNggXjh93TdoAY', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=153602720692742148705730848539569498146, owner_members=[114406904326340902352152954186299835190], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f0437f67730>
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
>       msg_pin(user_woody.token, a_msg.message_id, ctx)

http_tests/message_tests/test_message_unpin.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:46: in message_pin
    token=token, message_id=message_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________ test_successful_unreact_in_channel ______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=311868267...NTg2ODM4MDU3NDQ0Mjk1MDYsInNlc3Npb25JRCI6MzEyfQ.CwhR928oUKRaLxVaqMJVLnsHTT8RXcvj-W9gtq_HV6Y', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=17410...QxMTUyMzA3NzIwNjUxMzAxLCJzZXNzaW9uSUQiOjMxM30.a2hKOlFlrSjUBTETdS1NqH4TYks8oemPCqoywh0xtW0', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=153644465219289289442565510911562033186, owner_members=[311868267079761420048558683805744429506], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f0437f7a400>
ctx = None

    def test_successful_unreact_in_channel(user_woody, user_buzz, woodys_public_toybox, message_factory, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
    
        a_msg = message_factory(user_woody, woodys_public_toybox)
    
>       msg_react(user_woody.token, a_msg.message_id, REACT, ctx)

http_tests/message_tests/test_message_unreact.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:69: in message_react
    token=token, message_id=message_id, react_id=react_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
----------------------------- Captured stdout call -----------------------------
react id is 1
____________________ test_successful_unreact_to_dm_message _____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=252042562...NjQzMTc0ODEwMDgwMDQzOTgsInNlc3Npb25JRCI6MzE0fQ.TeB2-oUWLVgaVynWU2nT3agvXqCDUKwAR2ogTKrMx8c', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=20435...zQ4ODI1MDMxNzEyNTE5MDUsInNlc3Npb25JRCI6MzE1fQ.tir3Brwvd3exzOYed1EhYOVkfEtwKU8MuW0P-qGLhow', handle_str='buzzlightyear')
woody_and_buzz_dm = DM(owner=252042562551974738760864317481008004398, members=[204359170201658453705074882503171251905], name='sheriffwoody, buzzlightyear', dm_id=153694694289760082747313065905196050466)
message_factory = <function message_factory.<locals>.make_message at 0x7f0437f96598>
ctx = None

    def test_successful_unreact_to_dm_message(user_woody, user_buzz, woody_and_buzz_dm, message_factory, ctx):
        a_msg = message_factory(user_woody, woody_and_buzz_dm)
    
>       msg_react(user_woody.token, a_msg.message_id, REACT, ctx)

http_tests/message_tests/test_message_unreact.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:69: in message_react
    token=token, message_id=message_id, react_id=react_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
----------------------------- Captured stdout call -----------------------------
react id is 1
____________________________ test_invalid_react_id _____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=127907728...NjgyMTM3MzQ5NjkzNDU2MTIsInNlc3Npb25JRCI6MzE3fQ.k5yWW2Xe_sno1aw8vq8JCtq1qi2M7AAcejzYj_aT67Q', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=153743820504208677492481318767041390626, owner_members=[127907728379856834082968213734969345612], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f0437efce18>
ctx = None

    def test_invalid_react_id(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
>       msg_react(user_woody.token, a_msg.message_id, REACT, ctx)

http_tests/message_tests/test_message_unreact.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:69: in message_react
    token=token, message_id=message_id, react_id=react_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
----------------------------- Captured stdout call -----------------------------
react id is 1
___________________________ test_cant_unreact_twice ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=236234622...NjE5Njg2MzA1NTI1MjY4OTcsInNlc3Npb25JRCI6MzE4fQ.k-ILPBXsOV219lrizabBgZ_ip2x5brk_33FV6A6uCZ0', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=153779121404298533110739498209553098786, owner_members=[236234622634725113221061968630552526897], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f0437f966a8>
ctx = None

    def test_cant_unreact_twice(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
>       msg_react(user_woody.token, a_msg.message_id, REACT, ctx)

http_tests/message_tests/test_message_unreact.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:69: in message_react
    token=token, message_id=message_id, react_id=react_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
----------------------------- Captured stdout call -----------------------------
react id is 1
________________________ test_nonmember_cannot_unreact _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=210790912...MDI1NjY3OTQ5ODk2OTQxMzAsInNlc3Npb25JRCI6MzE5fQ.1jnHP-45XlCkgPpzCX67iPWgIbF9wnDwoU9ps1-HF98', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=185785510...MzM2Mjg1ODMzMDgzMTI3MzEzMDQsInNlc3Npb25JRCI6MzIwfQ.fp5zmjp1kWs4eqQgWXP2ee6982-vdHtuaVdSlc3sjug', handle_str='lordzerg')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=153819506375576929071541055367357868066, owner_members=[210790912364840436282102566794989694130], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f0437f4e620>
ctx = None

    def test_nonmember_cannot_unreact(user_woody, user_zerg, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
>       msg_react(user_woody.token, a_msg.message_id, REACT, ctx)

http_tests/message_tests/test_message_unreact.py:78: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:69: in message_react
    token=token, message_id=message_id, react_id=react_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
----------------------------- Captured stdout call -----------------------------
react id is 1
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=148027189...MTc5NTEzNTcwNDEyNzY4MTQsInNlc3Npb25JRCI6MzIxfQ.0wQ2gnxrL4pga_-VPe1EGw-RwqxoasCL3qMNzP4x5X4', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=153853498426422049042942189463810025506, owner_members=[148027189333896195791317951357041276814], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f0437ef7d08>
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
>       msg_react(user_woody.token, a_msg.message_id, REACT, ctx)

http_tests/message_tests/test_message_unreact.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:69: in message_react
    token=token, message_id=message_id, react_id=react_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
----------------------------- Captured stdout call -----------------------------
react id is 1
_______________________________ test_clear_works _______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=295111764...MTU2MjExMzI3Nzg3NTc4NTksInNlc3Npb25JRCI6MzIyfQ.fOOhiYv1HYkBJE0rOdixX7Yf10NQ32ZD58LbCt44e_M', handle_str='sheriffwoody')
user_factory = <function user_factory.<locals>.make_user at 0x7f04380ea598>
ctx = None

    def test_clear_works(user_woody, user_factory, ctx):
        # an existing user can do something
        assert users_all(user_woody.token, ctx) is not None
    
        clear(ctx)
    
        with pytest.raises(AccessError):
            #  ex-existing user now can't do the original action because they don't exist
>           users_all(user_woody.token, ctx)

http_tests/other_tests/test_clear.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/other.py:13: in users_all
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____________ test_tag_thru_message_sendlater_triggers_notification _____________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=127103133...NjQwMjM1ODQ1MTMxNDc1NDAsInNlc3Npb25JRCI6MzI2fQ.XSs6ZBCERrEujIf-uCCvto2LrV3DFEE7h2ej5nCVDms', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=154025773727556315703892343300299630626, owner_members=[127103133540576426294164023584513147540], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f0437ef3e18>
ctx = None

    def test_tag_thru_message_sendlater_triggers_notification(user_woody, woodys_public_toybox, message_factory, ctx):
        content = f'@{user_woody.handle_str} hi'
>       message_factory(user_woody, woodys_public_toybox, content, delay=1)

http_tests/other_tests/test_notifications_get.py:102: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:94: in make_message
    msg_id = message.message_sendlater(poster.token, location.channel_id, content, tts, ctx).popitem()[-1]
http_tests/fakepi/message.py:113: in message_sendlater
    token=token, channel_id=channel_id, message=msg, time_sent=time_to_send
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________ test_tag_thru_message_sendlaterdm_triggers_notification ____________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=217796853...MzUwODA3Mzk3NDgyNzgwMTMsInNlc3Npb25JRCI6MzI3fQ.nVmp751Pv-9ditQcVG5Qi_tBsF7Et_ius3uuAL7ckiA', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=217796853251888847944135080739748278013, members=[30738837206748847698555154373829926316], name='sheriffwoody, buzzlightyear', dm_id=154069544118218946179839272591102257186)
message_factory = <function message_factory.<locals>.make_message at 0x7f0437feec80>
ctx = None

    def test_tag_thru_message_sendlaterdm_triggers_notification(user_woody, woody_and_buzz_dm, message_factory, ctx):
        content = f'@{user_woody.handle_str} hi'
>       message_factory(user_woody, woody_and_buzz_dm, content, delay=1)

http_tests/other_tests/test_notifications_get.py:117: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:92: in make_message
    msg_id = message.message_sendlaterdm(poster.token, location.dm_id, content, tts, ctx).popitem()[-1]
http_tests/fakepi/message.py:124: in message_sendlaterdm
    token=token, dm_id=dm_id, message=msg, time_sent=time_to_send
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ test_react_triggers_notification[ch] _____________________

dest = Channel(name='woodys toybox', is_public=True, channel_id=154156415421570961598080465726327171106, owner_members=[179395156069164215677084706336335775967], all_members=[])
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=179395156...ODQ3MDYzMzYzMzU3NzU5NjcsInNlc3Npb25JRCI6MzMxfQ.xA_PTIBK4vwW4UKjamSUsgvk_lJEmApDSewsPkDZHkM', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=154156415421570961598080465726327171106, owner_members=[179395156069164215677084706336335775967], all_members=[])
woody_and_buzz_dm = DM(owner=179395156069164215677084706336335775967, members=[337010401426156950159362589187314946179], name='sheriffwoody, buzzlightyear', dm_id=154168581698206652029761330335340767266)
message_factory = <function message_factory.<locals>.make_message at 0x7f0437f2cd08>
ctx = None

    @pytest.mark.parametrize('dest', ['ch', 'dm'])
    def test_react_triggers_notification(dest, user_woody, woodys_public_toybox, woody_and_buzz_dm, message_factory, ctx):
        dest = woodys_public_toybox if dest == 'ch' else woody_and_buzz_dm
        a_msg = message_factory(user_woody, dest)
    
>       message_react(user_woody.token, a_msg.message_id, 1, ctx)

http_tests/other_tests/test_notifications_get.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:69: in message_react
    token=token, message_id=message_id, react_id=react_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
----------------------------- Captured stdout call -----------------------------
react id is 1
_____________________ test_react_triggers_notification[dm] _____________________

dest = DM(owner=248904891536154623850372536285696265740, members=[180493607239724939940179401625653028795], name='sheriffwoody, buzzlightyear', dm_id=154218211011487212353473302201270741026)
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=248904891...NzI1MzYyODU2OTYyNjU3NDAsInNlc3Npb25JRCI6MzMzfQ.6nImkfPDqk_dO0EplLPVDecDp7aiGay0NzY4y-cMV_s', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=154206449590761969812557540601843361826, owner_members=[248904891536154623850372536285696265740], all_members=[])
woody_and_buzz_dm = DM(owner=248904891536154623850372536285696265740, members=[180493607239724939940179401625653028795], name='sheriffwoody, buzzlightyear', dm_id=154218211011487212353473302201270741026)
message_factory = <function message_factory.<locals>.make_message at 0x7f0437f2c488>
ctx = None

    @pytest.mark.parametrize('dest', ['ch', 'dm'])
    def test_react_triggers_notification(dest, user_woody, woodys_public_toybox, woody_and_buzz_dm, message_factory, ctx):
        dest = woodys_public_toybox if dest == 'ch' else woody_and_buzz_dm
        a_msg = message_factory(user_woody, dest)
    
>       message_react(user_woody.token, a_msg.message_id, 1, ctx)

http_tests/other_tests/test_notifications_get.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:69: in message_react
    token=token, message_id=message_id, react_id=react_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
----------------------------- Captured stdout call -----------------------------
react id is 1
__________________ test_most_recent_20_notifications_fetched ___________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=739708180...g3NTcxNTc4NTEyNjM2NzExNywic2Vzc2lvbklEIjozNDJ9.8-xp-17iBKfvTJG9ovLg9NKfzDUjKbRgz_btmQkX95U', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=154358884575439414398087519162289825826, owner_members=[73970818093869148583875715785126367117], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f0437ef3950>
ctx = None

    def test_most_recent_20_notifications_fetched(user_woody, woodys_public_toybox, message_factory, ctx):
        expected = {'notifications': []}
        for ix in range(30):
            content = f'@{user_woody.handle_str} {ix}'
            message_factory(user_woody, woodys_public_toybox, content)
    
            if ix >= 10:
                expected['notifications'].insert(0, {
                    'channel_id': woodys_public_toybox.channel_id,
                    'dm_id': -1,
                    'notification_message': f'{user_woody.handle_str} tagged you in {woodys_public_toybox.name}: {content[:20]}'
                })
    
        notifs = notifications_get(user_woody.token, ctx)
    
>       assert notifs == expected
E       AssertionError: assert {'notificatio...dy 15'}, ...]} == {'notificatio...dy 24'}, ...]}
E         Differing items:
E         {'notifications': [{'channel_id': 154358884575439414398087519162289825826, 'dm_id': -1, 'notification_message': 'sheri...162289825826, 'dm_id': -1, 'notification_message': 'sheriffwoody tagged you in woodys toybox: @sheriffwoody 15'}, ...]} != {'notifications': [{'channel_id': 154358884575439414398087519162289825826, 'dm_id': -1, 'notification_message': 'sheri...162289825826, 'dm_id': -1, 'notification_message': 'sheriffwoody tagged you in woodys toybox: @sheriffwoody 24'}, ...]}
E         Use -v to get the full diff

http_tests/other_tests/test_notifications_get.py:224: AssertionError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=295108395...ODg1Mjc3NjgwNjc1MzE4ODksInNlc3Npb25JRCI6MzQzfQ.caJ0DhaFu4x0s8vPQJX-F3LOwRuBF4as0_wpzehr0kU', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           notifications_get(user_woody.token, ctx)

http_tests/other_tests/test_notifications_get.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/other.py:55: in notifications_get
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_______________________________ test_no_matches ________________________________

user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=49024...1MDQyODU2NDQ2MDgyMTI5OCwic2Vzc2lvbklEIjozNDR9.vKfBrrNLG0invqySNVtcdKELbjxTPVORVe6iBTWfMwQ', handle_str='buzzlightyear')
ctx = None

    def test_no_matches(user_buzz, ctx):
        msgs = search(user_buzz.token, 'No matches', ctx)
    
>       assert msgs['messages'] == []
E       TypeError: list indices must be integers or slices, not str

http_tests/other_tests/test_search.py:15: TypeError
______________________________ test_single_match _______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=277166374...MDIwOTUyMTkzMjU0NjI2MDQsInNlc3Npb25JRCI6MzQ1fQ.5FlDQvNkwmX5qAbGZv1fyyLqmIw47cthNGyYkbK16RM', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=154642964282668935464319554415175084066, owner_members=[277166374541110040384902095219325462604], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f043800df28>
ctx = None

    def test_single_match(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox, 'anything')
    
        msgs = search(user_woody.token, 'any', ctx)
    
        ch_msgs = channel_messages(user_woody.token, woodys_public_toybox.channel_id, 0, ctx)
>       assert msgs['messages'] == ch_msgs['messages']
E       TypeError: list indices must be integers or slices, not str

http_tests/other_tests/test_search.py:24: TypeError
____________________________ test_multiple_matches _____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=855728961...c4Mzg4MTMxMjI2NTQ2NTgxOSwic2Vzc2lvbklEIjozNDZ9.t9z9Aj5bOHDltSWFKTzXUpy9_MVV9rJyV6AfXedg6Ls', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=154681042922136541190253763508585572386, owner_members=[85572896163462208902783881312265465819], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f0437f04a60>
ctx = None

    def test_multiple_matches(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox, 'any 1')
        another_msg = message_factory(user_woody, woodys_public_toybox, 'any 2')
    
        msgs = search(user_woody.token, 'any', ctx)
>       msgs['messages'].sort(key=lambda m: m['message'])
E       TypeError: list indices must be integers or slices, not str

http_tests/other_tests/test_search.py:37: TypeError
________________________ test_multiple_channels_joined _________________________

user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=590348965...k2MzU4OTA0NDI3NzgxNzIzMzY1MCwic2Vzc2lvbklEIjozNDd9.mxXF8mRxVkmizwi8OGzJfgQ0ybjKCiTZ1WIHjk6qaPQ', handle_str='lordzerg')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=154724029746271905591901892649719375906, owner_members=[120909846011758045728998111578815499554], all_members=[])
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=154727817644721712569882239985984940066, owner_members=[59034896513147879963589044277817233650], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f0437ee4f28>
ctx = None

    def test_multiple_channels_joined(user_zerg, woodys_public_toybox, zergs_private_lair, message_factory, ctx):
        channel_join(user_zerg.token, woodys_public_toybox.channel_id, ctx)
    
        in_woody = message_factory(user_zerg, woodys_public_toybox, 'any 1')
        in_zerg = message_factory(user_zerg, zergs_private_lair, 'any 2')
    
        msgs = search(user_zerg.token, 'any', ctx)
>       msgs['messages'].sort(key=lambda m: m['message'])
E       TypeError: list indices must be integers or slices, not str

http_tests/other_tests/test_search.py:58: TypeError
__________________ test_search_includes_only_joined_channels ___________________

user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=24030...jg2NjEwNTYyNDk0MDU1MzMsInNlc3Npb25JRCI6MzQ5fQ.LI79Za3WDqKYMWh9eBG_spjpzL6S32051GclamaQa7o', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=154772982451044594098170815650313480226, owner_members=[260401970450425387208346596640313797614], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f0437e73620>
ctx = None

    def test_search_includes_only_joined_channels(user_buzz, woodys_public_toybox, message_factory, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
    
        message_factory(user_buzz, woodys_public_toybox, 'anything')
    
        channel_leave(user_buzz.token, woodys_public_toybox.channel_id, ctx)
    
        msgs = search(user_buzz.token, 'any', ctx)
    
>       assert msgs['messages'] == []
E       TypeError: list indices must be integers or slices, not str

http_tests/other_tests/test_search.py:79: TypeError
______________ test_search_matches_more_than_just_authorised_user ______________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=137897676...M5Mjk4MTY3Mzc3MDE1ODk1NCwic2Vzc2lvbklEIjozNTF9.67W87OSrSBcwgFW4GCDIqYsTJoL_8_SW0FMue56zCQM', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=33641...DMwMTc2MDcyMTc1NjM1NzMsInNlc3Npb25JRCI6MzUyfQ.m1ri8YKs9T3q0wtPnV8Xto2kl4heWVWuPLbNi5h062I', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=154817251186849439296801208332563720226, owner_members=[13789767640753353627392981673770158954], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f0437f04c80>
ctx = None

    def test_search_matches_more_than_just_authorised_user(user_woody, user_buzz, woodys_public_toybox, message_factory, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
    
        message_factory(user_buzz, woodys_public_toybox, 'hi')
        message_factory(user_woody, woodys_public_toybox, 'hi')
    
>       msgs = search(user_woody.token, 'hi', ctx)['messages']
E       TypeError: list indices must be integers or slices, not str

http_tests/other_tests/test_search.py:88: TypeError
__________________________ test_successful_users_all ___________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=712747482...jg1NzQyNjg5OTMwODA2OTAzLCJzZXNzaW9uSUQiOjM1NX0.Sw386oIJcW4J1w9rfBqZ2yyBJtw9P287LLa2NP2nasw', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=13464...TM3MzExNDgwMzUwODY4NTgsInNlc3Npb25JRCI6MzU2fQ.PcqZURq7Hi7EGflg1zWlV4iOozvE19N2D5n3kDHtDvo', handle_str='buzzlightyear')
ctx = None

    def test_successful_users_all(user_woody, user_buzz, ctx):
>       users = users_all(user_woody.token, ctx)['users']
E       KeyError: 'users'

http_tests/other_tests/test_users_all.py:12: KeyError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=194283919...MTgxNTM2MzA4NTg0NTgyNDMsInNlc3Npb25JRCI6MzU3fQ.kYUTJNYxZoTEGeEQRhJdpVUm13hljcU5H9PcrQS33Ks', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           users_all(user_woody.token, ctx)

http_tests/other_tests/test_users_all.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/other.py:13: in users_all
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:69: InputError
_______________________ test_correct_return_format[True] _______________________

do_standup = True
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=295821387...OTE4MzE5MzkyODU2NDU5NDYsInNlc3Npb25JRCI6MzU4fQ.dPXOGERMLGZRG_NiB4Yb3uD7Sq8UOzv0h2a5kwr28Lk', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=154964981603236786865964882253239232546, owner_members=[295821387653331325214591831939285645946], all_members=[])
standup_factory = <function standup_factory.<locals>.make_standup at 0x7f0437f04048>
ctx = None

    @pytest.mark.parametrize('do_standup', [True, False])
    def test_correct_return_format(do_standup, user_woody, woodys_public_toybox, standup_factory, ctx):
        if do_standup:
>           standup_factory(user_woody, woodys_public_toybox)

http_tests/standup_tests/test_standup_active.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:128: in make_standup
    fin = standup.standup_start(creator.token, ch.channel_id, length, ctx)['time_finish']
http_tests/fakepi/standup.py:13: in standup_start
    token=token, channel_id=channel_id, length=length
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________ test_correct_return_format[False] _______________________

do_standup = False
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=292633376...OTgwMjQwNTI0OTU2OTc4NjgsInNlc3Npb25JRCI6MzU5fQ.e5eDH1_a0RSh6qHvrrjgqfdVSCcvuPPOkQmnZI8dJPA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=154995278452582241548660653459847718946, owner_members=[292633376163485232446498024052495697868], all_members=[])
standup_factory = <function standup_factory.<locals>.make_standup at 0x7f0437fff840>
ctx = None

    @pytest.mark.parametrize('do_standup', [True, False])
    def test_correct_return_format(do_standup, user_woody, woodys_public_toybox, standup_factory, ctx):
        if do_standup:
            standup_factory(user_woody, woodys_public_toybox)
    
>       r = standup_active(user_woody.token, woodys_public_toybox.channel_id, ctx)

http_tests/standup_tests/test_standup_active.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/standup.py:24: in standup_active
    token=token, channel_id=channel_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________________ test_active_standup ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=256990065...ODk5OTY5MTk3NTM4NDEyNTIsInNlc3Npb25JRCI6MzYwfQ.B6c3RhtWUNElNR9zA48A3rDAbWH5HnypqKAKLbZc7cQ', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=155021987058447425199506813060945487906, owner_members=[256990065624402773633189996919753841252], all_members=[])
standup_factory = <function standup_factory.<locals>.make_standup at 0x7f0437f4e488>
ctx = None

    def test_active_standup(user_woody, woodys_public_toybox, standup_factory, ctx):
>       std = standup_factory(user_woody, woodys_public_toybox)

http_tests/standup_tests/test_standup_active.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:128: in make_standup
    fin = standup.standup_start(creator.token, ch.channel_id, length, ctx)['time_finish']
http_tests/fakepi/standup.py:13: in standup_start
    token=token, channel_id=channel_id, length=length
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________________________ test_inactive_standup _____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=164448903...OTkyOTkxMTAyODcyMjA3NTAsInNlc3Npb25JRCI6MzYxfQ.ZbV0FFQ6cJDU74C4FWf3WWlp8HLzcOF6kjBkY5zZR9c', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=155050999619278523657290192920119027746, owner_members=[164448903943707876873799299110287220750], all_members=[])
ctx = None

    def test_inactive_standup(user_woody, woodys_public_toybox, ctx):
>       act = standup_active(user_woody.token, woodys_public_toybox.channel_id, ctx)

http_tests/standup_tests/test_standup_active.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/standup.py:24: in standup_active
    token=token, channel_id=channel_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=326833711...MzQ0MTg5NTA5MjU1MTI3NTEsInNlc3Npb25JRCI6MzYzfQ.2kSNQM6GMSMuMfuB5bay8AjcsDWg4ISuM__juqGKBxg', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=155094169460469296009558163147778107426, owner_members=[326833711844015296152734418950925512751], all_members=[])
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           standup_active(user_woody.token, woodys_public_toybox.channel_id, ctx)

http_tests/standup_tests/test_standup_active.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/standup.py:24: in standup_active
    token=token, channel_id=channel_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________________ test_messages_buffered_and_displayed_correctly ________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=328210573...MTk4MTgyNTczMjQwOTg3MjAsInNlc3Npb25JRCI6MzY0fQ.q_ZXyZF-pOSV-4dkonDFCPXqbafJH5pdGGqo-PyjvBs', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=26233...jAwNTU1MDQ5NTQ3MDM2ODAsInNlc3Npb25JRCI6MzY1fQ.E8JhxJZuQ0TmtxLsAlZqq5uigje7zPYq73wTli4y6hE', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=155133828701779061309027363442997798946, owner_members=[328210573801085097846319818257324098720], all_members=[])
standup_factory = <function standup_factory.<locals>.make_standup at 0x7f0437f4e9d8>
ctx = None

    def test_messages_buffered_and_displayed_correctly(user_woody, user_buzz, woodys_public_toybox, standup_factory, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
    
>       std = standup_factory(user_woody, woodys_public_toybox, 1)

http_tests/standup_tests/test_standup_send.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:128: in make_standup
    fin = standup.standup_start(creator.token, ch.channel_id, length, ctx)['time_finish']
http_tests/fakepi/standup.py:13: in standup_start
    token=token, channel_id=channel_id, length=length
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_return_format ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=328448704...MTczNzMyMDAzODM3NTgzODgsInNlc3Npb25JRCI6MzY2fQ.OceDDzbU9RHO97sETIlLv_gzO5nlz5CgFdlpkZxMJts', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=155166763848936240994164999663152474146, owner_members=[328448704586211988745017373200383758388], all_members=[])
standup_factory = <function standup_factory.<locals>.make_standup at 0x7f0438057048>
ctx = None

    def test_return_format(user_woody, woodys_public_toybox, standup_factory, ctx):
>       standup_factory(user_woody, woodys_public_toybox)

http_tests/standup_tests/test_standup_send.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:128: in make_standup
    fin = standup.standup_start(creator.token, ch.channel_id, length, ctx)['time_finish']
http_tests/fakepi/standup.py:13: in standup_start
    token=token, channel_id=channel_id, length=length
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ test_non_member_cannot_standup_send ______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=239144972...NzYxNzE5OTY2NTczMzYwNzEsInNlc3Npb25JRCI6MzY3fQ.Bm1kXxwWpwyeq2YDZwkF9DZU-T5mJhBPToNXqddRqzI', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=11714...DU5NTM1MTQzMDc3NjQ5NDksInNlc3Npb25JRCI6MzY4fQ.hFKo4kKDTPnJxzpoIK5nMKvdJFGjPjDyeTQSt2epwcM', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=155203484517698352229352855413254203426, owner_members=[239144972482755040638276171996657336071], all_members=[])
standup_factory = <function standup_factory.<locals>.make_standup at 0x7f0437f96598>
ctx = None

    def test_non_member_cannot_standup_send(user_woody, user_buzz, woodys_public_toybox, standup_factory, ctx):
>       standup_factory(user_woody, woodys_public_toybox)

http_tests/standup_tests/test_standup_send.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:128: in make_standup
    fin = standup.standup_start(creator.token, ch.channel_id, length, ctx)['time_finish']
http_tests/fakepi/standup.py:13: in standup_start
    token=token, channel_id=channel_id, length=length
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_________________________ test_invalid_message_length __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=259363110...NDgwMjA1NDY0NTgwNTQ3NjMsInNlc3Npb25JRCI6MzcwfQ.soD_daohaWsA-Ckf-q7QmfFT5PNXXkS9oCwhDShmO04', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=155251301882902211327664062929039992866, owner_members=[259363110472108511805048020546458054763], all_members=[])
standup_factory = <function standup_factory.<locals>.make_standup at 0x7f0437fff598>
ctx = None

    def test_invalid_message_length(user_woody, woodys_public_toybox, standup_factory, ctx):
>       standup_factory(user_woody, woodys_public_toybox)

http_tests/standup_tests/test_standup_send.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:128: in make_standup
    fin = standup.standup_start(creator.token, ch.channel_id, length, ctx)['time_finish']
http_tests/fakepi/standup.py:13: in standup_start
    token=token, channel_id=channel_id, length=length
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=325677047...MDA5Mzg2ODI2MDYzMDg2ODEsInNlc3Npb25JRCI6MzcyfQ.J1lZwnnOAt4nxKL-x1XkX1gjrp3GNAVE2gsMB5trWg4', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=155294326736555582576194236971269957666, owner_members=[325677047914727820131200938682606308681], all_members=[])
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           standup_send(user_woody.token, woodys_public_toybox.channel_id, '1', ctx)

http_tests/standup_tests/test_standup_send.py:68: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/standup.py:35: in standup_send
    token=token, channel_id=channel_id, message=message
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_______________________ test_standup_start_return_format _______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=321574601...MjU1NzM4ODkzNDY0OTk1NDcsInNlc3Npb25JRCI6MzczfQ.Zc738nDebwvVN--WScF-Rir2XCdF3mfKfG3xvBATJDQ', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=155327917892898380370047147735333414946, owner_members=[321574601147309784830225573889346499547], all_members=[])
ctx = None

    def test_standup_start_return_format(user_woody, woodys_public_toybox, ctx):
>       ret = standup_start(user_woody.token, woodys_public_toybox.channel_id, 1, ctx)

http_tests/standup_tests/test_standup_start.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/standup.py:13: in standup_start
    token=token, channel_id=channel_id, length=length
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ test_standup_restartable_after_lapse _____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=848321036...E5MzkyMjI3NDE0OTg5MjAxOSwic2Vzc2lvbklEIjozNzR9.8BV42axhJ_xK0gBsc5GjikXu2jd-fdYovnsNVpQtxPw', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=155355190603280665582976973369357576226, owner_members=[84832103605434574858193922274149892019], all_members=[])
ctx = None

    def test_standup_restartable_after_lapse(user_woody, woodys_public_toybox, ctx):
>       standup_start(user_woody.token, woodys_public_toybox.channel_id, 1, ctx)

http_tests/standup_tests/test_standup_start.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/standup.py:13: in standup_start
    token=token, channel_id=channel_id, length=length
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________________ test_standup_affects_only_one_channel _____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=311293855...Nzg1OTM2NzQ3NzQ2OTM4ODYsInNlc3Npb25JRCI6Mzc1fQ.p2is8Ce6aHAoIAC-Aa4dKctM7wQ2qVwkxdNTl8JCc7w', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=206803650...ODQxMzY5MzgxMjAxODM4NTA5NzMsInNlc3Npb25JRCI6Mzc2fQ.bqcp0IUfemGa17KkpAxqjjZa17UqiQ6JcRS6StXW2ac', handle_str='lordzerg')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=155389032912898633594780055667743598626, owner_members=[311293855821989656160778593674774693886], all_members=[])
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=155392798627462936578745876811703068706, owner_members=[206803650204687293884136938120183850973], all_members=[])
ctx = None

    def test_standup_affects_only_one_channel(user_woody, user_zerg, woodys_public_toybox, zergs_private_lair, ctx):
        channel_join(user_zerg.token, woodys_public_toybox.channel_id, ctx)
    
>       standup_start(user_zerg.token, woodys_public_toybox.channel_id, 1, ctx)

http_tests/standup_tests/test_standup_start.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/standup.py:13: in standup_start
    token=token, channel_id=channel_id, length=length
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ test_nonmember_cannot_start_standup ______________________

user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=19093...Dc5MzAyMzYxMzM3NTE1OTUsInNlc3Npb25JRCI6Mzc5fQ.eWpK-eVXbHcVZOrY1IuWvgUguLbDQCGZ_GXWnRtf49U', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=155462345900799582956928865626747512866, owner_members=[114566848988740161109739814077826641253], all_members=[])
ctx = None

    def test_nonmember_cannot_start_standup(user_buzz, woodys_public_toybox, ctx):
        with pytest.raises(AccessError):
>           standup_start(user_buzz.token, woodys_public_toybox.channel_id, 5, ctx)

http_tests/standup_tests/test_standup_start.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/standup.py:13: in standup_start
    token=token, channel_id=channel_id, length=length
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________________ test_cannot_start_standup_when_already_active _________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=336101023...MDExODI3MDQ0MjM3MjcxMjYsInNlc3Npb25JRCI6MzgxfQ.uX9MxBH4GSItCI3eN7JUU0ekBD4oHjOdRMEULJ1QYJQ', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=155490486951843024506998716502467356706, owner_members=[336101023866936440403301182704423727126], all_members=[])
ctx = None

    def test_cannot_start_standup_when_already_active(user_woody, woodys_public_toybox, ctx):
>       standup_start(user_woody.token, woodys_public_toybox.channel_id, 2, ctx)

http_tests/standup_tests/test_standup_start.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/standup.py:13: in standup_start
    token=token, channel_id=channel_id, length=length
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=250651348...ODMxNzM5MTE1NTU2MzQ3OTMsInNlc3Npb25JRCI6MzgzfQ.ZfRsHic8EY6iTaX0e66fkb8zCMQQyOjiy_ddgehn4xg', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=155534933158731901657745318723166349346, owner_members=[250651348603089772996883173911555634793], all_members=[])
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           standup_start(user_woody.token, woodys_public_toybox.channel_id, 15, ctx)

http_tests/standup_tests/test_standup_start.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/standup.py:13: in standup_start
    token=token, channel_id=channel_id, length=length
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________________________ test_return_type_correct ___________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=608288851...QzMDUyNDc0MTc1MjI1OTI0OCwic2Vzc2lvbklEIjozODR9.BtWZuMt8JRmcwoJB6c5UhVlVTmootkyDtBwv49LzbuE', handle_str='sheriffwoody')
ctx = None

    def test_return_type_correct(user_woody, ctx):
>       stats = user_stats(user_woody.token, ctx)

http_tests/stats_tests/test_user_stats.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/user.py:57: in user_stats
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________________ test_channels_tracked_channels_create _____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=121106614...Njk2ODUyNTQwNzA3OTU1OTksInNlc3Npb25JRCI6Mzg1fQ.IBfoetH3aeGQcP98edllC_JoSOsdqypvQWgIrPAAmwU', handle_str='sheriffwoody')
channel_factory = <function channel_factory.<locals>.make_channel at 0x7f0437efc268>
ctx = None

    def test_channels_tracked_channels_create(user_woody, channel_factory, ctx):
        channel_factory(user_woody, 'poop', True)
    
>       ch_stats = user_stats(user_woody.token, ctx)['user_stats']['channels_joined']

http_tests/stats_tests/test_user_stats.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/user.py:57: in user_stats
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________ test_channels_tracked_channel_join ______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=269378373...EyNDE5MTUyNjAxNjgxNDk4OCwic2Vzc2lvbklEIjozODZ9.VvAO1B-qwYRkMeLqsTyxs704x3ydw6qoEC1hHFKjz_c', handle_str='sheriffwoody')
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=155639594353694869990349766216999708706, owner_members=[14830442938552163598657319886267191186], all_members=[])
ctx = None

    def test_channels_tracked_channel_join(user_woody, zergs_private_lair, ctx):
        channel_join(user_woody.token, zergs_private_lair.channel_id, ctx)
    
>       ch_stats = user_stats(user_woody.token, ctx)['user_stats']['channels_joined']

http_tests/stats_tests/test_user_stats.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/user.py:57: in user_stats
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ test_channels_tracked_channel_invite _____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=171848566...NzUzODYyMTI2NTQ5MzM3NDksInNlc3Npb25JRCI6Mzg4fQ._A48Cl5ZILVRfwpGhfW6vBaFcfsT14ZVGyl9oF0Mb34', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=214624900...ODE5OTM5MzU3MDI3NTY2Mjc0MTMsInNlc3Npb25JRCI6Mzg5fQ.Jb_AhIKVTnspftThN3QxpRp2Tp29xqz9dnLlg1sybcE', handle_str='lordzerg')
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=155682576424140483536137639745496492066, owner_members=[214624900190049119381993935702756627413], all_members=[])
ctx = None

    def test_channels_tracked_channel_invite(user_woody, user_zerg, zergs_private_lair, ctx):
        channel_invite(user_zerg.token, zergs_private_lair.channel_id, user_woody.u_id, ctx)
    
>       ch_stats = user_stats(user_woody.token, ctx)['user_stats']['channels_joined']

http_tests/stats_tests/test_user_stats.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/user.py:57: in user_stats
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ test_channels_tracked_channel_leave ______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=115314361...YzMDI0OTA0NzQzOTU5ODQ2Mywic2Vzc2lvbklEIjozOTB9.byaa-ySs8inaFrkRgIVGibfwJb7qB7xXMjlcb9XKyxs', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=155717907430932094574844104734709327906, owner_members=[11531436118858245071630249047439598463], all_members=[])
ctx = None

    def test_channels_tracked_channel_leave(user_woody, woodys_public_toybox, ctx):
        channel_leave(user_woody.token, woodys_public_toybox.channel_id, ctx)
    
>       ch_stats = user_stats(user_woody.token, ctx)['user_stats']['channels_joined']

http_tests/stats_tests/test_user_stats.py:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/user.py:57: in user_stats
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________________ test_channels_tracked_channel_add_owner ____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=867414300...k5NDI5NzMxNzM4MzQ1MDk4NSwic2Vzc2lvbklEIjozOTF9.gVPNoXd4ga63CnuFIZOh1jFMEe1DL6WkCi6Kl47fAiA', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=242909073...MTM0MDY4Njc0MzUwOTY3MTQ4MTcsInNlc3Npb25JRCI6MzkyfQ.Xb6XntW675i2i1nfMt4iuBRRlJrFu3NJ-WieOnZN884', handle_str='lordzerg')
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=155761242066700896596934269533785106466, owner_members=[242909073940904750513406867435096714817], all_members=[])
ctx = None

    def test_channels_tracked_channel_add_owner(user_woody, user_zerg, zergs_private_lair, ctx):
        channel_addowner(user_zerg.token, zergs_private_lair.channel_id, user_woody.u_id, ctx)
    
>       ch_stats = user_stats(user_woody.token, ctx)['user_stats']['channels_joined']

http_tests/stats_tests/test_user_stats.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/user.py:57: in user_stats
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________________ test_dms_tracked_dm_create __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=338303384...NTUxMTAzMzg2Mzg5NDI4MjIsInNlc3Npb25JRCI6MzkzfQ.W_7WfdXYOKYqR-HQ4u5K_3AXi3WG45aSjD47-V7KPuE', handle_str='sheriffwoody')
dm_factory = <function dm_factory.<locals>.make_dm at 0x7f0437ef7ea0>
ctx = None

    def test_dms_tracked_dm_create(user_woody, dm_factory, ctx):
        dm_factory(user_woody, [])
    
>       dm_stats = user_stats(user_woody.token, ctx)['user_stats']['dms_joined']

http_tests/stats_tests/test_user_stats.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/user.py:57: in user_stats
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________________ test_dms_tracked_dm_invite __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=244013521...MTY3MjUwNjkxMjY2NDQxNDQsInNlc3Npb25JRCI6Mzk0fQ.lGh-QHjTS9KYqoxuxEeQ-LzGBJVH2exVCDiWmDpICBg', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=44247...1Nzk3MDYwOTQxODg5NzczMSwic2Vzc2lvbklEIjozOTV9.aomydMn7DwB8gDCDCWZotR6g3pn15GhaKbk5tQUbqGY', handle_str='buzzlightyear')
dm_factory = <function dm_factory.<locals>.make_dm at 0x7f0437f96f28>
ctx = None

    def test_dms_tracked_dm_invite(user_woody, user_buzz, dm_factory, ctx):
        the_dm = dm_factory(user_buzz, [])
        dm_invite(user_buzz.token, the_dm.dm_id, user_woody.u_id, ctx)
    
>       dm_stats = user_stats(user_woody.token, ctx)['user_stats']['dms_joined']

http_tests/stats_tests/test_user_stats.py:101: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/user.py:57: in user_stats
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________________ test_dms_tracked_dm_leave ___________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=708918366...YxMjg4NjUyMDMwODUwNDI4OCwic2Vzc2lvbklEIjozOTZ9.uXI-QEDHl1IZXSxJHQVo8jufdKOTzCHeHIRoQhJNtB0', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=70891836678160844628612886520308504288, members=[73850778994899524305998492123693100754], name='sheriffwoody, buzzlightyear', dm_id=155872731936990969372795904580697925666)
ctx = None

    def test_dms_tracked_dm_leave(user_woody, woody_and_buzz_dm, ctx):
        dm_leave(user_woody.token, woody_and_buzz_dm.dm_id, ctx)
    
>       dm_stats = user_stats(user_woody.token, ctx)['user_stats']['dms_joined']

http_tests/stats_tests/test_user_stats.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/user.py:57: in user_stats
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________________ test_dms_tracked_dm_remove __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=826426274...jI5ODU5MjMyNDY0Mjc3NDc2LCJzZXNzaW9uSUQiOjM5OH0.jcWoFQQkxiX4LNsVvMc7ioCDssHqABFR_FzSL1H_91I', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=98782...3ODk5MjEyNTY4ODAxNTgzNywic2Vzc2lvbklEIjozOTl9.joVlzpERjlvhPB7c2Q0QKzckbuCM-iF57mgd99JdFic', handle_str='buzzlightyear')
woody_and_buzz_dm = DM(owner=8264262749519008327229859232464277476, members=[98782823249496893426678992125688015837], name='sheriffwoody, buzzlightyear', dm_id=155922850880315867850114204548240975906)
ctx = None

    def test_dms_tracked_dm_remove(user_woody, user_buzz, woody_and_buzz_dm, ctx):
        dm_remove(user_woody.token, woody_and_buzz_dm.dm_id, ctx)
    
>       dm_stats_woody = user_stats(user_woody.token, ctx)['user_stats']['dms_joined']

http_tests/stats_tests/test_user_stats.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/user.py:57: in user_stats
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________ test_messages_tracked_message_send ______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=564806806...UwNjU5MTg4ODYzMDMyMDYzMiwic2Vzc2lvbklEIjo0MDB9.oHAgKYLFg5F681KugPn1_ZIb9xjY88GmDtBBKsuyXE8', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=155960031864702186961103478788694157346, owner_members=[56480680694100840500506591888630320632], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f0437eab6a8>
ctx = None

    def test_messages_tracked_message_send(user_woody, woodys_public_toybox, message_factory, ctx):
        message_factory(user_woody, woodys_public_toybox)
    
>       msg_stats = user_stats(user_woody.token, ctx)['user_stats']['messages_sent']

http_tests/stats_tests/test_user_stats.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/user.py:57: in user_stats
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________________ test_messages_tracked_message_sendlater ____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=808181518...DQ3NTM2MTcyNTY0MDM0NzkyLCJzZXNzaW9uSUQiOjQwMX0.EcJuFhiWrjhqU0AQwqD0N67srpp6YAXFg8RXF5c-Lc4', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=155996026011214042392315601740771305506, owner_members=[8081815184941510029847536172564034792], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f0437ef3e18>
ctx = None

    def test_messages_tracked_message_sendlater(user_woody, woodys_public_toybox, message_factory, ctx):
>       message_factory(user_woody, woodys_public_toybox, delay=1)

http_tests/stats_tests/test_user_stats.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:94: in make_message
    msg_id = message.message_sendlater(poster.token, location.channel_id, content, tts, ctx).popitem()[-1]
http_tests/fakepi/message.py:113: in message_sendlater
    token=token, channel_id=channel_id, message=msg, time_sent=time_to_send
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ test_messages_tracked_message_senddm _____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=139477219...NjM3ODc0MDQyMDA5ODg3NDcsInNlc3Npb25JRCI6NDAyfQ.lhq1Q0JMk8TEyad2ksx3c8o59U4vvhq5bcKhfGQC8Ro', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=139477219586614885936263787404200988747, members=[228279746213433108443627487301851345867], name='sheriffwoody, buzzlightyear', dm_id=156053135255317574412139780091052501026)
message_factory = <function message_factory.<locals>.make_message at 0x7f0437ef71e0>
ctx = None

    def test_messages_tracked_message_senddm(user_woody, woody_and_buzz_dm, message_factory, ctx):
        message_factory(user_woody, woody_and_buzz_dm)
    
>       msg_stats = user_stats(user_woody.token, ctx)['user_stats']['messages_sent']

http_tests/stats_tests/test_user_stats.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/user.py:57: in user_stats
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________ test_messages_tracked_message_senddmlater ___________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=204380338...NjU0NTUzNjg0ODYzOTExMDAsInNlc3Npb25JRCI6NDA0fQ.4eSWlm4w3Uwqrqo4d7qOJOvToco3fIVUqxiV_PlmWqs', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=204380338199919412364465455368486391100, members=[324044798887738593439255148367862070335], name='sheriffwoody, buzzlightyear', dm_id=156096772542667180923999552228018563106)
message_factory = <function message_factory.<locals>.make_message at 0x7f043800d950>
ctx = None

    def test_messages_tracked_message_senddmlater(user_woody, woody_and_buzz_dm, message_factory, ctx):
>       message_factory(user_woody, woody_and_buzz_dm, delay=1)

http_tests/stats_tests/test_user_stats.py:163: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:92: in make_message
    msg_id = message.message_sendlaterdm(poster.token, location.dm_id, content, tts, ctx).popitem()[-1]
http_tests/fakepi/message.py:124: in message_sendlaterdm
    token=token, dm_id=dm_id, message=msg, time_sent=time_to_send
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ test_messages_tracked_message_share ______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=293671636...QxNzAxNjc2NzE4MjI5NjkyNCwic2Vzc2lvbklEIjo0MDZ9.xnGy6wlMLffypgQfp2QNWad6ezP7573e3ppjOajqHD8', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=156130877097503071150760069156880197666, owner_members=[29367163610884344700417016767182296924], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f0437ef7620>
ctx = None

    def test_messages_tracked_message_share(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
        message_share(user_woody.token, a_msg.message_id, '', woodys_public_toybox.channel_id, -1, ctx)
    
>       msg_stats = user_stats(user_woody.token, ctx)['user_stats']['messages_sent']

http_tests/stats_tests/test_user_stats.py:178: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/user.py:57: in user_stats
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ test_messages_tracked_standup_finish _____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=201517724...NTA2OTUyMTMzNjcyNjY4OTUsInNlc3Npb25JRCI6NDA3fQ.9ob4jTRoe1_dHHMSz8UGCPWsU_as91QqWEgSfLhd-n8', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=156170919803119405489623222204819515426, owner_members=[201517724275222004576750695213367266895], all_members=[])
standup_factory = <function standup_factory.<locals>.make_standup at 0x7f0437f679d8>
ctx = None

    def test_messages_tracked_standup_finish(user_woody, woodys_public_toybox, standup_factory, ctx):
>       standup_factory(user_woody, woodys_public_toybox, 1)

http_tests/stats_tests/test_user_stats.py:186: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:128: in make_standup
    fin = standup.standup_start(creator.token, ch.channel_id, length, ctx)['time_finish']
http_tests/fakepi/standup.py:13: in standup_start
    token=token, channel_id=channel_id, length=length
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________________________ test_involvement_tracked ___________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=155232568...MDU2NjY3MDcyODM1OTMxNTQsInNlc3Npb25JRCI6NDA4fQ.x_3KXu7KSe_s13GjBBeb3tlcTWzzLjH1dXn9_7QeQqM', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=320767132...ODE4ODMyMTAzMzQzNDYwMTY0NDgsInNlc3Npb25JRCI6NDA5fQ.s-DxdKPGsWj2HsivcKRR0P9s-IcZ5kQtyJxcEEmCzdM', handle_str='lordzerg')
channel_factory = <function channel_factory.<locals>.make_channel at 0x7f0437ef7598>
ctx = None

    def test_involvement_tracked(user_woody, user_zerg, channel_factory, ctx):
>       stats = user_stats(user_woody.token, ctx)['user_stats']

http_tests/stats_tests/test_user_stats.py:199: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/user.py:57: in user_stats
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=526894519...Q3ODY3MzkxOTc0MjY1OTg5OCwic2Vzc2lvbklEIjo0MTB9.9Ril6vGKxjrzZbNIqp37gbt26njKLJXxfMprjxoHQrE', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           user_stats(user_woody.token, ctx)

http_tests/stats_tests/test_user_stats.py:216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/user.py:57: in user_stats
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________________________ test_user_profile_valid ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=262396889...U5NTE2MTMxODA0NzkyNDEzMCwic2Vzc2lvbklEIjo0MTF9.O5LkpO8FGazmwAwsaHmxjLazf1oIBjtbF5B0fShXlRA', handle_str='sheriffwoody')
ctx = None

    def test_user_profile_valid(user_woody, ctx):
        deets = user_profile(user_woody.token, user_woody.u_id, ctx)['user']
    
        assert deets['email'] == user_woody.email
>       assert deets['u_id'] == user_woody.u_id
E       KeyError: 'u_id'

http_tests/user_tests/test_user_profile.py:15: KeyError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=278110548...ODU4NjQyNTg5MDkwNDczMDIsInNlc3Npb25JRCI6NDIzfQ.KOnubeyMIkcGFmtx9s0tKtouXTWoqEFmGjM1hB2WzNc', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           user_profile_setemail(user_woody.token, user_woody.email, ctx)

http_tests/user_tests/test_user_profile_setemail.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/user.py:35: in user_profile_setemail
    token=token, email=email
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:69: InputError
________________________ test_successful_handle_change _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=169473904...NDM5NDk5MzMwMTg4ODI5NTMsInNlc3Npb25JRCI6NDI0fQ.Mphqtk9KCG6ZS-JLHi1w8QLlWnwiQInf9180yTtDR8k', handle_str='sheriffwoody')
ctx = None

    def test_successful_handle_change(user_woody, ctx):
        new_handle = 'www'
>       user_profile_sethandle(user_woody.token, new_handle, ctx)

http_tests/user_tests/test_user_profile_sethandle.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/user.py:46: in user_profile_sethandle
    token=token, handle_str=handle_str
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=458692219...E2MjIyNzQ0MjMzNDI1OTYxNSwic2Vzc2lvbklEIjo0MzF9.Fdsy2QNuJouZmfKv2HOiK-yQJSwjrZscgtFofF1ddbg', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           user_profile_sethandle(user_woody.token, user_woody.handle_str, ctx)

http_tests/user_tests/test_user_profile_sethandle.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/user.py:46: in user_profile_sethandle
    token=token, handle_str=handle_str
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=197686774...NTMxMzMwMTgwODk2NTIwODUsInNlc3Npb25JRCI6NDM3fQ.-hhh7qWXjp-y3xREGJ6Mj7QYLzrfpygpwiVjUZJ95XM', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           user_profile_setname(user_woody.token, user_woody.name_last, user_woody.name_first, ctx)

http_tests/user_tests/test_user_profile_setname.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/user.py:24: in user_profile_setname
    token=token, name_first=name_first, name_last=name_last
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:69: InputError
__________________________ test_return_format_correct __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=372284303...YzNTA3MzkzOTEyNTg4NTIxNCwic2Vzc2lvbklEIjo0Mzh9.2HWZnZFEKXkg4UeEs8AwCqL2Mb5zZUVPDmdb0bl77_U', handle_str='sheriffwoody')
img = IMG(url='https://gitlab.cse.unsw.edu.au/uploads/-/system/appearance/header_logo/1/unsw_logo_2016.jpg', xmin=0, ymin=0, xmax=144, ymax=61)
ctx = None

    def test_return_format_correct(user_woody, img, ctx):
>       assert user_profile_uploadphoto(user_woody.token, img.url, img.xmin, img.ymin, img.xmax, img.ymax, ctx) == {}

http_tests/user_tests/test_user_profile_uploadphoto.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/user.py:68: in user_profile_uploadphoto
    token=token, img_url=img_url, x_start=xmin, y_start=ymin, x_end=xmax, y_end=ymax
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=393018418...DQwNzEyMDAwMDY1NTE1ODAzLCJzZXNzaW9uSUQiOjQ0NX0.Ck71Y1tD9f9N6u239EmzsRhVBEi9nfSdfryOTCQBxwE', handle_str='sheriffwoody')
img = IMG(url='https://gitlab.cse.unsw.edu.au/uploads/-/system/appearance/header_logo/1/unsw_logo_2016.jpg', xmin=0, ymin=0, xmax=144, ymax=61)
ctx = None

    def test_invalid_token(user_woody, img, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           user_profile_uploadphoto(user_woody.token, img.url, img.xmin, img.ymin, img.xmax, img.ymax, ctx)

http_tests/user_tests/test_user_profile_uploadphoto.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/user.py:68: in user_profile_uploadphoto
    token=token, img_url=img_url, x_start=xmin, y_start=ymin, x_end=xmax, y_end=ymax
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
=========================== short test summary info ============================
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_removal_can_do_no_action
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_removal_profile_still_fetchable
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_removal_removed_from_dm
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_removal_not_in_users_all
FAILED http_tests/admin_tests/test_admin_userpermission_change.py::test_successful_permission_change
FAILED http_tests/admin_tests/test_admin_userpermission_change.py::test_changing_to_same_permission_idempotent
FAILED http_tests/auth_tests/test_auth_logout.py::test_not_logged_in_logout
FAILED http_tests/auth_tests/test_auth_register.py::test_successful_registration
FAILED http_tests/auth_tests/test_passwordreset_request.py::test_return_format_correct
FAILED http_tests/auth_tests/test_passwordreset_request.py::test_password_request_logs_out_everywhere
FAILED http_tests/channel_tests/test_channel_details.py::test_member_successful
FAILED http_tests/channel_tests/test_channel_join.py::test_invalidated_token
FAILED http_tests/channel_tests/test_channel_removeowner.py::test_nonmember_cannot_remove_owner
FAILED http_tests/channel_tests/test_channel_removeowner.py::test_member_cannot_remove_owner
FAILED http_tests/channel_tests/test_channel_removeowner.py::test_invalidated_token
FAILED http_tests/dm_tests/test_dm_create.py::test_dm_name_creation_single - ...
FAILED http_tests/dm_tests/test_dm_create.py::test_dm_name_creation_multiple
FAILED http_tests/dm_tests/test_dm_details.py::test_member_successful - KeyEr...
FAILED http_tests/dm_tests/test_dm_remove.py::test_removal_removes_messages
FAILED http_tests/message_tests/test_message_meta.py::test_message_ids_unique
FAILED http_tests/message_tests/test_message_pin.py::test_successful_pin_in_channel
FAILED http_tests/message_tests/test_message_pin.py::test_successful_pin_in_dm
FAILED http_tests/message_tests/test_message_pin.py::test_cannot_pin_twice - ...
FAILED http_tests/message_tests/test_message_pin.py::test_channel_member_cant_pin
FAILED http_tests/message_tests/test_message_pin.py::test_dm_member_cant_pin
FAILED http_tests/message_tests/test_message_pin.py::test_nonmember_cant_pin
FAILED http_tests/message_tests/test_message_pin.py::test_invalid_token - htt...
FAILED http_tests/message_tests/test_message_react.py::test_successful_react_in_channel
FAILED http_tests/message_tests/test_message_react.py::test_successful_react_to_dm_message
FAILED http_tests/message_tests/test_message_react.py::test_cant_react_twice
FAILED http_tests/message_tests/test_message_react.py::test_nonmember_cannot_react
FAILED http_tests/message_tests/test_message_react.py::test_invalid_token - h...
FAILED http_tests/message_tests/test_message_sendlater.py::test_valid_future_message
FAILED http_tests/message_tests/test_message_sendlater.py::test_nonmeber_cannot_sendlater
FAILED http_tests/message_tests/test_message_sendlater.py::test_invalid_token
FAILED http_tests/message_tests/test_message_sendlaterdm.py::test_valid_future_message
FAILED http_tests/message_tests/test_message_sendlaterdm.py::test_nonmeber_cannot_sendlater
FAILED http_tests/message_tests/test_message_sendlaterdm.py::test_invalid_token
FAILED http_tests/message_tests/test_message_unpin.py::test_successful_unpin_in_channel
FAILED http_tests/message_tests/test_message_unpin.py::test_successful_unpin_in_dm
FAILED http_tests/message_tests/test_message_unpin.py::test_cannot_unpin_twice
FAILED http_tests/message_tests/test_message_unpin.py::test_channel_member_cant_unpin
FAILED http_tests/message_tests/test_message_unpin.py::test_dm_member_cant_unpin
FAILED http_tests/message_tests/test_message_unpin.py::test_nonmember_cant_unpin
FAILED http_tests/message_tests/test_message_unpin.py::test_invalid_token - h...
FAILED http_tests/message_tests/test_message_unreact.py::test_successful_unreact_in_channel
FAILED http_tests/message_tests/test_message_unreact.py::test_successful_unreact_to_dm_message
FAILED http_tests/message_tests/test_message_unreact.py::test_invalid_react_id
FAILED http_tests/message_tests/test_message_unreact.py::test_cant_unreact_twice
FAILED http_tests/message_tests/test_message_unreact.py::test_nonmember_cannot_unreact
FAILED http_tests/message_tests/test_message_unreact.py::test_invalid_token
FAILED http_tests/other_tests/test_clear.py::test_clear_works - http_tests.er...
FAILED http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_sendlater_triggers_notification
FAILED http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_sendlaterdm_triggers_notification
FAILED http_tests/other_tests/test_notifications_get.py::test_react_triggers_notification[ch]
FAILED http_tests/other_tests/test_notifications_get.py::test_react_triggers_notification[dm]
FAILED http_tests/other_tests/test_notifications_get.py::test_most_recent_20_notifications_fetched
FAILED http_tests/other_tests/test_notifications_get.py::test_invalid_token
FAILED http_tests/other_tests/test_search.py::test_no_matches - TypeError: li...
FAILED http_tests/other_tests/test_search.py::test_single_match - TypeError: ...
FAILED http_tests/other_tests/test_search.py::test_multiple_matches - TypeErr...
FAILED http_tests/other_tests/test_search.py::test_multiple_channels_joined
FAILED http_tests/other_tests/test_search.py::test_search_includes_only_joined_channels
FAILED http_tests/other_tests/test_search.py::test_search_matches_more_than_just_authorised_user
FAILED http_tests/other_tests/test_users_all.py::test_successful_users_all - ...
FAILED http_tests/other_tests/test_users_all.py::test_invalid_token - http_te...
FAILED http_tests/standup_tests/test_standup_active.py::test_correct_return_format[True]
FAILED http_tests/standup_tests/test_standup_active.py::test_correct_return_format[False]
FAILED http_tests/standup_tests/test_standup_active.py::test_active_standup
FAILED http_tests/standup_tests/test_standup_active.py::test_inactive_standup
FAILED http_tests/standup_tests/test_standup_active.py::test_invalid_token - ...
FAILED http_tests/standup_tests/test_standup_send.py::test_messages_buffered_and_displayed_correctly
FAILED http_tests/standup_tests/test_standup_send.py::test_return_format - ht...
FAILED http_tests/standup_tests/test_standup_send.py::test_non_member_cannot_standup_send
FAILED http_tests/standup_tests/test_standup_send.py::test_invalid_message_length
FAILED http_tests/standup_tests/test_standup_send.py::test_invalid_token - ht...
FAILED http_tests/standup_tests/test_standup_start.py::test_standup_start_return_format
FAILED http_tests/standup_tests/test_standup_start.py::test_standup_restartable_after_lapse
FAILED http_tests/standup_tests/test_standup_start.py::test_standup_affects_only_one_channel
FAILED http_tests/standup_tests/test_standup_start.py::test_nonmember_cannot_start_standup
FAILED http_tests/standup_tests/test_standup_start.py::test_cannot_start_standup_when_already_active
FAILED http_tests/standup_tests/test_standup_start.py::test_invalid_token - h...
FAILED http_tests/stats_tests/test_user_stats.py::test_return_type_correct - ...
FAILED http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channels_create
FAILED http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_join
FAILED http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_invite
FAILED http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_leave
FAILED http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_add_owner
FAILED http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_create
FAILED http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_invite
FAILED http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_leave
FAILED http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_remove
FAILED http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_send
FAILED http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_sendlater
FAILED http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_senddm
FAILED http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_senddmlater
FAILED http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_share
FAILED http_tests/stats_tests/test_user_stats.py::test_messages_tracked_standup_finish
FAILED http_tests/stats_tests/test_user_stats.py::test_involvement_tracked - ...
FAILED http_tests/stats_tests/test_user_stats.py::test_invalid_token - http_t...
FAILED http_tests/user_tests/test_user_profile.py::test_user_profile_valid - ...
FAILED http_tests/user_tests/test_user_profile_setemail.py::test_invalid_token
FAILED http_tests/user_tests/test_user_profile_sethandle.py::test_successful_handle_change
FAILED http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_token
FAILED http_tests/user_tests/test_user_profile_setname.py::test_invalid_token
FAILED http_tests/user_tests/test_user_profile_uploadphoto.py::test_return_format_correct
FAILED http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_token
================= 107 failed, 214 passed, 22 skipped in 14.49s =================
